"""
This file was generated by the script generate_views_and_templates.py

"""
from django.http import HttpResponse
from django.http import JsonResponse
from django.shortcuts import render
from django.views.generic import TemplateView
from django.views.generic.base import View
from django.views.generic.detail import DetailView
from django.views.generic.list import ListView
import tablib

from mip_dr_app_api import models
from mip_dr_app_api import resources
from mip_dr_app_api import resources_pretty


class ResponseMixin:
    def get_data(self, context):
        """
        Returns an object that can be serialized.

        """
        try:
            return context["object_list"]
        except KeyError:
            pass

        return context["models"].filter(uid=context["object"].uid)


class CSVResponseMixin(ResponseMixin):
    """
    A mixin that can be used to render a CSV response.

    """

    def render_to_csv_response(self, context, resource, filename):
        """
        Returns a CSV response, transforming "context" to make the payload.

        """
        dataset = resource.export(self.get_data(context))
        response = HttpResponse(
            dataset.csv,
            content_type="text/csv",
        )
        response["Content-Disposition"] = f'attachment; filename="{filename}"'
        return response


class JSONResponseMixin:
    """
    A mixin that can be used to render a JSON response.

    """

    def render_to_json_response(self, context):
        """
        Returns a JSON response, transforming "context" to make the payload.

        """
        return JsonResponse(
            self.get_j_data(context),
            safe=False,
        )

    def get_j_data(self, context):
        """
        Returns an object that will be serialized as JSON by json.dumps().

        """
        try:
            return list(context["object_list"].values())
        except KeyError:
            pass

        data = context["object"].__dict__
        for key in ["_state", "_foreign_key_cache"]:
            try:
                del data[key]
            except KeyError:
                pass

        return data


class XLSXResponseMixin(ResponseMixin):
    """
    A mixin that can be used to render a XLSX response.

    """

    def render_to_xlsx_response(self, context, resource, filename):
        """
        Returns a XLSX response, transforming "resource" to make the payload.

        """
        dataset = resource.export(self.get_data(context))
        dataset.title = filename.split(".")[0]
        response = HttpResponse(
            dataset.xlsx,
            content_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        )
        response["Content-Disposition"] = f'attachment; filename="{filename}"'
        return response


class RequestVarGroupDetailView(
    CSVResponseMixin, JSONResponseMixin, XLSXResponseMixin, DetailView
):
    model = models.RequestVarGroup

    def render_to_response(self, context):
        # Look for a 'format=csv' GET argument
        if (
            self.request.GET.get("format") == "csv"
            or self.request.content_type == "text/csv"
        ):
            return self.render_to_csv_response(
                context, resources.RequestVarGroupResource(), "RequestVarGroup.csv"
            )

        # Look for a 'format=json' GET argument
        if (
            self.request.GET.get("format") == "json"
            or self.request.content_type == "application/json"
        ):
            return self.render_to_json_response(context)

        # Look for a 'format=xlsx' GET argument
        if (
            self.request.GET.get("format") == "xlsx"
            or self.request.content_type
            == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        ):
            return self.render_to_xlsx_response(
                context, resources.RequestVarGroupResource(), "RequestVarGroup.xlsx"
            )

        # return html
        return super().render_to_response(context)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["models"] = models.RequestVarGroup.objects.all()
        context["request_vars"] = models.RequestVar.objects.filter(vgid=context["object"])
        context["request_links"] = models.RequestLink.objects.filter(refid=context["object"])
        return context


class RequestVarGroupListView(
    CSVResponseMixin, JSONResponseMixin, XLSXResponseMixin, ListView
):
    model = models.RequestVarGroup

    def head(self, *args, **kwargs):
        last_modified = self.get_queryset().latest("date_modified")
        response = HttpResponse(
            # RFC 1123 date format.
            headers={
                "Last-Modified": last_modified.date_modified.strftime(
                    "%a, %d %b %Y %H:%M:%S GMT"
                )
            },
        )
        return response

    def render_to_response(self, context):
        # Look for a 'format=csv' GET argument
        if (
            self.request.GET.get("format") == "csv"
            or self.request.content_type == "text/csv"
        ):
            if self.request.GET.get("pretty") == "true":
                return self.render_to_csv_response(
                    context, resources_pretty.RequestVarGroupResource(), "RequestVarGroup.csv"
                )
            else:
                return self.render_to_csv_response(
                    context, resources.RequestVarGroupResource(), "RequestVarGroup.csv"
                )

        # Look for a 'format=json' GET argument
        if (
            self.request.GET.get("format") == "json"
            or self.request.content_type == "application/json"
        ):
            return self.render_to_json_response(context)

        # Look for a 'format=xlsx' GET argument
        if (
            self.request.GET.get("format") == "xlsx"
            or self.request.content_type
            == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        ):

            if self.request.GET.get("pretty") == "true":
                return self.render_to_xlsx_response(
                    context, resources_pretty.RequestVarGroupResource(), "RequestVarGroup.xlsx"
                )
            else:
                return self.render_to_xlsx_response(
                    context, resources.RequestVarGroupResource(), "RequestVarGroup.xlsx"
                )

        # return html
        return super().render_to_response(context)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["table_name"] = models.RequestVarGroup._meta.verbose_name
        context["table_description"] = models.RequestVarGroup.table_description
        context["table_id"] = models.RequestVarGroup.table_id
        return context


class RequestItemDetailView(
    CSVResponseMixin, JSONResponseMixin, XLSXResponseMixin, DetailView
):
    model = models.RequestItem

    def render_to_response(self, context):
        # Look for a 'format=csv' GET argument
        if (
            self.request.GET.get("format") == "csv"
            or self.request.content_type == "text/csv"
        ):
            return self.render_to_csv_response(
                context, resources.RequestItemResource(), "RequestItem.csv"
            )

        # Look for a 'format=json' GET argument
        if (
            self.request.GET.get("format") == "json"
            or self.request.content_type == "application/json"
        ):
            return self.render_to_json_response(context)

        # Look for a 'format=xlsx' GET argument
        if (
            self.request.GET.get("format") == "xlsx"
            or self.request.content_type
            == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        ):
            return self.render_to_xlsx_response(
                context, resources.RequestItemResource(), "RequestItem.xlsx"
            )

        # return html
        return super().render_to_response(context)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["models"] = models.RequestItem.objects.all()

        return context


class RequestItemListView(
    CSVResponseMixin, JSONResponseMixin, XLSXResponseMixin, ListView
):
    model = models.RequestItem

    def head(self, *args, **kwargs):
        last_modified = self.get_queryset().latest("date_modified")
        response = HttpResponse(
            # RFC 1123 date format.
            headers={
                "Last-Modified": last_modified.date_modified.strftime(
                    "%a, %d %b %Y %H:%M:%S GMT"
                )
            },
        )
        return response

    def render_to_response(self, context):
        # Look for a 'format=csv' GET argument
        if (
            self.request.GET.get("format") == "csv"
            or self.request.content_type == "text/csv"
        ):
            if self.request.GET.get("pretty") == "true":
                return self.render_to_csv_response(
                    context, resources_pretty.RequestItemResource(), "RequestItem.csv"
                )
            else:
                return self.render_to_csv_response(
                    context, resources.RequestItemResource(), "RequestItem.csv"
                )

        # Look for a 'format=json' GET argument
        if (
            self.request.GET.get("format") == "json"
            or self.request.content_type == "application/json"
        ):
            return self.render_to_json_response(context)

        # Look for a 'format=xlsx' GET argument
        if (
            self.request.GET.get("format") == "xlsx"
            or self.request.content_type
            == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        ):

            if self.request.GET.get("pretty") == "true":
                return self.render_to_xlsx_response(
                    context, resources_pretty.RequestItemResource(), "RequestItem.xlsx"
                )
            else:
                return self.render_to_xlsx_response(
                    context, resources.RequestItemResource(), "RequestItem.xlsx"
                )

        # return html
        return super().render_to_response(context)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["table_name"] = models.RequestItem._meta.verbose_name
        context["table_description"] = models.RequestItem.table_description
        context["table_id"] = models.RequestItem.table_id
        return context


class ExptgroupDetailView(
    CSVResponseMixin, JSONResponseMixin, XLSXResponseMixin, DetailView
):
    model = models.Exptgroup

    def render_to_response(self, context):
        # Look for a 'format=csv' GET argument
        if (
            self.request.GET.get("format") == "csv"
            or self.request.content_type == "text/csv"
        ):
            return self.render_to_csv_response(
                context, resources.ExptgroupResource(), "Exptgroup.csv"
            )

        # Look for a 'format=json' GET argument
        if (
            self.request.GET.get("format") == "json"
            or self.request.content_type == "application/json"
        ):
            return self.render_to_json_response(context)

        # Look for a 'format=xlsx' GET argument
        if (
            self.request.GET.get("format") == "xlsx"
            or self.request.content_type
            == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        ):
            return self.render_to_xlsx_response(
                context, resources.ExptgroupResource(), "Exptgroup.xlsx"
            )

        # return html
        return super().render_to_response(context)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["models"] = models.Exptgroup.objects.all()

        return context


class ExptgroupListView(
    CSVResponseMixin, JSONResponseMixin, XLSXResponseMixin, ListView
):
    model = models.Exptgroup

    def head(self, *args, **kwargs):
        last_modified = self.get_queryset().latest("date_modified")
        response = HttpResponse(
            # RFC 1123 date format.
            headers={
                "Last-Modified": last_modified.date_modified.strftime(
                    "%a, %d %b %Y %H:%M:%S GMT"
                )
            },
        )
        return response

    def render_to_response(self, context):
        # Look for a 'format=csv' GET argument
        if (
            self.request.GET.get("format") == "csv"
            or self.request.content_type == "text/csv"
        ):
            if self.request.GET.get("pretty") == "true":
                return self.render_to_csv_response(
                    context, resources_pretty.ExptgroupResource(), "Exptgroup.csv"
                )
            else:
                return self.render_to_csv_response(
                    context, resources.ExptgroupResource(), "Exptgroup.csv"
                )

        # Look for a 'format=json' GET argument
        if (
            self.request.GET.get("format") == "json"
            or self.request.content_type == "application/json"
        ):
            return self.render_to_json_response(context)

        # Look for a 'format=xlsx' GET argument
        if (
            self.request.GET.get("format") == "xlsx"
            or self.request.content_type
            == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        ):

            if self.request.GET.get("pretty") == "true":
                return self.render_to_xlsx_response(
                    context, resources_pretty.ExptgroupResource(), "Exptgroup.xlsx"
                )
            else:
                return self.render_to_xlsx_response(
                    context, resources.ExptgroupResource(), "Exptgroup.xlsx"
                )

        # return html
        return super().render_to_response(context)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["table_name"] = models.Exptgroup._meta.verbose_name
        context["table_description"] = models.Exptgroup.table_description
        context["table_id"] = models.Exptgroup.table_id
        return context


class MiptableDetailView(
    CSVResponseMixin, JSONResponseMixin, XLSXResponseMixin, DetailView
):
    model = models.Miptable

    def render_to_response(self, context):
        # Look for a 'format=csv' GET argument
        if (
            self.request.GET.get("format") == "csv"
            or self.request.content_type == "text/csv"
        ):
            return self.render_to_csv_response(
                context, resources.MiptableResource(), "Miptable.csv"
            )

        # Look for a 'format=json' GET argument
        if (
            self.request.GET.get("format") == "json"
            or self.request.content_type == "application/json"
        ):
            return self.render_to_json_response(context)

        # Look for a 'format=xlsx' GET argument
        if (
            self.request.GET.get("format") == "xlsx"
            or self.request.content_type
            == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        ):
            return self.render_to_xlsx_response(
                context, resources.MiptableResource(), "Miptable.xlsx"
            )

        # return html
        return super().render_to_response(context)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["models"] = models.Miptable.objects.all()

        return context


class MiptableListView(
    CSVResponseMixin, JSONResponseMixin, XLSXResponseMixin, ListView
):
    model = models.Miptable

    def head(self, *args, **kwargs):
        last_modified = self.get_queryset().latest("date_modified")
        response = HttpResponse(
            # RFC 1123 date format.
            headers={
                "Last-Modified": last_modified.date_modified.strftime(
                    "%a, %d %b %Y %H:%M:%S GMT"
                )
            },
        )
        return response

    def render_to_response(self, context):
        # Look for a 'format=csv' GET argument
        if (
            self.request.GET.get("format") == "csv"
            or self.request.content_type == "text/csv"
        ):
            if self.request.GET.get("pretty") == "true":
                return self.render_to_csv_response(
                    context, resources_pretty.MiptableResource(), "Miptable.csv"
                )
            else:
                return self.render_to_csv_response(
                    context, resources.MiptableResource(), "Miptable.csv"
                )

        # Look for a 'format=json' GET argument
        if (
            self.request.GET.get("format") == "json"
            or self.request.content_type == "application/json"
        ):
            return self.render_to_json_response(context)

        # Look for a 'format=xlsx' GET argument
        if (
            self.request.GET.get("format") == "xlsx"
            or self.request.content_type
            == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        ):

            if self.request.GET.get("pretty") == "true":
                return self.render_to_xlsx_response(
                    context, resources_pretty.MiptableResource(), "Miptable.xlsx"
                )
            else:
                return self.render_to_xlsx_response(
                    context, resources.MiptableResource(), "Miptable.xlsx"
                )

        # return html
        return super().render_to_response(context)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["table_name"] = models.Miptable._meta.verbose_name
        context["table_description"] = models.Miptable.table_description
        context["table_id"] = models.Miptable.table_id
        return context


class CMORvarDetailView(
    CSVResponseMixin, JSONResponseMixin, XLSXResponseMixin, DetailView
):
    model = models.CMORvar

    def render_to_response(self, context):
        # Look for a 'format=csv' GET argument
        if (
            self.request.GET.get("format") == "csv"
            or self.request.content_type == "text/csv"
        ):
            return self.render_to_csv_response(
                context, resources.CMORvarResource(), "CMORvar.csv"
            )

        # Look for a 'format=json' GET argument
        if (
            self.request.GET.get("format") == "json"
            or self.request.content_type == "application/json"
        ):
            return self.render_to_json_response(context)

        # Look for a 'format=xlsx' GET argument
        if (
            self.request.GET.get("format") == "xlsx"
            or self.request.content_type
            == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        ):
            return self.render_to_xlsx_response(
                context, resources.CMORvarResource(), "CMORvar.xlsx"
            )

        # return html
        return super().render_to_response(context)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["models"] = models.CMORvar.objects.all()

        return context


class CMORvarListView(
    CSVResponseMixin, JSONResponseMixin, XLSXResponseMixin, ListView
):
    model = models.CMORvar

    def head(self, *args, **kwargs):
        last_modified = self.get_queryset().latest("date_modified")
        response = HttpResponse(
            # RFC 1123 date format.
            headers={
                "Last-Modified": last_modified.date_modified.strftime(
                    "%a, %d %b %Y %H:%M:%S GMT"
                )
            },
        )
        return response

    def render_to_response(self, context):
        # Look for a 'format=csv' GET argument
        if (
            self.request.GET.get("format") == "csv"
            or self.request.content_type == "text/csv"
        ):
            if self.request.GET.get("pretty") == "true":
                return self.render_to_csv_response(
                    context, resources_pretty.CMORvarResource(), "CMORvar.csv"
                )
            else:
                return self.render_to_csv_response(
                    context, resources.CMORvarResource(), "CMORvar.csv"
                )

        # Look for a 'format=json' GET argument
        if (
            self.request.GET.get("format") == "json"
            or self.request.content_type == "application/json"
        ):
            return self.render_to_json_response(context)

        # Look for a 'format=xlsx' GET argument
        if (
            self.request.GET.get("format") == "xlsx"
            or self.request.content_type
            == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        ):

            if self.request.GET.get("pretty") == "true":
                return self.render_to_xlsx_response(
                    context, resources_pretty.CMORvarResource(), "CMORvar.xlsx"
                )
            else:
                return self.render_to_xlsx_response(
                    context, resources.CMORvarResource(), "CMORvar.xlsx"
                )

        # return html
        return super().render_to_response(context)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["table_name"] = models.CMORvar._meta.verbose_name
        context["table_description"] = models.CMORvar.table_description
        context["table_id"] = models.CMORvar.table_id
        return context


class ObjectiveDetailView(
    CSVResponseMixin, JSONResponseMixin, XLSXResponseMixin, DetailView
):
    model = models.Objective

    def render_to_response(self, context):
        # Look for a 'format=csv' GET argument
        if (
            self.request.GET.get("format") == "csv"
            or self.request.content_type == "text/csv"
        ):
            return self.render_to_csv_response(
                context, resources.ObjectiveResource(), "Objective.csv"
            )

        # Look for a 'format=json' GET argument
        if (
            self.request.GET.get("format") == "json"
            or self.request.content_type == "application/json"
        ):
            return self.render_to_json_response(context)

        # Look for a 'format=xlsx' GET argument
        if (
            self.request.GET.get("format") == "xlsx"
            or self.request.content_type
            == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        ):
            return self.render_to_xlsx_response(
                context, resources.ObjectiveResource(), "Objective.xlsx"
            )

        # return html
        return super().render_to_response(context)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["models"] = models.Objective.objects.all()

        return context


class ObjectiveListView(
    CSVResponseMixin, JSONResponseMixin, XLSXResponseMixin, ListView
):
    model = models.Objective

    def head(self, *args, **kwargs):
        last_modified = self.get_queryset().latest("date_modified")
        response = HttpResponse(
            # RFC 1123 date format.
            headers={
                "Last-Modified": last_modified.date_modified.strftime(
                    "%a, %d %b %Y %H:%M:%S GMT"
                )
            },
        )
        return response

    def render_to_response(self, context):
        # Look for a 'format=csv' GET argument
        if (
            self.request.GET.get("format") == "csv"
            or self.request.content_type == "text/csv"
        ):
            if self.request.GET.get("pretty") == "true":
                return self.render_to_csv_response(
                    context, resources_pretty.ObjectiveResource(), "Objective.csv"
                )
            else:
                return self.render_to_csv_response(
                    context, resources.ObjectiveResource(), "Objective.csv"
                )

        # Look for a 'format=json' GET argument
        if (
            self.request.GET.get("format") == "json"
            or self.request.content_type == "application/json"
        ):
            return self.render_to_json_response(context)

        # Look for a 'format=xlsx' GET argument
        if (
            self.request.GET.get("format") == "xlsx"
            or self.request.content_type
            == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        ):

            if self.request.GET.get("pretty") == "true":
                return self.render_to_xlsx_response(
                    context, resources_pretty.ObjectiveResource(), "Objective.xlsx"
                )
            else:
                return self.render_to_xlsx_response(
                    context, resources.ObjectiveResource(), "Objective.xlsx"
                )

        # return html
        return super().render_to_response(context)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["table_name"] = models.Objective._meta.verbose_name
        context["table_description"] = models.Objective.table_description
        context["table_id"] = models.Objective.table_id
        return context


class SpatialShapeDetailView(
    CSVResponseMixin, JSONResponseMixin, XLSXResponseMixin, DetailView
):
    model = models.SpatialShape

    def render_to_response(self, context):
        # Look for a 'format=csv' GET argument
        if (
            self.request.GET.get("format") == "csv"
            or self.request.content_type == "text/csv"
        ):
            return self.render_to_csv_response(
                context, resources.SpatialShapeResource(), "SpatialShape.csv"
            )

        # Look for a 'format=json' GET argument
        if (
            self.request.GET.get("format") == "json"
            or self.request.content_type == "application/json"
        ):
            return self.render_to_json_response(context)

        # Look for a 'format=xlsx' GET argument
        if (
            self.request.GET.get("format") == "xlsx"
            or self.request.content_type
            == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        ):
            return self.render_to_xlsx_response(
                context, resources.SpatialShapeResource(), "SpatialShape.xlsx"
            )

        # return html
        return super().render_to_response(context)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["models"] = models.SpatialShape.objects.all()

        return context


class SpatialShapeListView(
    CSVResponseMixin, JSONResponseMixin, XLSXResponseMixin, ListView
):
    model = models.SpatialShape

    def head(self, *args, **kwargs):
        last_modified = self.get_queryset().latest("date_modified")
        response = HttpResponse(
            # RFC 1123 date format.
            headers={
                "Last-Modified": last_modified.date_modified.strftime(
                    "%a, %d %b %Y %H:%M:%S GMT"
                )
            },
        )
        return response

    def render_to_response(self, context):
        # Look for a 'format=csv' GET argument
        if (
            self.request.GET.get("format") == "csv"
            or self.request.content_type == "text/csv"
        ):
            if self.request.GET.get("pretty") == "true":
                return self.render_to_csv_response(
                    context, resources_pretty.SpatialShapeResource(), "SpatialShape.csv"
                )
            else:
                return self.render_to_csv_response(
                    context, resources.SpatialShapeResource(), "SpatialShape.csv"
                )

        # Look for a 'format=json' GET argument
        if (
            self.request.GET.get("format") == "json"
            or self.request.content_type == "application/json"
        ):
            return self.render_to_json_response(context)

        # Look for a 'format=xlsx' GET argument
        if (
            self.request.GET.get("format") == "xlsx"
            or self.request.content_type
            == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        ):

            if self.request.GET.get("pretty") == "true":
                return self.render_to_xlsx_response(
                    context, resources_pretty.SpatialShapeResource(), "SpatialShape.xlsx"
                )
            else:
                return self.render_to_xlsx_response(
                    context, resources.SpatialShapeResource(), "SpatialShape.xlsx"
                )

        # return html
        return super().render_to_response(context)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["table_name"] = models.SpatialShape._meta.verbose_name
        context["table_description"] = models.SpatialShape.table_description
        context["table_id"] = models.SpatialShape.table_id
        return context


class RequestLinkDetailView(
    CSVResponseMixin, JSONResponseMixin, XLSXResponseMixin, DetailView
):
    model = models.RequestLink

    def render_to_response(self, context):
        # Look for a 'format=csv' GET argument
        if (
            self.request.GET.get("format") == "csv"
            or self.request.content_type == "text/csv"
        ):
            return self.render_to_csv_response(
                context, resources.RequestLinkResource(), "RequestLink.csv"
            )

        # Look for a 'format=json' GET argument
        if (
            self.request.GET.get("format") == "json"
            or self.request.content_type == "application/json"
        ):
            return self.render_to_json_response(context)

        # Look for a 'format=xlsx' GET argument
        if (
            self.request.GET.get("format") == "xlsx"
            or self.request.content_type
            == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        ):
            return self.render_to_xlsx_response(
                context, resources.RequestLinkResource(), "RequestLink.xlsx"
            )

        # return html
        return super().render_to_response(context)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["models"] = models.RequestLink.objects.all()

        return context


class RequestLinkListView(
    CSVResponseMixin, JSONResponseMixin, XLSXResponseMixin, ListView
):
    model = models.RequestLink

    def head(self, *args, **kwargs):
        last_modified = self.get_queryset().latest("date_modified")
        response = HttpResponse(
            # RFC 1123 date format.
            headers={
                "Last-Modified": last_modified.date_modified.strftime(
                    "%a, %d %b %Y %H:%M:%S GMT"
                )
            },
        )
        return response

    def render_to_response(self, context):
        # Look for a 'format=csv' GET argument
        if (
            self.request.GET.get("format") == "csv"
            or self.request.content_type == "text/csv"
        ):
            if self.request.GET.get("pretty") == "true":
                return self.render_to_csv_response(
                    context, resources_pretty.RequestLinkResource(), "RequestLink.csv"
                )
            else:
                return self.render_to_csv_response(
                    context, resources.RequestLinkResource(), "RequestLink.csv"
                )

        # Look for a 'format=json' GET argument
        if (
            self.request.GET.get("format") == "json"
            or self.request.content_type == "application/json"
        ):
            return self.render_to_json_response(context)

        # Look for a 'format=xlsx' GET argument
        if (
            self.request.GET.get("format") == "xlsx"
            or self.request.content_type
            == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        ):

            if self.request.GET.get("pretty") == "true":
                return self.render_to_xlsx_response(
                    context, resources_pretty.RequestLinkResource(), "RequestLink.xlsx"
                )
            else:
                return self.render_to_xlsx_response(
                    context, resources.RequestLinkResource(), "RequestLink.xlsx"
                )

        # return html
        return super().render_to_response(context)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["table_name"] = models.RequestLink._meta.verbose_name
        context["table_description"] = models.RequestLink.table_description
        context["table_id"] = models.RequestLink.table_id
        return context


class TableSectionDetailView(
    CSVResponseMixin, JSONResponseMixin, XLSXResponseMixin, DetailView
):
    model = models.TableSection

    def render_to_response(self, context):
        # Look for a 'format=csv' GET argument
        if (
            self.request.GET.get("format") == "csv"
            or self.request.content_type == "text/csv"
        ):
            return self.render_to_csv_response(
                context, resources.TableSectionResource(), "TableSection.csv"
            )

        # Look for a 'format=json' GET argument
        if (
            self.request.GET.get("format") == "json"
            or self.request.content_type == "application/json"
        ):
            return self.render_to_json_response(context)

        # Look for a 'format=xlsx' GET argument
        if (
            self.request.GET.get("format") == "xlsx"
            or self.request.content_type
            == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        ):
            return self.render_to_xlsx_response(
                context, resources.TableSectionResource(), "TableSection.xlsx"
            )

        # return html
        return super().render_to_response(context)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["models"] = models.TableSection.objects.all()

        return context


class TableSectionListView(
    CSVResponseMixin, JSONResponseMixin, XLSXResponseMixin, ListView
):
    model = models.TableSection

    def head(self, *args, **kwargs):
        last_modified = self.get_queryset().latest("date_modified")
        response = HttpResponse(
            # RFC 1123 date format.
            headers={
                "Last-Modified": last_modified.date_modified.strftime(
                    "%a, %d %b %Y %H:%M:%S GMT"
                )
            },
        )
        return response

    def render_to_response(self, context):
        # Look for a 'format=csv' GET argument
        if (
            self.request.GET.get("format") == "csv"
            or self.request.content_type == "text/csv"
        ):
            if self.request.GET.get("pretty") == "true":
                return self.render_to_csv_response(
                    context, resources_pretty.TableSectionResource(), "TableSection.csv"
                )
            else:
                return self.render_to_csv_response(
                    context, resources.TableSectionResource(), "TableSection.csv"
                )

        # Look for a 'format=json' GET argument
        if (
            self.request.GET.get("format") == "json"
            or self.request.content_type == "application/json"
        ):
            return self.render_to_json_response(context)

        # Look for a 'format=xlsx' GET argument
        if (
            self.request.GET.get("format") == "xlsx"
            or self.request.content_type
            == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        ):

            if self.request.GET.get("pretty") == "true":
                return self.render_to_xlsx_response(
                    context, resources_pretty.TableSectionResource(), "TableSection.xlsx"
                )
            else:
                return self.render_to_xlsx_response(
                    context, resources.TableSectionResource(), "TableSection.xlsx"
                )

        # return html
        return super().render_to_response(context)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["table_name"] = models.TableSection._meta.verbose_name
        context["table_description"] = models.TableSection.table_description
        context["table_id"] = models.TableSection.table_id
        return context


class ModelConfigDetailView(
    CSVResponseMixin, JSONResponseMixin, XLSXResponseMixin, DetailView
):
    model = models.ModelConfig

    def render_to_response(self, context):
        # Look for a 'format=csv' GET argument
        if (
            self.request.GET.get("format") == "csv"
            or self.request.content_type == "text/csv"
        ):
            return self.render_to_csv_response(
                context, resources.ModelConfigResource(), "ModelConfig.csv"
            )

        # Look for a 'format=json' GET argument
        if (
            self.request.GET.get("format") == "json"
            or self.request.content_type == "application/json"
        ):
            return self.render_to_json_response(context)

        # Look for a 'format=xlsx' GET argument
        if (
            self.request.GET.get("format") == "xlsx"
            or self.request.content_type
            == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        ):
            return self.render_to_xlsx_response(
                context, resources.ModelConfigResource(), "ModelConfig.xlsx"
            )

        # return html
        return super().render_to_response(context)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["models"] = models.ModelConfig.objects.all()

        return context


class ModelConfigListView(
    CSVResponseMixin, JSONResponseMixin, XLSXResponseMixin, ListView
):
    model = models.ModelConfig

    def head(self, *args, **kwargs):
        last_modified = self.get_queryset().latest("date_modified")
        response = HttpResponse(
            # RFC 1123 date format.
            headers={
                "Last-Modified": last_modified.date_modified.strftime(
                    "%a, %d %b %Y %H:%M:%S GMT"
                )
            },
        )
        return response

    def render_to_response(self, context):
        # Look for a 'format=csv' GET argument
        if (
            self.request.GET.get("format") == "csv"
            or self.request.content_type == "text/csv"
        ):
            if self.request.GET.get("pretty") == "true":
                return self.render_to_csv_response(
                    context, resources_pretty.ModelConfigResource(), "ModelConfig.csv"
                )
            else:
                return self.render_to_csv_response(
                    context, resources.ModelConfigResource(), "ModelConfig.csv"
                )

        # Look for a 'format=json' GET argument
        if (
            self.request.GET.get("format") == "json"
            or self.request.content_type == "application/json"
        ):
            return self.render_to_json_response(context)

        # Look for a 'format=xlsx' GET argument
        if (
            self.request.GET.get("format") == "xlsx"
            or self.request.content_type
            == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        ):

            if self.request.GET.get("pretty") == "true":
                return self.render_to_xlsx_response(
                    context, resources_pretty.ModelConfigResource(), "ModelConfig.xlsx"
                )
            else:
                return self.render_to_xlsx_response(
                    context, resources.ModelConfigResource(), "ModelConfig.xlsx"
                )

        # return html
        return super().render_to_response(context)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["table_name"] = models.ModelConfig._meta.verbose_name
        context["table_description"] = models.ModelConfig.table_description
        context["table_id"] = models.ModelConfig.table_id
        return context


class VarChoiceLinkCDetailView(
    CSVResponseMixin, JSONResponseMixin, XLSXResponseMixin, DetailView
):
    model = models.VarChoiceLinkC

    def render_to_response(self, context):
        # Look for a 'format=csv' GET argument
        if (
            self.request.GET.get("format") == "csv"
            or self.request.content_type == "text/csv"
        ):
            return self.render_to_csv_response(
                context, resources.VarChoiceLinkCResource(), "VarChoiceLinkC.csv"
            )

        # Look for a 'format=json' GET argument
        if (
            self.request.GET.get("format") == "json"
            or self.request.content_type == "application/json"
        ):
            return self.render_to_json_response(context)

        # Look for a 'format=xlsx' GET argument
        if (
            self.request.GET.get("format") == "xlsx"
            or self.request.content_type
            == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        ):
            return self.render_to_xlsx_response(
                context, resources.VarChoiceLinkCResource(), "VarChoiceLinkC.xlsx"
            )

        # return html
        return super().render_to_response(context)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["models"] = models.VarChoiceLinkC.objects.all()

        return context


class VarChoiceLinkCListView(
    CSVResponseMixin, JSONResponseMixin, XLSXResponseMixin, ListView
):
    model = models.VarChoiceLinkC

    def head(self, *args, **kwargs):
        last_modified = self.get_queryset().latest("date_modified")
        response = HttpResponse(
            # RFC 1123 date format.
            headers={
                "Last-Modified": last_modified.date_modified.strftime(
                    "%a, %d %b %Y %H:%M:%S GMT"
                )
            },
        )
        return response

    def render_to_response(self, context):
        # Look for a 'format=csv' GET argument
        if (
            self.request.GET.get("format") == "csv"
            or self.request.content_type == "text/csv"
        ):
            if self.request.GET.get("pretty") == "true":
                return self.render_to_csv_response(
                    context, resources_pretty.VarChoiceLinkCResource(), "VarChoiceLinkC.csv"
                )
            else:
                return self.render_to_csv_response(
                    context, resources.VarChoiceLinkCResource(), "VarChoiceLinkC.csv"
                )

        # Look for a 'format=json' GET argument
        if (
            self.request.GET.get("format") == "json"
            or self.request.content_type == "application/json"
        ):
            return self.render_to_json_response(context)

        # Look for a 'format=xlsx' GET argument
        if (
            self.request.GET.get("format") == "xlsx"
            or self.request.content_type
            == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        ):

            if self.request.GET.get("pretty") == "true":
                return self.render_to_xlsx_response(
                    context, resources_pretty.VarChoiceLinkCResource(), "VarChoiceLinkC.xlsx"
                )
            else:
                return self.render_to_xlsx_response(
                    context, resources.VarChoiceLinkCResource(), "VarChoiceLinkC.xlsx"
                )

        # return html
        return super().render_to_response(context)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["table_name"] = models.VarChoiceLinkC._meta.verbose_name
        context["table_description"] = models.VarChoiceLinkC.table_description
        context["table_id"] = models.VarChoiceLinkC.table_id
        return context


class ObjectiveLinkDetailView(
    CSVResponseMixin, JSONResponseMixin, XLSXResponseMixin, DetailView
):
    model = models.ObjectiveLink

    def render_to_response(self, context):
        # Look for a 'format=csv' GET argument
        if (
            self.request.GET.get("format") == "csv"
            or self.request.content_type == "text/csv"
        ):
            return self.render_to_csv_response(
                context, resources.ObjectiveLinkResource(), "ObjectiveLink.csv"
            )

        # Look for a 'format=json' GET argument
        if (
            self.request.GET.get("format") == "json"
            or self.request.content_type == "application/json"
        ):
            return self.render_to_json_response(context)

        # Look for a 'format=xlsx' GET argument
        if (
            self.request.GET.get("format") == "xlsx"
            or self.request.content_type
            == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        ):
            return self.render_to_xlsx_response(
                context, resources.ObjectiveLinkResource(), "ObjectiveLink.xlsx"
            )

        # return html
        return super().render_to_response(context)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["models"] = models.ObjectiveLink.objects.all()

        return context


class ObjectiveLinkListView(
    CSVResponseMixin, JSONResponseMixin, XLSXResponseMixin, ListView
):
    model = models.ObjectiveLink

    def head(self, *args, **kwargs):
        last_modified = self.get_queryset().latest("date_modified")
        response = HttpResponse(
            # RFC 1123 date format.
            headers={
                "Last-Modified": last_modified.date_modified.strftime(
                    "%a, %d %b %Y %H:%M:%S GMT"
                )
            },
        )
        return response

    def render_to_response(self, context):
        # Look for a 'format=csv' GET argument
        if (
            self.request.GET.get("format") == "csv"
            or self.request.content_type == "text/csv"
        ):
            if self.request.GET.get("pretty") == "true":
                return self.render_to_csv_response(
                    context, resources_pretty.ObjectiveLinkResource(), "ObjectiveLink.csv"
                )
            else:
                return self.render_to_csv_response(
                    context, resources.ObjectiveLinkResource(), "ObjectiveLink.csv"
                )

        # Look for a 'format=json' GET argument
        if (
            self.request.GET.get("format") == "json"
            or self.request.content_type == "application/json"
        ):
            return self.render_to_json_response(context)

        # Look for a 'format=xlsx' GET argument
        if (
            self.request.GET.get("format") == "xlsx"
            or self.request.content_type
            == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        ):

            if self.request.GET.get("pretty") == "true":
                return self.render_to_xlsx_response(
                    context, resources_pretty.ObjectiveLinkResource(), "ObjectiveLink.xlsx"
                )
            else:
                return self.render_to_xlsx_response(
                    context, resources.ObjectiveLinkResource(), "ObjectiveLink.xlsx"
                )

        # return html
        return super().render_to_response(context)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["table_name"] = models.ObjectiveLink._meta.verbose_name
        context["table_description"] = models.ObjectiveLink.table_description
        context["table_id"] = models.ObjectiveLink.table_id
        return context


class RemarksDetailView(
    CSVResponseMixin, JSONResponseMixin, XLSXResponseMixin, DetailView
):
    model = models.Remarks

    def render_to_response(self, context):
        # Look for a 'format=csv' GET argument
        if (
            self.request.GET.get("format") == "csv"
            or self.request.content_type == "text/csv"
        ):
            return self.render_to_csv_response(
                context, resources.RemarksResource(), "Remarks.csv"
            )

        # Look for a 'format=json' GET argument
        if (
            self.request.GET.get("format") == "json"
            or self.request.content_type == "application/json"
        ):
            return self.render_to_json_response(context)

        # Look for a 'format=xlsx' GET argument
        if (
            self.request.GET.get("format") == "xlsx"
            or self.request.content_type
            == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        ):
            return self.render_to_xlsx_response(
                context, resources.RemarksResource(), "Remarks.xlsx"
            )

        # return html
        return super().render_to_response(context)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["models"] = models.Remarks.objects.all()

        return context


class RemarksListView(
    CSVResponseMixin, JSONResponseMixin, XLSXResponseMixin, ListView
):
    model = models.Remarks

    def head(self, *args, **kwargs):
        last_modified = self.get_queryset().latest("date_modified")
        response = HttpResponse(
            # RFC 1123 date format.
            headers={
                "Last-Modified": last_modified.date_modified.strftime(
                    "%a, %d %b %Y %H:%M:%S GMT"
                )
            },
        )
        return response

    def render_to_response(self, context):
        # Look for a 'format=csv' GET argument
        if (
            self.request.GET.get("format") == "csv"
            or self.request.content_type == "text/csv"
        ):
            if self.request.GET.get("pretty") == "true":
                return self.render_to_csv_response(
                    context, resources_pretty.RemarksResource(), "Remarks.csv"
                )
            else:
                return self.render_to_csv_response(
                    context, resources.RemarksResource(), "Remarks.csv"
                )

        # Look for a 'format=json' GET argument
        if (
            self.request.GET.get("format") == "json"
            or self.request.content_type == "application/json"
        ):
            return self.render_to_json_response(context)

        # Look for a 'format=xlsx' GET argument
        if (
            self.request.GET.get("format") == "xlsx"
            or self.request.content_type
            == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        ):

            if self.request.GET.get("pretty") == "true":
                return self.render_to_xlsx_response(
                    context, resources_pretty.RemarksResource(), "Remarks.xlsx"
                )
            else:
                return self.render_to_xlsx_response(
                    context, resources.RemarksResource(), "Remarks.xlsx"
                )

        # return html
        return super().render_to_response(context)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["table_name"] = models.Remarks._meta.verbose_name
        context["table_description"] = models.Remarks.table_description
        context["table_id"] = models.Remarks.table_id
        return context


class ExperimentDetailView(
    CSVResponseMixin, JSONResponseMixin, XLSXResponseMixin, DetailView
):
    model = models.Experiment

    def render_to_response(self, context):
        # Look for a 'format=csv' GET argument
        if (
            self.request.GET.get("format") == "csv"
            or self.request.content_type == "text/csv"
        ):
            return self.render_to_csv_response(
                context, resources.ExperimentResource(), "Experiment.csv"
            )

        # Look for a 'format=json' GET argument
        if (
            self.request.GET.get("format") == "json"
            or self.request.content_type == "application/json"
        ):
            return self.render_to_json_response(context)

        # Look for a 'format=xlsx' GET argument
        if (
            self.request.GET.get("format") == "xlsx"
            or self.request.content_type
            == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        ):
            return self.render_to_xlsx_response(
                context, resources.ExperimentResource(), "Experiment.xlsx"
            )

        # return html
        return super().render_to_response(context)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["models"] = models.Experiment.objects.all()

        return context


class ExperimentListView(
    CSVResponseMixin, JSONResponseMixin, XLSXResponseMixin, ListView
):
    model = models.Experiment

    def head(self, *args, **kwargs):
        last_modified = self.get_queryset().latest("date_modified")
        response = HttpResponse(
            # RFC 1123 date format.
            headers={
                "Last-Modified": last_modified.date_modified.strftime(
                    "%a, %d %b %Y %H:%M:%S GMT"
                )
            },
        )
        return response

    def render_to_response(self, context):
        # Look for a 'format=csv' GET argument
        if (
            self.request.GET.get("format") == "csv"
            or self.request.content_type == "text/csv"
        ):
            if self.request.GET.get("pretty") == "true":
                return self.render_to_csv_response(
                    context, resources_pretty.ExperimentResource(), "Experiment.csv"
                )
            else:
                return self.render_to_csv_response(
                    context, resources.ExperimentResource(), "Experiment.csv"
                )

        # Look for a 'format=json' GET argument
        if (
            self.request.GET.get("format") == "json"
            or self.request.content_type == "application/json"
        ):
            return self.render_to_json_response(context)

        # Look for a 'format=xlsx' GET argument
        if (
            self.request.GET.get("format") == "xlsx"
            or self.request.content_type
            == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        ):

            if self.request.GET.get("pretty") == "true":
                return self.render_to_xlsx_response(
                    context, resources_pretty.ExperimentResource(), "Experiment.xlsx"
                )
            else:
                return self.render_to_xlsx_response(
                    context, resources.ExperimentResource(), "Experiment.xlsx"
                )

        # return html
        return super().render_to_response(context)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["table_name"] = models.Experiment._meta.verbose_name
        context["table_description"] = models.Experiment.table_description
        context["table_id"] = models.Experiment.table_id
        return context


class RequestVarDetailView(
    CSVResponseMixin, JSONResponseMixin, XLSXResponseMixin, DetailView
):
    model = models.RequestVar

    def render_to_response(self, context):
        # Look for a 'format=csv' GET argument
        if (
            self.request.GET.get("format") == "csv"
            or self.request.content_type == "text/csv"
        ):
            return self.render_to_csv_response(
                context, resources.RequestVarResource(), "RequestVar.csv"
            )

        # Look for a 'format=json' GET argument
        if (
            self.request.GET.get("format") == "json"
            or self.request.content_type == "application/json"
        ):
            return self.render_to_json_response(context)

        # Look for a 'format=xlsx' GET argument
        if (
            self.request.GET.get("format") == "xlsx"
            or self.request.content_type
            == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        ):
            return self.render_to_xlsx_response(
                context, resources.RequestVarResource(), "RequestVar.xlsx"
            )

        # return html
        return super().render_to_response(context)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["models"] = models.RequestVar.objects.all()

        return context


class RequestVarListView(
    CSVResponseMixin, JSONResponseMixin, XLSXResponseMixin, ListView
):
    model = models.RequestVar

    def head(self, *args, **kwargs):
        last_modified = self.get_queryset().latest("date_modified")
        response = HttpResponse(
            # RFC 1123 date format.
            headers={
                "Last-Modified": last_modified.date_modified.strftime(
                    "%a, %d %b %Y %H:%M:%S GMT"
                )
            },
        )
        return response

    def render_to_response(self, context):
        # Look for a 'format=csv' GET argument
        if (
            self.request.GET.get("format") == "csv"
            or self.request.content_type == "text/csv"
        ):
            if self.request.GET.get("pretty") == "true":
                return self.render_to_csv_response(
                    context, resources_pretty.RequestVarResource(), "RequestVar.csv"
                )
            else:
                return self.render_to_csv_response(
                    context, resources.RequestVarResource(), "RequestVar.csv"
                )

        # Look for a 'format=json' GET argument
        if (
            self.request.GET.get("format") == "json"
            or self.request.content_type == "application/json"
        ):
            return self.render_to_json_response(context)

        # Look for a 'format=xlsx' GET argument
        if (
            self.request.GET.get("format") == "xlsx"
            or self.request.content_type
            == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        ):

            if self.request.GET.get("pretty") == "true":
                return self.render_to_xlsx_response(
                    context, resources_pretty.RequestVarResource(), "RequestVar.xlsx"
                )
            else:
                return self.render_to_xlsx_response(
                    context, resources.RequestVarResource(), "RequestVar.xlsx"
                )

        # return html
        return super().render_to_response(context)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["table_name"] = models.RequestVar._meta.verbose_name
        context["table_description"] = models.RequestVar.table_description
        context["table_id"] = models.RequestVar.table_id
        return context


class StandardnameDetailView(
    CSVResponseMixin, JSONResponseMixin, XLSXResponseMixin, DetailView
):
    model = models.Standardname

    def render_to_response(self, context):
        # Look for a 'format=csv' GET argument
        if (
            self.request.GET.get("format") == "csv"
            or self.request.content_type == "text/csv"
        ):
            return self.render_to_csv_response(
                context, resources.StandardnameResource(), "Standardname.csv"
            )

        # Look for a 'format=json' GET argument
        if (
            self.request.GET.get("format") == "json"
            or self.request.content_type == "application/json"
        ):
            return self.render_to_json_response(context)

        # Look for a 'format=xlsx' GET argument
        if (
            self.request.GET.get("format") == "xlsx"
            or self.request.content_type
            == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        ):
            return self.render_to_xlsx_response(
                context, resources.StandardnameResource(), "Standardname.xlsx"
            )

        # return html
        return super().render_to_response(context)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["models"] = models.Standardname.objects.all()

        return context


class StandardnameListView(
    CSVResponseMixin, JSONResponseMixin, XLSXResponseMixin, ListView
):
    model = models.Standardname

    def head(self, *args, **kwargs):
        last_modified = self.get_queryset().latest("date_modified")
        response = HttpResponse(
            # RFC 1123 date format.
            headers={
                "Last-Modified": last_modified.date_modified.strftime(
                    "%a, %d %b %Y %H:%M:%S GMT"
                )
            },
        )
        return response

    def render_to_response(self, context):
        # Look for a 'format=csv' GET argument
        if (
            self.request.GET.get("format") == "csv"
            or self.request.content_type == "text/csv"
        ):
            if self.request.GET.get("pretty") == "true":
                return self.render_to_csv_response(
                    context, resources_pretty.StandardnameResource(), "Standardname.csv"
                )
            else:
                return self.render_to_csv_response(
                    context, resources.StandardnameResource(), "Standardname.csv"
                )

        # Look for a 'format=json' GET argument
        if (
            self.request.GET.get("format") == "json"
            or self.request.content_type == "application/json"
        ):
            return self.render_to_json_response(context)

        # Look for a 'format=xlsx' GET argument
        if (
            self.request.GET.get("format") == "xlsx"
            or self.request.content_type
            == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        ):

            if self.request.GET.get("pretty") == "true":
                return self.render_to_xlsx_response(
                    context, resources_pretty.StandardnameResource(), "Standardname.xlsx"
                )
            else:
                return self.render_to_xlsx_response(
                    context, resources.StandardnameResource(), "Standardname.xlsx"
                )

        # return html
        return super().render_to_response(context)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["table_name"] = models.Standardname._meta.verbose_name
        context["table_description"] = models.Standardname.table_description
        context["table_id"] = models.Standardname.table_id
        return context


class VarChoiceLinkRDetailView(
    CSVResponseMixin, JSONResponseMixin, XLSXResponseMixin, DetailView
):
    model = models.VarChoiceLinkR

    def render_to_response(self, context):
        # Look for a 'format=csv' GET argument
        if (
            self.request.GET.get("format") == "csv"
            or self.request.content_type == "text/csv"
        ):
            return self.render_to_csv_response(
                context, resources.VarChoiceLinkRResource(), "VarChoiceLinkR.csv"
            )

        # Look for a 'format=json' GET argument
        if (
            self.request.GET.get("format") == "json"
            or self.request.content_type == "application/json"
        ):
            return self.render_to_json_response(context)

        # Look for a 'format=xlsx' GET argument
        if (
            self.request.GET.get("format") == "xlsx"
            or self.request.content_type
            == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        ):
            return self.render_to_xlsx_response(
                context, resources.VarChoiceLinkRResource(), "VarChoiceLinkR.xlsx"
            )

        # return html
        return super().render_to_response(context)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["models"] = models.VarChoiceLinkR.objects.all()

        return context


class VarChoiceLinkRListView(
    CSVResponseMixin, JSONResponseMixin, XLSXResponseMixin, ListView
):
    model = models.VarChoiceLinkR

    def head(self, *args, **kwargs):
        last_modified = self.get_queryset().latest("date_modified")
        response = HttpResponse(
            # RFC 1123 date format.
            headers={
                "Last-Modified": last_modified.date_modified.strftime(
                    "%a, %d %b %Y %H:%M:%S GMT"
                )
            },
        )
        return response

    def render_to_response(self, context):
        # Look for a 'format=csv' GET argument
        if (
            self.request.GET.get("format") == "csv"
            or self.request.content_type == "text/csv"
        ):
            if self.request.GET.get("pretty") == "true":
                return self.render_to_csv_response(
                    context, resources_pretty.VarChoiceLinkRResource(), "VarChoiceLinkR.csv"
                )
            else:
                return self.render_to_csv_response(
                    context, resources.VarChoiceLinkRResource(), "VarChoiceLinkR.csv"
                )

        # Look for a 'format=json' GET argument
        if (
            self.request.GET.get("format") == "json"
            or self.request.content_type == "application/json"
        ):
            return self.render_to_json_response(context)

        # Look for a 'format=xlsx' GET argument
        if (
            self.request.GET.get("format") == "xlsx"
            or self.request.content_type
            == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        ):

            if self.request.GET.get("pretty") == "true":
                return self.render_to_xlsx_response(
                    context, resources_pretty.VarChoiceLinkRResource(), "VarChoiceLinkR.xlsx"
                )
            else:
                return self.render_to_xlsx_response(
                    context, resources.VarChoiceLinkRResource(), "VarChoiceLinkR.xlsx"
                )

        # return html
        return super().render_to_response(context)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["table_name"] = models.VarChoiceLinkR._meta.verbose_name
        context["table_description"] = models.VarChoiceLinkR.table_description
        context["table_id"] = models.VarChoiceLinkR.table_id
        return context


class VarDetailView(
    CSVResponseMixin, JSONResponseMixin, XLSXResponseMixin, DetailView
):
    model = models.Var

    def render_to_response(self, context):
        # Look for a 'format=csv' GET argument
        if (
            self.request.GET.get("format") == "csv"
            or self.request.content_type == "text/csv"
        ):
            return self.render_to_csv_response(
                context, resources.VarResource(), "Var.csv"
            )

        # Look for a 'format=json' GET argument
        if (
            self.request.GET.get("format") == "json"
            or self.request.content_type == "application/json"
        ):
            return self.render_to_json_response(context)

        # Look for a 'format=xlsx' GET argument
        if (
            self.request.GET.get("format") == "xlsx"
            or self.request.content_type
            == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        ):
            return self.render_to_xlsx_response(
                context, resources.VarResource(), "Var.xlsx"
            )

        # return html
        return super().render_to_response(context)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["models"] = models.Var.objects.all()

        return context


class VarListView(
    CSVResponseMixin, JSONResponseMixin, XLSXResponseMixin, ListView
):
    model = models.Var

    def head(self, *args, **kwargs):
        last_modified = self.get_queryset().latest("date_modified")
        response = HttpResponse(
            # RFC 1123 date format.
            headers={
                "Last-Modified": last_modified.date_modified.strftime(
                    "%a, %d %b %Y %H:%M:%S GMT"
                )
            },
        )
        return response

    def render_to_response(self, context):
        # Look for a 'format=csv' GET argument
        if (
            self.request.GET.get("format") == "csv"
            or self.request.content_type == "text/csv"
        ):
            if self.request.GET.get("pretty") == "true":
                return self.render_to_csv_response(
                    context, resources_pretty.VarResource(), "Var.csv"
                )
            else:
                return self.render_to_csv_response(
                    context, resources.VarResource(), "Var.csv"
                )

        # Look for a 'format=json' GET argument
        if (
            self.request.GET.get("format") == "json"
            or self.request.content_type == "application/json"
        ):
            return self.render_to_json_response(context)

        # Look for a 'format=xlsx' GET argument
        if (
            self.request.GET.get("format") == "xlsx"
            or self.request.content_type
            == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        ):

            if self.request.GET.get("pretty") == "true":
                return self.render_to_xlsx_response(
                    context, resources_pretty.VarResource(), "Var.xlsx"
                )
            else:
                return self.render_to_xlsx_response(
                    context, resources.VarResource(), "Var.xlsx"
                )

        # return html
        return super().render_to_response(context)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["table_name"] = models.Var._meta.verbose_name
        context["table_description"] = models.Var.table_description
        context["table_id"] = models.Var.table_id
        return context


class MipDetailView(
    CSVResponseMixin, JSONResponseMixin, XLSXResponseMixin, DetailView
):
    model = models.Mip

    def render_to_response(self, context):
        # Look for a 'format=csv' GET argument
        if (
            self.request.GET.get("format") == "csv"
            or self.request.content_type == "text/csv"
        ):
            return self.render_to_csv_response(
                context, resources.MipResource(), "Mip.csv"
            )

        # Look for a 'format=json' GET argument
        if (
            self.request.GET.get("format") == "json"
            or self.request.content_type == "application/json"
        ):
            return self.render_to_json_response(context)

        # Look for a 'format=xlsx' GET argument
        if (
            self.request.GET.get("format") == "xlsx"
            or self.request.content_type
            == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        ):
            return self.render_to_xlsx_response(
                context, resources.MipResource(), "Mip.xlsx"
            )

        # return html
        return super().render_to_response(context)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["models"] = models.Mip.objects.all()

        return context


class MipListView(
    CSVResponseMixin, JSONResponseMixin, XLSXResponseMixin, ListView
):
    model = models.Mip

    def head(self, *args, **kwargs):
        last_modified = self.get_queryset().latest("date_modified")
        response = HttpResponse(
            # RFC 1123 date format.
            headers={
                "Last-Modified": last_modified.date_modified.strftime(
                    "%a, %d %b %Y %H:%M:%S GMT"
                )
            },
        )
        return response

    def render_to_response(self, context):
        # Look for a 'format=csv' GET argument
        if (
            self.request.GET.get("format") == "csv"
            or self.request.content_type == "text/csv"
        ):
            if self.request.GET.get("pretty") == "true":
                return self.render_to_csv_response(
                    context, resources_pretty.MipResource(), "Mip.csv"
                )
            else:
                return self.render_to_csv_response(
                    context, resources.MipResource(), "Mip.csv"
                )

        # Look for a 'format=json' GET argument
        if (
            self.request.GET.get("format") == "json"
            or self.request.content_type == "application/json"
        ):
            return self.render_to_json_response(context)

        # Look for a 'format=xlsx' GET argument
        if (
            self.request.GET.get("format") == "xlsx"
            or self.request.content_type
            == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        ):

            if self.request.GET.get("pretty") == "true":
                return self.render_to_xlsx_response(
                    context, resources_pretty.MipResource(), "Mip.xlsx"
                )
            else:
                return self.render_to_xlsx_response(
                    context, resources.MipResource(), "Mip.xlsx"
                )

        # return html
        return super().render_to_response(context)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["table_name"] = models.Mip._meta.verbose_name
        context["table_description"] = models.Mip.table_description
        context["table_id"] = models.Mip.table_id
        return context


class VarChoiceDetailView(
    CSVResponseMixin, JSONResponseMixin, XLSXResponseMixin, DetailView
):
    model = models.VarChoice

    def render_to_response(self, context):
        # Look for a 'format=csv' GET argument
        if (
            self.request.GET.get("format") == "csv"
            or self.request.content_type == "text/csv"
        ):
            return self.render_to_csv_response(
                context, resources.VarChoiceResource(), "VarChoice.csv"
            )

        # Look for a 'format=json' GET argument
        if (
            self.request.GET.get("format") == "json"
            or self.request.content_type == "application/json"
        ):
            return self.render_to_json_response(context)

        # Look for a 'format=xlsx' GET argument
        if (
            self.request.GET.get("format") == "xlsx"
            or self.request.content_type
            == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        ):
            return self.render_to_xlsx_response(
                context, resources.VarChoiceResource(), "VarChoice.xlsx"
            )

        # return html
        return super().render_to_response(context)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["models"] = models.VarChoice.objects.all()

        return context


class VarChoiceListView(
    CSVResponseMixin, JSONResponseMixin, XLSXResponseMixin, ListView
):
    model = models.VarChoice

    def head(self, *args, **kwargs):
        last_modified = self.get_queryset().latest("date_modified")
        response = HttpResponse(
            # RFC 1123 date format.
            headers={
                "Last-Modified": last_modified.date_modified.strftime(
                    "%a, %d %b %Y %H:%M:%S GMT"
                )
            },
        )
        return response

    def render_to_response(self, context):
        # Look for a 'format=csv' GET argument
        if (
            self.request.GET.get("format") == "csv"
            or self.request.content_type == "text/csv"
        ):
            if self.request.GET.get("pretty") == "true":
                return self.render_to_csv_response(
                    context, resources_pretty.VarChoiceResource(), "VarChoice.csv"
                )
            else:
                return self.render_to_csv_response(
                    context, resources.VarChoiceResource(), "VarChoice.csv"
                )

        # Look for a 'format=json' GET argument
        if (
            self.request.GET.get("format") == "json"
            or self.request.content_type == "application/json"
        ):
            return self.render_to_json_response(context)

        # Look for a 'format=xlsx' GET argument
        if (
            self.request.GET.get("format") == "xlsx"
            or self.request.content_type
            == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        ):

            if self.request.GET.get("pretty") == "true":
                return self.render_to_xlsx_response(
                    context, resources_pretty.VarChoiceResource(), "VarChoice.xlsx"
                )
            else:
                return self.render_to_xlsx_response(
                    context, resources.VarChoiceResource(), "VarChoice.xlsx"
                )

        # return html
        return super().render_to_response(context)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["table_name"] = models.VarChoice._meta.verbose_name
        context["table_description"] = models.VarChoice.table_description
        context["table_id"] = models.VarChoice.table_id
        return context


class TemporalShapeDetailView(
    CSVResponseMixin, JSONResponseMixin, XLSXResponseMixin, DetailView
):
    model = models.TemporalShape

    def render_to_response(self, context):
        # Look for a 'format=csv' GET argument
        if (
            self.request.GET.get("format") == "csv"
            or self.request.content_type == "text/csv"
        ):
            return self.render_to_csv_response(
                context, resources.TemporalShapeResource(), "TemporalShape.csv"
            )

        # Look for a 'format=json' GET argument
        if (
            self.request.GET.get("format") == "json"
            or self.request.content_type == "application/json"
        ):
            return self.render_to_json_response(context)

        # Look for a 'format=xlsx' GET argument
        if (
            self.request.GET.get("format") == "xlsx"
            or self.request.content_type
            == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        ):
            return self.render_to_xlsx_response(
                context, resources.TemporalShapeResource(), "TemporalShape.xlsx"
            )

        # return html
        return super().render_to_response(context)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["models"] = models.TemporalShape.objects.all()

        return context


class TemporalShapeListView(
    CSVResponseMixin, JSONResponseMixin, XLSXResponseMixin, ListView
):
    model = models.TemporalShape

    def head(self, *args, **kwargs):
        last_modified = self.get_queryset().latest("date_modified")
        response = HttpResponse(
            # RFC 1123 date format.
            headers={
                "Last-Modified": last_modified.date_modified.strftime(
                    "%a, %d %b %Y %H:%M:%S GMT"
                )
            },
        )
        return response

    def render_to_response(self, context):
        # Look for a 'format=csv' GET argument
        if (
            self.request.GET.get("format") == "csv"
            or self.request.content_type == "text/csv"
        ):
            if self.request.GET.get("pretty") == "true":
                return self.render_to_csv_response(
                    context, resources_pretty.TemporalShapeResource(), "TemporalShape.csv"
                )
            else:
                return self.render_to_csv_response(
                    context, resources.TemporalShapeResource(), "TemporalShape.csv"
                )

        # Look for a 'format=json' GET argument
        if (
            self.request.GET.get("format") == "json"
            or self.request.content_type == "application/json"
        ):
            return self.render_to_json_response(context)

        # Look for a 'format=xlsx' GET argument
        if (
            self.request.GET.get("format") == "xlsx"
            or self.request.content_type
            == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        ):

            if self.request.GET.get("pretty") == "true":
                return self.render_to_xlsx_response(
                    context, resources_pretty.TemporalShapeResource(), "TemporalShape.xlsx"
                )
            else:
                return self.render_to_xlsx_response(
                    context, resources.TemporalShapeResource(), "TemporalShape.xlsx"
                )

        # return html
        return super().render_to_response(context)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["table_name"] = models.TemporalShape._meta.verbose_name
        context["table_description"] = models.TemporalShape.table_description
        context["table_id"] = models.TemporalShape.table_id
        return context


class StructureDetailView(
    CSVResponseMixin, JSONResponseMixin, XLSXResponseMixin, DetailView
):
    model = models.Structure

    def render_to_response(self, context):
        # Look for a 'format=csv' GET argument
        if (
            self.request.GET.get("format") == "csv"
            or self.request.content_type == "text/csv"
        ):
            return self.render_to_csv_response(
                context, resources.StructureResource(), "Structure.csv"
            )

        # Look for a 'format=json' GET argument
        if (
            self.request.GET.get("format") == "json"
            or self.request.content_type == "application/json"
        ):
            return self.render_to_json_response(context)

        # Look for a 'format=xlsx' GET argument
        if (
            self.request.GET.get("format") == "xlsx"
            or self.request.content_type
            == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        ):
            return self.render_to_xlsx_response(
                context, resources.StructureResource(), "Structure.xlsx"
            )

        # return html
        return super().render_to_response(context)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["models"] = models.Structure.objects.all()

        return context


class StructureListView(
    CSVResponseMixin, JSONResponseMixin, XLSXResponseMixin, ListView
):
    model = models.Structure

    def head(self, *args, **kwargs):
        last_modified = self.get_queryset().latest("date_modified")
        response = HttpResponse(
            # RFC 1123 date format.
            headers={
                "Last-Modified": last_modified.date_modified.strftime(
                    "%a, %d %b %Y %H:%M:%S GMT"
                )
            },
        )
        return response

    def render_to_response(self, context):
        # Look for a 'format=csv' GET argument
        if (
            self.request.GET.get("format") == "csv"
            or self.request.content_type == "text/csv"
        ):
            if self.request.GET.get("pretty") == "true":
                return self.render_to_csv_response(
                    context, resources_pretty.StructureResource(), "Structure.csv"
                )
            else:
                return self.render_to_csv_response(
                    context, resources.StructureResource(), "Structure.csv"
                )

        # Look for a 'format=json' GET argument
        if (
            self.request.GET.get("format") == "json"
            or self.request.content_type == "application/json"
        ):
            return self.render_to_json_response(context)

        # Look for a 'format=xlsx' GET argument
        if (
            self.request.GET.get("format") == "xlsx"
            or self.request.content_type
            == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        ):

            if self.request.GET.get("pretty") == "true":
                return self.render_to_xlsx_response(
                    context, resources_pretty.StructureResource(), "Structure.xlsx"
                )
            else:
                return self.render_to_xlsx_response(
                    context, resources.StructureResource(), "Structure.xlsx"
                )

        # return html
        return super().render_to_response(context)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["table_name"] = models.Structure._meta.verbose_name
        context["table_description"] = models.Structure.table_description
        context["table_id"] = models.Structure.table_id
        return context


class GridsDetailView(
    CSVResponseMixin, JSONResponseMixin, XLSXResponseMixin, DetailView
):
    model = models.Grids

    def render_to_response(self, context):
        # Look for a 'format=csv' GET argument
        if (
            self.request.GET.get("format") == "csv"
            or self.request.content_type == "text/csv"
        ):
            return self.render_to_csv_response(
                context, resources.GridsResource(), "Grids.csv"
            )

        # Look for a 'format=json' GET argument
        if (
            self.request.GET.get("format") == "json"
            or self.request.content_type == "application/json"
        ):
            return self.render_to_json_response(context)

        # Look for a 'format=xlsx' GET argument
        if (
            self.request.GET.get("format") == "xlsx"
            or self.request.content_type
            == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        ):
            return self.render_to_xlsx_response(
                context, resources.GridsResource(), "Grids.xlsx"
            )

        # return html
        return super().render_to_response(context)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["models"] = models.Grids.objects.all()

        return context


class GridsListView(
    CSVResponseMixin, JSONResponseMixin, XLSXResponseMixin, ListView
):
    model = models.Grids

    def head(self, *args, **kwargs):
        last_modified = self.get_queryset().latest("date_modified")
        response = HttpResponse(
            # RFC 1123 date format.
            headers={
                "Last-Modified": last_modified.date_modified.strftime(
                    "%a, %d %b %Y %H:%M:%S GMT"
                )
            },
        )
        return response

    def render_to_response(self, context):
        # Look for a 'format=csv' GET argument
        if (
            self.request.GET.get("format") == "csv"
            or self.request.content_type == "text/csv"
        ):
            if self.request.GET.get("pretty") == "true":
                return self.render_to_csv_response(
                    context, resources_pretty.GridsResource(), "Grids.csv"
                )
            else:
                return self.render_to_csv_response(
                    context, resources.GridsResource(), "Grids.csv"
                )

        # Look for a 'format=json' GET argument
        if (
            self.request.GET.get("format") == "json"
            or self.request.content_type == "application/json"
        ):
            return self.render_to_json_response(context)

        # Look for a 'format=xlsx' GET argument
        if (
            self.request.GET.get("format") == "xlsx"
            or self.request.content_type
            == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        ):

            if self.request.GET.get("pretty") == "true":
                return self.render_to_xlsx_response(
                    context, resources_pretty.GridsResource(), "Grids.xlsx"
                )
            else:
                return self.render_to_xlsx_response(
                    context, resources.GridsResource(), "Grids.xlsx"
                )

        # return html
        return super().render_to_response(context)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["table_name"] = models.Grids._meta.verbose_name
        context["table_description"] = models.Grids.table_description
        context["table_id"] = models.Grids.table_id
        return context


class TimeSliceDetailView(
    CSVResponseMixin, JSONResponseMixin, XLSXResponseMixin, DetailView
):
    model = models.TimeSlice

    def render_to_response(self, context):
        # Look for a 'format=csv' GET argument
        if (
            self.request.GET.get("format") == "csv"
            or self.request.content_type == "text/csv"
        ):
            return self.render_to_csv_response(
                context, resources.TimeSliceResource(), "TimeSlice.csv"
            )

        # Look for a 'format=json' GET argument
        if (
            self.request.GET.get("format") == "json"
            or self.request.content_type == "application/json"
        ):
            return self.render_to_json_response(context)

        # Look for a 'format=xlsx' GET argument
        if (
            self.request.GET.get("format") == "xlsx"
            or self.request.content_type
            == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        ):
            return self.render_to_xlsx_response(
                context, resources.TimeSliceResource(), "TimeSlice.xlsx"
            )

        # return html
        return super().render_to_response(context)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["models"] = models.TimeSlice.objects.all()

        return context


class TimeSliceListView(
    CSVResponseMixin, JSONResponseMixin, XLSXResponseMixin, ListView
):
    model = models.TimeSlice

    def head(self, *args, **kwargs):
        last_modified = self.get_queryset().latest("date_modified")
        response = HttpResponse(
            # RFC 1123 date format.
            headers={
                "Last-Modified": last_modified.date_modified.strftime(
                    "%a, %d %b %Y %H:%M:%S GMT"
                )
            },
        )
        return response

    def render_to_response(self, context):
        # Look for a 'format=csv' GET argument
        if (
            self.request.GET.get("format") == "csv"
            or self.request.content_type == "text/csv"
        ):
            if self.request.GET.get("pretty") == "true":
                return self.render_to_csv_response(
                    context, resources_pretty.TimeSliceResource(), "TimeSlice.csv"
                )
            else:
                return self.render_to_csv_response(
                    context, resources.TimeSliceResource(), "TimeSlice.csv"
                )

        # Look for a 'format=json' GET argument
        if (
            self.request.GET.get("format") == "json"
            or self.request.content_type == "application/json"
        ):
            return self.render_to_json_response(context)

        # Look for a 'format=xlsx' GET argument
        if (
            self.request.GET.get("format") == "xlsx"
            or self.request.content_type
            == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        ):

            if self.request.GET.get("pretty") == "true":
                return self.render_to_xlsx_response(
                    context, resources_pretty.TimeSliceResource(), "TimeSlice.xlsx"
                )
            else:
                return self.render_to_xlsx_response(
                    context, resources.TimeSliceResource(), "TimeSlice.xlsx"
                )

        # return html
        return super().render_to_response(context)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["table_name"] = models.TimeSlice._meta.verbose_name
        context["table_description"] = models.TimeSlice.table_description
        context["table_id"] = models.TimeSlice.table_id
        return context


class CellMethodsDetailView(
    CSVResponseMixin, JSONResponseMixin, XLSXResponseMixin, DetailView
):
    model = models.CellMethods

    def render_to_response(self, context):
        # Look for a 'format=csv' GET argument
        if (
            self.request.GET.get("format") == "csv"
            or self.request.content_type == "text/csv"
        ):
            return self.render_to_csv_response(
                context, resources.CellMethodsResource(), "CellMethods.csv"
            )

        # Look for a 'format=json' GET argument
        if (
            self.request.GET.get("format") == "json"
            or self.request.content_type == "application/json"
        ):
            return self.render_to_json_response(context)

        # Look for a 'format=xlsx' GET argument
        if (
            self.request.GET.get("format") == "xlsx"
            or self.request.content_type
            == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        ):
            return self.render_to_xlsx_response(
                context, resources.CellMethodsResource(), "CellMethods.xlsx"
            )

        # return html
        return super().render_to_response(context)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["models"] = models.CellMethods.objects.all()

        return context


class CellMethodsListView(
    CSVResponseMixin, JSONResponseMixin, XLSXResponseMixin, ListView
):
    model = models.CellMethods

    def head(self, *args, **kwargs):
        last_modified = self.get_queryset().latest("date_modified")
        response = HttpResponse(
            # RFC 1123 date format.
            headers={
                "Last-Modified": last_modified.date_modified.strftime(
                    "%a, %d %b %Y %H:%M:%S GMT"
                )
            },
        )
        return response

    def render_to_response(self, context):
        # Look for a 'format=csv' GET argument
        if (
            self.request.GET.get("format") == "csv"
            or self.request.content_type == "text/csv"
        ):
            if self.request.GET.get("pretty") == "true":
                return self.render_to_csv_response(
                    context, resources_pretty.CellMethodsResource(), "CellMethods.csv"
                )
            else:
                return self.render_to_csv_response(
                    context, resources.CellMethodsResource(), "CellMethods.csv"
                )

        # Look for a 'format=json' GET argument
        if (
            self.request.GET.get("format") == "json"
            or self.request.content_type == "application/json"
        ):
            return self.render_to_json_response(context)

        # Look for a 'format=xlsx' GET argument
        if (
            self.request.GET.get("format") == "xlsx"
            or self.request.content_type
            == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        ):

            if self.request.GET.get("pretty") == "true":
                return self.render_to_xlsx_response(
                    context, resources_pretty.CellMethodsResource(), "CellMethods.xlsx"
                )
            else:
                return self.render_to_xlsx_response(
                    context, resources.CellMethodsResource(), "CellMethods.xlsx"
                )

        # return html
        return super().render_to_response(context)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["table_name"] = models.CellMethods._meta.verbose_name
        context["table_description"] = models.CellMethods.table_description
        context["table_id"] = models.CellMethods.table_id
        return context


class QcrangesDetailView(
    CSVResponseMixin, JSONResponseMixin, XLSXResponseMixin, DetailView
):
    model = models.Qcranges

    def render_to_response(self, context):
        # Look for a 'format=csv' GET argument
        if (
            self.request.GET.get("format") == "csv"
            or self.request.content_type == "text/csv"
        ):
            return self.render_to_csv_response(
                context, resources.QcrangesResource(), "Qcranges.csv"
            )

        # Look for a 'format=json' GET argument
        if (
            self.request.GET.get("format") == "json"
            or self.request.content_type == "application/json"
        ):
            return self.render_to_json_response(context)

        # Look for a 'format=xlsx' GET argument
        if (
            self.request.GET.get("format") == "xlsx"
            or self.request.content_type
            == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        ):
            return self.render_to_xlsx_response(
                context, resources.QcrangesResource(), "Qcranges.xlsx"
            )

        # return html
        return super().render_to_response(context)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["models"] = models.Qcranges.objects.all()

        return context


class QcrangesListView(
    CSVResponseMixin, JSONResponseMixin, XLSXResponseMixin, ListView
):
    model = models.Qcranges

    def head(self, *args, **kwargs):
        last_modified = self.get_queryset().latest("date_modified")
        response = HttpResponse(
            # RFC 1123 date format.
            headers={
                "Last-Modified": last_modified.date_modified.strftime(
                    "%a, %d %b %Y %H:%M:%S GMT"
                )
            },
        )
        return response

    def render_to_response(self, context):
        # Look for a 'format=csv' GET argument
        if (
            self.request.GET.get("format") == "csv"
            or self.request.content_type == "text/csv"
        ):
            if self.request.GET.get("pretty") == "true":
                return self.render_to_csv_response(
                    context, resources_pretty.QcrangesResource(), "Qcranges.csv"
                )
            else:
                return self.render_to_csv_response(
                    context, resources.QcrangesResource(), "Qcranges.csv"
                )

        # Look for a 'format=json' GET argument
        if (
            self.request.GET.get("format") == "json"
            or self.request.content_type == "application/json"
        ):
            return self.render_to_json_response(context)

        # Look for a 'format=xlsx' GET argument
        if (
            self.request.GET.get("format") == "xlsx"
            or self.request.content_type
            == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        ):

            if self.request.GET.get("pretty") == "true":
                return self.render_to_xlsx_response(
                    context, resources_pretty.QcrangesResource(), "Qcranges.xlsx"
                )
            else:
                return self.render_to_xlsx_response(
                    context, resources.QcrangesResource(), "Qcranges.xlsx"
                )

        # return html
        return super().render_to_response(context)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["table_name"] = models.Qcranges._meta.verbose_name
        context["table_description"] = models.Qcranges.table_description
        context["table_id"] = models.Qcranges.table_id
        return context


class PlacesDetailView(
    CSVResponseMixin, JSONResponseMixin, XLSXResponseMixin, DetailView
):
    model = models.Places

    def render_to_response(self, context):
        # Look for a 'format=csv' GET argument
        if (
            self.request.GET.get("format") == "csv"
            or self.request.content_type == "text/csv"
        ):
            return self.render_to_csv_response(
                context, resources.PlacesResource(), "Places.csv"
            )

        # Look for a 'format=json' GET argument
        if (
            self.request.GET.get("format") == "json"
            or self.request.content_type == "application/json"
        ):
            return self.render_to_json_response(context)

        # Look for a 'format=xlsx' GET argument
        if (
            self.request.GET.get("format") == "xlsx"
            or self.request.content_type
            == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        ):
            return self.render_to_xlsx_response(
                context, resources.PlacesResource(), "Places.xlsx"
            )

        # return html
        return super().render_to_response(context)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["models"] = models.Places.objects.all()

        return context


class PlacesListView(
    CSVResponseMixin, JSONResponseMixin, XLSXResponseMixin, ListView
):
    model = models.Places

    def head(self, *args, **kwargs):
        last_modified = self.get_queryset().latest("date_modified")
        response = HttpResponse(
            # RFC 1123 date format.
            headers={
                "Last-Modified": last_modified.date_modified.strftime(
                    "%a, %d %b %Y %H:%M:%S GMT"
                )
            },
        )
        return response

    def render_to_response(self, context):
        # Look for a 'format=csv' GET argument
        if (
            self.request.GET.get("format") == "csv"
            or self.request.content_type == "text/csv"
        ):
            if self.request.GET.get("pretty") == "true":
                return self.render_to_csv_response(
                    context, resources_pretty.PlacesResource(), "Places.csv"
                )
            else:
                return self.render_to_csv_response(
                    context, resources.PlacesResource(), "Places.csv"
                )

        # Look for a 'format=json' GET argument
        if (
            self.request.GET.get("format") == "json"
            or self.request.content_type == "application/json"
        ):
            return self.render_to_json_response(context)

        # Look for a 'format=xlsx' GET argument
        if (
            self.request.GET.get("format") == "xlsx"
            or self.request.content_type
            == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        ):

            if self.request.GET.get("pretty") == "true":
                return self.render_to_xlsx_response(
                    context, resources_pretty.PlacesResource(), "Places.xlsx"
                )
            else:
                return self.render_to_xlsx_response(
                    context, resources.PlacesResource(), "Places.xlsx"
                )

        # return html
        return super().render_to_response(context)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["table_name"] = models.Places._meta.verbose_name
        context["table_description"] = models.Places.table_description
        context["table_id"] = models.Places.table_id
        return context


class TransfersDetailView(
    CSVResponseMixin, JSONResponseMixin, XLSXResponseMixin, DetailView
):
    model = models.Transfers

    def render_to_response(self, context):
        # Look for a 'format=csv' GET argument
        if (
            self.request.GET.get("format") == "csv"
            or self.request.content_type == "text/csv"
        ):
            return self.render_to_csv_response(
                context, resources.TransfersResource(), "Transfers.csv"
            )

        # Look for a 'format=json' GET argument
        if (
            self.request.GET.get("format") == "json"
            or self.request.content_type == "application/json"
        ):
            return self.render_to_json_response(context)

        # Look for a 'format=xlsx' GET argument
        if (
            self.request.GET.get("format") == "xlsx"
            or self.request.content_type
            == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        ):
            return self.render_to_xlsx_response(
                context, resources.TransfersResource(), "Transfers.xlsx"
            )

        # return html
        return super().render_to_response(context)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["models"] = models.Transfers.objects.all()

        return context


class TransfersListView(
    CSVResponseMixin, JSONResponseMixin, XLSXResponseMixin, ListView
):
    model = models.Transfers

    def head(self, *args, **kwargs):
        last_modified = self.get_queryset().latest("date_modified")
        response = HttpResponse(
            # RFC 1123 date format.
            headers={
                "Last-Modified": last_modified.date_modified.strftime(
                    "%a, %d %b %Y %H:%M:%S GMT"
                )
            },
        )
        return response

    def render_to_response(self, context):
        # Look for a 'format=csv' GET argument
        if (
            self.request.GET.get("format") == "csv"
            or self.request.content_type == "text/csv"
        ):
            if self.request.GET.get("pretty") == "true":
                return self.render_to_csv_response(
                    context, resources_pretty.TransfersResource(), "Transfers.csv"
                )
            else:
                return self.render_to_csv_response(
                    context, resources.TransfersResource(), "Transfers.csv"
                )

        # Look for a 'format=json' GET argument
        if (
            self.request.GET.get("format") == "json"
            or self.request.content_type == "application/json"
        ):
            return self.render_to_json_response(context)

        # Look for a 'format=xlsx' GET argument
        if (
            self.request.GET.get("format") == "xlsx"
            or self.request.content_type
            == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        ):

            if self.request.GET.get("pretty") == "true":
                return self.render_to_xlsx_response(
                    context, resources_pretty.TransfersResource(), "Transfers.xlsx"
                )
            else:
                return self.render_to_xlsx_response(
                    context, resources.TransfersResource(), "Transfers.xlsx"
                )

        # return html
        return super().render_to_response(context)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["table_name"] = models.Transfers._meta.verbose_name
        context["table_description"] = models.Transfers.table_description
        context["table_id"] = models.Transfers.table_id
        return context


class UnitsDetailView(
    CSVResponseMixin, JSONResponseMixin, XLSXResponseMixin, DetailView
):
    model = models.Units

    def render_to_response(self, context):
        # Look for a 'format=csv' GET argument
        if (
            self.request.GET.get("format") == "csv"
            or self.request.content_type == "text/csv"
        ):
            return self.render_to_csv_response(
                context, resources.UnitsResource(), "Units.csv"
            )

        # Look for a 'format=json' GET argument
        if (
            self.request.GET.get("format") == "json"
            or self.request.content_type == "application/json"
        ):
            return self.render_to_json_response(context)

        # Look for a 'format=xlsx' GET argument
        if (
            self.request.GET.get("format") == "xlsx"
            or self.request.content_type
            == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        ):
            return self.render_to_xlsx_response(
                context, resources.UnitsResource(), "Units.xlsx"
            )

        # return html
        return super().render_to_response(context)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["models"] = models.Units.objects.all()

        return context


class UnitsListView(
    CSVResponseMixin, JSONResponseMixin, XLSXResponseMixin, ListView
):
    model = models.Units

    def head(self, *args, **kwargs):
        last_modified = self.get_queryset().latest("date_modified")
        response = HttpResponse(
            # RFC 1123 date format.
            headers={
                "Last-Modified": last_modified.date_modified.strftime(
                    "%a, %d %b %Y %H:%M:%S GMT"
                )
            },
        )
        return response

    def render_to_response(self, context):
        # Look for a 'format=csv' GET argument
        if (
            self.request.GET.get("format") == "csv"
            or self.request.content_type == "text/csv"
        ):
            if self.request.GET.get("pretty") == "true":
                return self.render_to_csv_response(
                    context, resources_pretty.UnitsResource(), "Units.csv"
                )
            else:
                return self.render_to_csv_response(
                    context, resources.UnitsResource(), "Units.csv"
                )

        # Look for a 'format=json' GET argument
        if (
            self.request.GET.get("format") == "json"
            or self.request.content_type == "application/json"
        ):
            return self.render_to_json_response(context)

        # Look for a 'format=xlsx' GET argument
        if (
            self.request.GET.get("format") == "xlsx"
            or self.request.content_type
            == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        ):

            if self.request.GET.get("pretty") == "true":
                return self.render_to_xlsx_response(
                    context, resources_pretty.UnitsResource(), "Units.xlsx"
                )
            else:
                return self.render_to_xlsx_response(
                    context, resources.UnitsResource(), "Units.xlsx"
                )

        # return html
        return super().render_to_response(context)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["table_name"] = models.Units._meta.verbose_name
        context["table_description"] = models.Units.table_description
        context["table_id"] = models.Units.table_id
        return context


class index(View):
    def get(self, request):
        # Look for a 'format=json' GET argument
        if (
            self.request.GET.get("format") == "json"
            or self.request.content_type == "application/json"
        ):
            return self.render_to_json_response()

        # Look for a 'format=xlsx' GET argument
        if (
            self.request.GET.get("format") == "xlsx"
            or self.request.content_type
            == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        ):
            return self.render_to_xlsx_response(self.request.GET.get("pretty"))

        # return html
        return render(request, "mip_dr_app_api/index.html", {})

    def render_to_json_response(self):
        data = {}
        for table, name in [
            (models.RequestVarGroup, "RequestVarGroup"),
            (models.RequestItem, "RequestItem"),
            (models.Exptgroup, "Exptgroup"),
            (models.Miptable, "Miptable"),
            (models.CMORvar, "CMORvar"),
            (models.Objective, "Objective"),
            (models.SpatialShape, "SpatialShape"),
            (models.RequestLink, "RequestLink"),
            (models.TableSection, "TableSection"),
            (models.ModelConfig, "ModelConfig"),
            (models.VarChoiceLinkC, "VarChoiceLinkC"),
            (models.ObjectiveLink, "ObjectiveLink"),
            (models.Remarks, "Remarks"),
            (models.Experiment, "Experiment"),
            (models.RequestVar, "RequestVar"),
            (models.Standardname, "Standardname"),
            (models.VarChoiceLinkR, "VarChoiceLinkR"),
            (models.Var, "Var"),
            (models.Mip, "Mip"),
            (models.VarChoice, "VarChoice"),
            (models.TemporalShape, "TemporalShape"),
            (models.Structure, "Structure"),
            (models.Grids, "Grids"),
            (models.TimeSlice, "TimeSlice"),
            (models.CellMethods, "CellMethods"),
            (models.Qcranges, "Qcranges"),
            (models.Places, "Places"),
            (models.Transfers, "Transfers"),
            (models.Units, "Units"),
        ]:
            data[name] = list(table.objects.all().values())
        return JsonResponse(
            data,
            safe=False,
        )

    def render_to_xlsx_response(self, pretty="false"):
        """
        Returns a XLSX response, transforming "resource" to make the payload.

        """
        sheets = []

        for table, name in [
            (models.RequestVarGroup, "RequestVarGroup"),
            (models.RequestItem, "RequestItem"),
            (models.Exptgroup, "Exptgroup"),
            (models.Miptable, "Miptable"),
            (models.CMORvar, "CMORvar"),
            (models.Objective, "Objective"),
            (models.SpatialShape, "SpatialShape"),
            (models.RequestLink, "RequestLink"),
            (models.TableSection, "TableSection"),
            (models.ModelConfig, "ModelConfig"),
            (models.VarChoiceLinkC, "VarChoiceLinkC"),
            (models.ObjectiveLink, "ObjectiveLink"),
            (models.Remarks, "Remarks"),
            (models.Experiment, "Experiment"),
            (models.RequestVar, "RequestVar"),
            (models.Standardname, "Standardname"),
            (models.VarChoiceLinkR, "VarChoiceLinkR"),
            (models.Var, "Var"),
            (models.Mip, "Mip"),
            (models.VarChoice, "VarChoice"),
            (models.TemporalShape, "TemporalShape"),
            (models.Structure, "Structure"),
            (models.Grids, "Grids"),
            (models.TimeSlice, "TimeSlice"),
            (models.CellMethods, "CellMethods"),
            (models.Qcranges, "Qcranges"),
            (models.Places, "Places"),
            (models.Transfers, "Transfers"),
            (models.Units, "Units"),
        ]:
            if pretty.lower() == "true":
                dataset = resources_pretty.get_resource(name).export(table.objects.all())
            else:
                dataset = resources.get_resource(name).export(table.objects.all())
            dataset.title = name
            sheets.append(dataset)

        dataset = tablib.Databook(sheets)

        response = HttpResponse(
            dataset.xlsx,
            content_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        )
        response["Content-Disposition"] = f'attachment; filename="mip_dr.xlsx"'
        return response


class notes(TemplateView):
    template_name = "mip_dr_app_api/notes.html"
