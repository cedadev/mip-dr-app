"""""
This script generates admin.py, models.py and resource.py

"""
import socket
from urllib import error, request

import xml.etree.ElementTree as ET


HTTP_TIME_OUT = 300
DREQ_XML = (
    "https://raw.githubusercontent.com/cmip6dr/data_request_snapshots/"
    "main/Release/dreqPy/docs/dreq2Defn.xml"
)
DREQ_SUPP_XML = (
    "https://raw.githubusercontent.com/cmip6dr/data_request_snapshots/"
    "main/Release/dreqPy/docs/dreqSuppDefn.xml"
)
MODELS_FILE = "../mip_dr_app_vocab/models.py"
ADMIN_FILE = "../mip_dr_app_vocab/admin.py"
RESOURCES_FILE = "../mip_dr_app_vocab/resources.py"
RESOURCES_PRETTY_FILE = "../mip_dr_app_vocab/resources_pretty.py"

MANY_TO_MANY = ["cids", "dids", "dimids"]


def _read_url(url_):
    """
    Pull info from a URL.

    @param url_ (str): the URL to call to get data.

    @return a str containing the data

    """
    socket.setdefaulttimeout(HTTP_TIME_OUT)
    opener = request.build_opener()

    req = request.Request(url_)

    response = None
    try:
        response = opener.open(req)
    except (error.HTTPError, socket.timeout) as ex:
        print(
            f"ERROR retrieved data from {url_}\n\t{ex}",
        )
        return None
    finally:
        try:
            opener.close()
        # pylint: disable=bare-except
        except:
            pass

    return response.read()


def _write_models_py_file_header(python_file):
    python_file.write('"""\n')
    python_file.write(
        "This model.py file was generated by the script generate_models_from_xml.py\n\n"
    )
    python_file.write('"""\n')
    python_file.write("from django.db import models\nimport uuid\n")


def _process_xml(python_file, xml_string, filter_, ignore):
    """
    Extract a list of file names from the xml string.

    @param xml_string(str): a string representation of the xml

    @return a list of model names

    """
    models_names = []
    root = ET.fromstring((xml_string))

    for child in root:
        if child.tag == "{urn:w3id.org:cmip6.dreq.framework:a}table":
            if filter_ is not None and child.attrib["label"] not in filter_:
                continue
            if ignore is not None and child.attrib["label"] in ignore:
                continue
            else:
                _process_table(python_file, child)
                model_name = (
                    child.attrib["label"][0].upper() + child.attrib["label"][1:]
                )
                models_names.append(model_name)

    return models_names


def _write_admin_file(python_file, models_names):
    python_file.write('"""\n')
    python_file.write(
        "This admin.py file was generated by the script generate_models_from_xml.py\n\n"
    )
    python_file.write('"""\n')
    python_file.write(
        """from django.contrib import admin
from import_export.admin import ImportExportActionModelAdmin\n
from mip_dr_app_vocab import models
from mip_dr_app_vocab import resources\n"""
    )

    for table in models_names:
        python_file.write(
            f"""\n\n@admin.register(models.{table})
class {table}Admin(ImportExportActionModelAdmin):
    list_display = ('label', 'title')
    resource_classes = [resources.{table}Resource]
"""
        )


def _write_resource_file(python_file, models_names):
    python_file.write('"""\n')
    python_file.write(
        "This resource.py file was generated by the script generate_models_from_xml.py\n\n"
    )
    python_file.write('"""\n')
    python_file.write("from import_export import resources\n\n")
    python_file.write(f"from mip_dr_app_vocab import models\n")

    for table in models_names:
        python_file.write(
            f"""\n\nclass {table}Resource(resources.ModelResource):
    class Meta:
        model = models.{table}
        import_id_fields = ('uid',)
        skip_unchanged = True
        report_skipped = True
"""
        )

    python_file.write("\n\ndef get_resource(name):\n")

    for table in models_names:
        python_file.write(
            f"""    if name == "{table}":
        return {table}Resource()
"""
        )


def _write_resource_pretty_file(python_file, models_names):
    python_file.write('"""\n')
    python_file.write(
        "This resource.py file was generated by the script generate_models_from_xml.py\n\n"
    )
    python_file.write('"""\n')
    python_file.write("from import_export import resources\n")
    python_file.write("from import_export.fields import Field\n")
    python_file.write(
        "from import_export.widgets import ForeignKeyWidget, ManyToManyWidget\n\n"
    )
    python_file.write("from mip_dr_app_vocab import models\n\n\n")
    python_file.write("class VerboseExportMixin:\n")
    python_file.write('    """Export with verbose name"""\n')

    python_file.write("    def get_export_headers(self):\n")
    python_file.write(
        "        vnames = {i.name: i.verbose_name for i in self.Meta.model._meta.fields}\n"
    )
    python_file.write(
        '        return [vnames.get(i.split("__")[0], i) for i in super().get_export_headers()]\n'
    )

    for table in models_names:
        python_file.write(
            f"\n\nclass {table}Resource(VerboseExportMixin, resources.ModelResource):\n"
        )

        # CMORvar
        if table == "CMORvar":
            _write_forein_key_widget(python_file, "stid", "Structure")
            _write_forein_key_widget(python_file, "vid", "Var")
            _write_forein_key_widget(python_file, "mtid", "Miptable")

        # Experiment
        if table == "Experiment":
            _write_forein_key_widget(python_file, "egid", "Exptgroup")
            _write_forein_key_widget(python_file, "mip", "Mip")

        # Places
        if table == "Places":
            _write_forein_key_widget(python_file, "mip", "Mip")
            _write_forein_key_widget(python_file, "vid", "CMORvar")

        # Objective
        if table == "Objective":
            _write_forein_key_widget(python_file, "mip", "Mip")

        # ObjectiveLink
        if table == "ObjectiveLink":
            _write_forein_key_widget(python_file, "oid", "Objective")
            _write_forein_key_widget(python_file, "rid", "RequestLink")

        # Qcranges
        if table == "Qcranges":
            _write_forein_key_widget(python_file, "vid", "CMORvar")

        # Remarks
        if table == "Remarks":
            _write_forein_key_widget(python_file, "tid", "Grids")

        # RequestItem
        if table == "RequestItem":
            _write_forein_key_widget(python_file, "mip", "Mip")
            _write_forein_key_widget(python_file, "rlid", "RequestLink")

        # RequestLink
        if table == "RequestLink":
            _write_forein_key_widget(python_file, "mip", "Mip")
            _write_forein_key_widget(python_file, "refid", "RequestVarGroup")

        # RequestVar
        if table == "RequestVar":
            _write_forein_key_widget(python_file, "vid", "CMORvar")
            _write_forein_key_widget(python_file, "vgid", "RequestVarGroup")
            _write_forein_key_widget(python_file, "mip", "Mip")

        # RequestVarGroup
        if table == "RequestVarGroup":
            _write_forein_key_widget(python_file, "mip", "Mip")

        # SpatialShape
        if table == "SpatialShape":
            _write_many_to_many_widget(python_file, "dimids", "Grids", "Grids")

        # Structure
        if table == "Structure":
            _write_forein_key_widget(python_file, "spid", "SpatialShape")
            _write_forein_key_widget(python_file, "tmid", "TemporalShape")
            _write_many_to_many_widget(python_file, "dids", "Grids Dimensions", "Grids")
            _write_many_to_many_widget(python_file, "cids", "Grid Coordinates", "Grids")
            _write_forein_key_widget(python_file, "cmid", "CellMethods")

        # TableSection
        if table == "TableSection":
            _write_forein_key_widget(python_file, "gpid", "Miptable")
            _write_forein_key_widget(python_file, "mip", "Mip")

        # TemporalShape
        if table == "TemporalShape":
            _write_forein_key_widget(python_file, "dimid", "Grids")

        # Transfers
        if table == "Transfers":
            _write_forein_key_widget(python_file, "frid", "Places")
            _write_forein_key_widget(python_file, "toid", "Places")
            _write_forein_key_widget(python_file, "mip", "Mip")
            _write_forein_key_widget(python_file, "vid", "CMORvar")

        # Var
        if table == "Var":
            _write_forein_key_widget(python_file, "provmip", "Mip")
            _write_forein_key_widget(python_file, "unid", "Units", "text")
            _write_forein_key_widget(python_file, "sn", "Units", "title")

        # VarChoiceLinkC
        if table == "VarChoiceLinkC":
            _write_forein_key_widget(python_file, "vid", "CMORvar")
            _write_forein_key_widget(python_file, "cfgid", "ModelConfig")
            _write_forein_key_widget(python_file, "cid", "VarChoice")

        # VarChoiceLinkR
        if table == "VarChoiceLinkR":
            _write_forein_key_widget(python_file, "vid", "CMORvar")
            _write_forein_key_widget(python_file, "cid", "VarChoice")

        python_file.write(
            f"""
    class Meta:
        model = models.{table}
        import_id_fields = ('uid',)
        skip_unchanged = True
        report_skipped = True
"""
        )

    python_file.write("\n\ndef get_resource(name):\n")

    for table in models_names:
        python_file.write(
            f"""    if name == "{table}":
        return {table}Resource()
"""
        )


def _write_forein_key_widget(python_file, id_, model, field="label"):
    python_file.write(
        f"""    {id_} = Field(
        column_name='{id_}',
        attribute='{id_}',
        widget=ForeignKeyWidget(model=models.{model}, field='{field}'))
"""
    )


def _write_many_to_many_widget(python_file, id_, column_name, model, field="label"):
    python_file.write(
        f"""    {id_} = Field(
        column_name='{column_name}',
        attribute='{id_}',
        widget=ManyToManyWidget(model=models.{model}, separator='|', field='{field}'))
"""
    )


def _process_table(python_file, table_xml):
    table_attrib = table_xml.attrib
    model_name = table_attrib["label"][0].upper() + table_attrib["label"][1:]
    python_file.write(f"\n\nclass {model_name}(models.Model):\n")

    # there are 2 entries for label and title for each table
    # ignore the second one
    label_found = False
    title_found = False
    for table_row in table_xml:
        if table_row.attrib["label"] == "label":
            if label_found:
                continue
            label_found = True
        if table_row.attrib["label"] == "title":
            if title_found:
                continue
            title_found = True
        _process_row(python_file, model_name, table_row)

    python_file.write(
        f"""    date_modified = models.DateTimeField(auto_now=True)
    date_published = models.DateTimeField(auto_now_add=True)

    class Meta:
        verbose_name = "{table_attrib["title"].strip()}"
        verbose_name_plural = "{table_attrib["title"].strip()}"

    table_description = "{table_attrib["description"].strip()}"
    table_uid = "{table_attrib["uid"]}"
    table_id = "{table_attrib["id"]}"
    table_itemLabelMode = "{table_attrib["itemLabelMode"]}"
    table_level = "{table_attrib["level"]}"
    table_maxOccurs = "{table_attrib["maxOccurs"]}"
    table_labUnique = "{table_attrib["labUnique"]}"

    def __str__(self):
        return self.label
"""
    )


def _process_row(python_file, model_name, table_row):
    row_attrib = table_row.attrib
    row_name = row_attrib["label"]
    if row_name == "class":
        # cannot use reserved word "class" as the name of a row
        row_name = "class_name"

    row_type = _get_type(
        model_name, row_attrib["type"], row_attrib["label"], row_attrib["title"].strip()
    )
    help_text = _get_help_text(row_attrib["description"].strip())
    if row_attrib["label"] in MANY_TO_MANY:
        blank = ""
    else:
        blank = _get_blank(row_attrib["required"])
    python_file.write(
        f"""    {row_name} = {row_type}{help_text}{blank}
    )\n"""
    )


def _get_type(model_name, xml_type, name, verbose_name):
    verbose_name = f'"{verbose_name}"'

    # UIDs
    if name == "uid":
        if model_name == "Standardname":
            return f"""models.CharField(
        {verbose_name},
        max_length=100,
        primary_key=True,
        editable=False"""
        else:
            return f"""models.UUIDField(
        {verbose_name},
        primary_key=True,
        default=uuid.uuid4,
        editable=False"""

    # ForeignKeys
    fk_template = """models.ForeignKey(
        {linked_table},
        verbose_name={verbose_name},
        on_delete=models.CASCADE"""

    if name == "cfgid":
        return fk_template.format(linked_table="ModelConfig", verbose_name=verbose_name)

    if name == "cid":
        return fk_template.format(linked_table="VarChoice", verbose_name=verbose_name)

    if name == "cmid":
        return fk_template.format(linked_table="CellMethods", verbose_name=verbose_name)

    if name in ["dimid", "tid", "gid"]:
        return fk_template.format(linked_table="Grids", verbose_name=verbose_name)

    if name == "egid":
        return fk_template.format(linked_table="Exptgroup", verbose_name=verbose_name)

    # TODO esid can be a link to an experiment, an experiment group or a MIP
    # if name == "esid":
    # return fk_template.format(linked_table="Experiment", verbose_name=verbose_name)

    if name == "frid":
        return (
            fk_template.format(linked_table="Places", verbose_name=verbose_name)
            + ',\n        related_name="source_identifier"'
        )

    if name == "gpid":
        return fk_template.format(linked_table="Miptable", verbose_name=verbose_name)

    if name in ["mip"]:
        return fk_template.format(linked_table="Mip", verbose_name=verbose_name)

    if name in ["mtid"]:
        return fk_template.format(linked_table="Miptable", verbose_name=verbose_name)

    if name in ["provmip"]:
        return fk_template.format(linked_table="Mip", verbose_name=verbose_name)

    if name == "oid":
        return fk_template.format(linked_table="Objective", verbose_name=verbose_name)

    if name == "refid" or name == "vgid":
        return fk_template.format(
            linked_table="RequestVarGroup", verbose_name=verbose_name
        )

    if name == "rid" or name == "rlid":
        return fk_template.format(linked_table="RequestLink", verbose_name=verbose_name)

    if name == "sn":
        return fk_template.format(
            linked_table="Standardname", verbose_name=verbose_name
        )

    if name == "spid":
        return fk_template.format(
            linked_table="SpatialShape", verbose_name=verbose_name
        )

    if name == "stid":
        return fk_template.format(linked_table="Structure", verbose_name=verbose_name)

    if name == "tmid":
        return fk_template.format(
            linked_table="TemporalShape", verbose_name=verbose_name
        )

    if name == "toid":
        return (
            fk_template.format(linked_table="Places", verbose_name=verbose_name)
            + ',\n        related_name="target_identifier"'
        )

    if name == "unid":
        return fk_template.format(linked_table="Units", verbose_name=verbose_name)

    if name == "vid" and model_name == "CMORvar":
        return fk_template.format(linked_table="Var", verbose_name=verbose_name)

    if name == "vid":
        return fk_template.format(linked_table="CMORvar", verbose_name=verbose_name)

    # many to many
    many_template = """models.ManyToManyField(
        Grids,
        related_name={related_name}"""

    if name == "dimids":
        return many_template.format(related_name='"grids"')

    if name == "cids":
        return many_template.format(related_name='"grid_coordinates"')

    if name == "dids":
        return many_template.format(related_name='"grids_dimensions"')

    # other
    if name == "url":
        return f"""models.URLField(
        {verbose_name}"""

    if xml_type == "xs:boolean":
        return f"""models.BooleanField(
        {verbose_name}"""

    if xml_type == "xs:float":
        return f"""models.FloatField(
        {verbose_name}"""

    if xml_type == "xs:integer":
        return f"""models.IntegerField(
        {verbose_name}"""

    if xml_type == "xs:string":
        return f"""models.CharField(
        {verbose_name},
        max_length=50"""

    types = [
        "aa:st__uid",
        "aa:st__fortranType",
        "aa:st__stringList",
        "aa:st__configurationType",
        "aa:st__integerList",
        "aa:st__integerListMonInc",
        "aa:st__floatList",
        "aa:st__sliceType",
    ]
    if xml_type not in types:
        print(f"ERROR unknown xml type: {xml_type}")
    return f"""models.CharField(
        {verbose_name},
        max_length=50"""


def _get_help_text(xml_description):
    if xml_description is not None and xml_description != "":
        return f',\n        help_text="{xml_description}"'
    return ""


def _get_blank(required):
    if required.lower() == "true":
        return """,
        blank=False,
        null=False,"""
    return """,
        blank=True,
        null=True,"""


def main():

    with open(MODELS_FILE, "w") as python_file:
        _write_models_py_file_header(python_file)

        models_names = []

        supp_xml_string = _read_url(DREQ_SUPP_XML)
        models_names.extend(_process_xml(python_file, supp_xml_string, "units", None))

        xml_string = _read_url(DREQ_XML)
        models_names.extend(
            _process_xml(python_file, xml_string, ["mip", "miptable"], None)
        )
        models_names.extend(
            _process_xml(python_file, xml_string, ["requestVarGroup"], None)
        )
        models_names.extend(_process_xml(python_file, xml_string, ["exptgroup"], None))
        models_names.extend(
            _process_xml(
                python_file, xml_string, ["requestLink", "experiment", "grids"], None
            )
        )
        models_names.extend(
            _process_xml(
                python_file,
                xml_string,
                None,
                [
                    "exptgroup",
                    "mip",
                    "miptable",
                    "requestLink",
                    "experiment",
                    "grids",
                    "requestVarGroup",
                    "CMORvar",
                    "varChoiceLinkC",
                    "requestVar",
                    "varChoiceLinkR",
                    "structure",
                    "tableSection",
                ],
            )
        )
        models_names.extend(_process_xml(python_file, xml_string, ["structure"], None))
        models_names.extend(_process_xml(python_file, xml_string, ["CMORvar"], None))
        models_names.extend(
            _process_xml(
                python_file,
                xml_string,
                ["varChoiceLinkC", "requestVar", "varChoiceLinkR"],
                None,
            )
        )
        models_names.extend(
            _process_xml(python_file, xml_string, ["tableSection"], None)
        )

        models_names.extend(_process_xml(python_file, supp_xml_string, None, "units"))

    with open(RESOURCES_FILE, "w") as python_file:
        _write_resource_file(python_file, models_names)

    with open(RESOURCES_PRETTY_FILE, "w") as python_file:
        _write_resource_pretty_file(python_file, models_names)

    with open(ADMIN_FILE, "w") as python_file:
        _write_admin_file(python_file, models_names)


if __name__ == "__main__":
    main()
