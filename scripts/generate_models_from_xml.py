"""""
This script generates admin.py and models.py

"""
import socket
from urllib import error, request

import xml.etree.ElementTree as ET


HTTP_TIME_OUT = 300
DREQ_XML = (
    "https://raw.githubusercontent.com/cmip6dr/data_request_snapshots/"
    "main/Release/dreqPy/docs/dreq2Defn.xml"
)
DREQ_SUPP_XML = (
    "https://raw.githubusercontent.com/cmip6dr/data_request_snapshots/"
    "main/Release/dreqPy/docs/dreqSuppDefn.xml"
)
MODELS_FILE = "../mip_dr_app_api/models.py"
ADMIN_FILE = "../mip_dr_app_api/admin.py"
RESOURCES_FILE = "../mip_dr_app_api/resources.py"


def _read_url(url_):
    """
    Pull info from a URL.

    @param url_ (str): the URL to call to get data.

    @return a str containing the data

    """
    socket.setdefaulttimeout(HTTP_TIME_OUT)
    opener = request.build_opener()

    req = request.Request(url_)

    response = None
    try:
        response = opener.open(req)
    except (error.HTTPError, socket.timeout) as ex:
        print(
            f"ERROR retrieved data from {url_}\n\t{ex}",
        )
        return None
    finally:
        try:
            opener.close()
        # pylint: disable=bare-except
        except:
            pass

    return response.read()


def _write_models_py_file_header(python_file):
    python_file.write('"""\n')
    python_file.write(
        "This model.py file was generated by the script generate_models_from_xml.py\n\n"
    )
    python_file.write('"""\n')
    python_file.write("from django.db import models\nimport uuid\n")


def _process_xml(python_file, xml_string, filter_, ignore):
    """
    Extract a list of file names from the xml string.

    @param xml_string(str): a string representation of the xml

    @return a list of model names

    """
    models_names = []
    root = ET.fromstring((xml_string))

    for child in root:
        if child.tag == "{urn:w3id.org:cmip6.dreq.framework:a}table":
            if filter_ is not None and child.attrib["label"] not in filter_:
                continue
            if ignore is not None and child.attrib["label"] in ignore:
                continue
            else:
                _process_table(python_file, child)
                model_name = (
                    child.attrib["label"][0].upper() + child.attrib["label"][1:]
                )
                models_names.append(model_name)

    return models_names


def _write_admin_file(python_file, models_names):
    python_file.write('"""\n')
    python_file.write(
        "This admin.py file was generated by the script generate_models_from_xml.py\n\n"
    )
    python_file.write('"""\n')
    python_file.write(
        """from django.contrib import admin
from import_export.admin import ImportExportActionModelAdmin\n
from mip_dr_app_api import models
from mip_dr_app_api import resources\n"""
    )

    for table in models_names:
        python_file.write(
            f"""\n\n@admin.register(models.{table})
class {table}Admin(ImportExportActionModelAdmin):
    list_display = ('label', 'title')
    resource_classes = [resources.{table}Resource]
"""
        )


def _write_resource_file(python_file, models_names):
    python_file.write('"""\n')
    python_file.write(
        "This resource.py file was generated by the script generate_models_from_xml.py\n\n"
    )
    python_file.write('"""\n')
    python_file.write("from import_export import resources\n\n")
    python_file.write(f"from mip_dr_app_api import models\n")

    for table in models_names:
        python_file.write(
            f"""\n\nclass {table}Resource(resources.ModelResource):
    class Meta:
        model = models.{table}
        import_id_fields = ('uid',)
        skip_unchanged = True
        report_skipped = True
"""
        )


def _process_table(python_file, table_xml):
    table_attrib = table_xml.attrib
    model_name = table_attrib["label"][0].upper() + table_attrib["label"][1:]
    python_file.write(f"\n\nclass {model_name}(models.Model):\n")

    # there are 2 entries for label and title for each table
    # ignore the second one
    label_found = False
    title_found = False
    for table_row in table_xml:
        if table_row.attrib["label"] == "label":
            if label_found:
                continue
            label_found = True
        if table_row.attrib["label"] == "title":
            if title_found:
                continue
            title_found = True
        _process_row(python_file, model_name, table_row)

    python_file.write(
        f"""
    class Meta:
        verbose_name = "{table_attrib["title"].strip()}"
        verbose_name_plural = "{table_attrib["title"].strip()}"

    table_description = "{table_attrib["description"].strip()}"
    table_uid = "{table_attrib["uid"]}"
    table_id = "{table_attrib["id"]}"
    table_itemLabelMode = "{table_attrib["itemLabelMode"]}"
    table_level = "{table_attrib["level"]}"
    table_maxOccurs = "{table_attrib["maxOccurs"]}"
    table_labUnique = "{table_attrib["labUnique"]}"
"""
    )


def _process_row(python_file, model_name, table_row):
    row_attrib = table_row.attrib
    row_name = row_attrib["label"]
    if row_name == "class":
        # cannot use reserved word "class" as the name of a row
        row_name = "class_name"

    row_type = _get_type(
        model_name, row_attrib["type"], row_attrib["label"], row_attrib["title"].strip()
    )
    help_text = _get_help_text(row_attrib["description"].strip())
    blank = _get_blank(row_attrib["required"])
    python_file.write(f"    {row_name} = {row_type}{help_text}{blank})\n")


def _get_type(model_name, xml_type, name, verbose_name):
    verbose_name = f'"{verbose_name}"'

    # UIDs
    if name == "uid":
        return (
            f"models.UUIDField({verbose_name}, primary_key=True, "
            "default=uuid.uuid4, editable=False"
        )

    # ForeignKeys
    fk_template = (
        "models.ForeignKey({linked_table}, verbose_name={verbose_name}, "
        "on_delete=models.CASCADE"
    )

    if name == "cmid":
        return fk_template.format(linked_table="CellMethods", verbose_name=verbose_name)

    if name == "egid":
        return fk_template.format(linked_table="Exptgroup", verbose_name=verbose_name)

    # TODO esid can be a link to an experiment, an experiment group or a MIP
    # if name == "esid":
    # return fk_template.format(linked_table="Experiment", verbose_name=verbose_name)

    if name == "gpid":
        return fk_template.format(linked_table="Miptable", verbose_name=verbose_name)

    if name in ["mip"]:
        return fk_template.format(linked_table="Mip", verbose_name=verbose_name)

    if name in ["mtid"]:
        return fk_template.format(linked_table="Miptable", verbose_name=verbose_name)

    if name in ["provmip"]:
        return fk_template.format(linked_table="Mip", verbose_name=verbose_name)

    if name == "oid":
        return fk_template.format(linked_table="Objective", verbose_name=verbose_name)

    if name == "refid" or name == "vgid":
        return fk_template.format(
            linked_table="RequestVarGroup", verbose_name=verbose_name
        )

    if name == "rid" or name == "rlid":
        return fk_template.format(linked_table="RequestLink", verbose_name=verbose_name)

    if name == "sn":
        return fk_template.format(
            linked_table="Standardname", verbose_name=verbose_name
        )

    if name == "spid":
        return fk_template.format(
            linked_table="SpatialShape", verbose_name=verbose_name
        )

    if name == "stid":
        return fk_template.format(linked_table="Structure", verbose_name=verbose_name)

    if name == "tmid":
        return fk_template.format(
            linked_table="TemporalShape", verbose_name=verbose_name
        )

    if name == "unid":
        return fk_template.format(linked_table="Units", verbose_name=verbose_name)

    if name == "vid" and model_name == "CMORvar":
        return fk_template.format(linked_table="Var", verbose_name=verbose_name)

    if name == "vid":
        return fk_template.format(linked_table="CMORvar", verbose_name=verbose_name)

    # other
    if name == "url":
        return f"models.URLField({verbose_name}"

    if xml_type == "xs:boolean":
        return f"models.BooleanField({verbose_name}"

    if xml_type == "xs:float":
        return f"models.FloatField({verbose_name}"

    if xml_type == "xs:integer":
        return f"models.IntegerField({verbose_name}"

    if xml_type == "xs:string":
        return f"models.CharField({verbose_name}, max_length=50"

    types = [
        "aa:st__uid",
        "aa:st__fortranType",
        "aa:st__stringList",
        "aa:st__configurationType",
        "aa:st__integerList",
        "aa:st__integerListMonInc",
        "aa:st__floatList",
        "aa:st__sliceType",
    ]
    if xml_type not in types:
        print(f"ERROR unknown xml type: {xml_type}")
    return f"models.CharField({verbose_name}, max_length=50"


def _get_help_text(xml_description):
    if xml_description is not None and xml_description != "":
        return f', help_text="{xml_description}"'
    return ""


def _get_blank(required):
    if required.lower() == "true":
        return ", blank=False, null=False"
    return ", blank=True, null=True"


def main():

    with open(MODELS_FILE, "w") as python_file:
        _write_models_py_file_header(python_file)

        models_names = []

        supp_xml_string = _read_url(DREQ_SUPP_XML)
        models_names.extend(_process_xml(python_file, supp_xml_string, "units", None))

        xml_string = _read_url(DREQ_XML)
        models_names.extend(
            _process_xml(python_file, xml_string, ["mip", "miptable"], None)
        )
        models_names.extend(
            _process_xml(python_file, xml_string, ["requestVarGroup"], None)
        )
        models_names.extend(_process_xml(python_file, xml_string, ["exptgroup"], None))
        models_names.extend(
            _process_xml(python_file, xml_string, ["requestLink", "experiment"], None)
        )
        models_names.extend(
            _process_xml(
                python_file,
                xml_string,
                None,
                [
                    "exptgroup",
                    "mip",
                    "miptable",
                    "requestLink",
                    "experiment",
                    "requestVarGroup",
                    "CMORvar",
                    "varChoiceLinkC",
                    "requestVar",
                    "varChoiceLinkR",
                    "structure",
                    "tableSection",
                ],
            )
        )
        models_names.extend(_process_xml(python_file, xml_string, ["structure"], None))
        models_names.extend(_process_xml(python_file, xml_string, ["CMORvar"], None))
        models_names.extend(
            _process_xml(
                python_file,
                xml_string,
                ["varChoiceLinkC", "requestVar", "varChoiceLinkR"],
                None,
            )
        )
        models_names.extend(
            _process_xml(python_file, xml_string, ["tableSection"], None)
        )

        models_names.extend(_process_xml(python_file, supp_xml_string, None, "units"))

    with open(RESOURCES_FILE, "w") as python_file:
        _write_resource_file(python_file, models_names)

    with open(ADMIN_FILE, "w") as python_file:
        _write_admin_file(python_file, models_names)


if __name__ == "__main__":
    main()
