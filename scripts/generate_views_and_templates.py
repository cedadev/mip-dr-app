"""""
This script generates veiws.py, urls.py and the template files

"""
import re
import socket
from urllib import error, request
import xml.etree.ElementTree as ET

HTTP_TIME_OUT = 300
DREQ_DEF_XML = (
    "https://raw.githubusercontent.com/cmip6dr/data_request_snapshots/"
    "main/Release/dreqPy/docs/dreq2Defn.xml"
)
DREQ_SUPP_DEF_XML = (
    "https://raw.githubusercontent.com/cmip6dr/data_request_snapshots/"
    "main/Release/dreqPy/docs/dreqSuppDefn.xml"
)
VIEWS_FILE = "../mip_dr_app_api/views.py"
URLS_FILE = "../mip_dr_app_api/urls.py"
INDEX_FILE = "../templates/mip_dr_app_api/index.html"
SIDE_BAR_FILE = "../templates/mip_dr_app_api/sidebar.html"

MANY_TO_MANY = ["cids", "dids", "dimids"]


def _atoi(text):
    return int(text) if text.isdigit() else text


def _natural_keys(text):
    """
    alist.sort(key=natural_keys) sorts in human order
    """
    return [_atoi(c) for c in re.split(r"(\d+)", text)]


def _read_url(url_):
    """
    Pull info from a URL.

    @param url_ (str): the URL to call to get data.

    @return a str containing the data

    """
    socket.setdefaulttimeout(HTTP_TIME_OUT)
    opener = request.build_opener()

    req = request.Request(url_)

    response = None
    try:
        response = opener.open(req)
    except (error.HTTPError, socket.timeout) as ex:
        print(f"ERROR retrieved data from {url_}")
        print(f"{ex}")
        return None
    finally:
        try:
            opener.close()
        # pylint: disable=bare-except
        except:
            pass

    return response.read()


def _write_views_py_file_header(python_file):
    python_file.write(
        '"""\nThis file was generated by the script generate_views_and_templates.py\n\n"""'
    )
    python_file.write(
        """
from django.http import HttpResponse
from django.http import JsonResponse
from django.shortcuts import render
from django.views.generic import TemplateView
from django.views.generic.base import View
from django.views.generic.detail import DetailView
from django.views.generic.list import ListView
import tablib

from mip_dr_app_api import models
from mip_dr_app_api import resources
from mip_dr_app_api import resources_pretty


class ResponseMixin:
    def get_data(self, context):"""
    )
    python_file.write(
        '\n        """\n        Returns an object that can be serialized.\n\n        '
        '"""'
    )
    python_file.write(
        """
        try:
            return context["object_list"]
        except KeyError:
            pass

        return context["models"].filter(uid=context["object"].uid)


class CSVResponseMixin(ResponseMixin):"""
    )
    python_file.write(
        '\n    """\n    A mixin that can be used to render a CSV response.\n\n    """\n'
    )
    python_file.write(
        """
    def render_to_csv_response(self, context, resource, filename):"""
    )
    python_file.write(
        '\n        """\n        Returns a CSV response, transforming "context" to make '
        'the payload.\n\n        """'
    )
    python_file.write(
        """
        dataset = resource.export(self.get_data(context))
        response = HttpResponse(
            dataset.csv,
            content_type="text/csv",
        )
        response["Content-Disposition"] = f'attachment; filename="{filename}"'
        return response


class JSONResponseMixin:"""
    )
    python_file.write(
        '\n    """\n    A mixin that can be used to render a JSON response.\n\n    '
        '"""\n'
    )
    python_file.write(
        """
    def render_to_json_response(self, context):"""
    )
    python_file.write(
        '\n        """\n        Returns a JSON response, transforming "context" to '
        'make the payload.\n\n        """'
    )
    python_file.write(
        """
        return JsonResponse(
            self.get_j_data(context),
            safe=False,
        )

    def get_j_data(self, context):"""
    )
    python_file.write(
        '\n        """\n        Returns an object that will be serialized as JSON by '
        'json.dumps().\n\n        """'
    )
    python_file.write(
        """
        try:
            return list(context["object_list"].values())
        except KeyError:
            pass

        data = context["object"].__dict__
        for key in ["_state", "_foreign_key_cache"]:
            try:
                del data[key]
            except KeyError:
                pass

        return data


class XLSXResponseMixin(ResponseMixin):"""
    )
    python_file.write(
        '\n    """\n    A mixin that can be used to render a XLSX response.\n\n    '
        '"""\n'
    )
    python_file.write(
        """
    def render_to_xlsx_response(self, context, resource, filename):"""
    )
    python_file.write(
        '\n        """\n        Returns a XLSX response, transforming "resource" to '
        'make the payload.\n\n        """'
    )
    python_file.write(
        """
        dataset = resource.export(self.get_data(context))
        dataset.title = filename.split(".")[0]
        response = HttpResponse(
            dataset.xlsx,
            content_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        )
        response["Content-Disposition"] = f'attachment; filename="{filename}"'
        return response
"""
    )


def _write_url_py_file_header(python_file):
    python_file.write(
        '"""\nThis file was generated by the script generate_views_and_templates.py'
        '\n\n"""'
    )
    python_file.write(
        """
from django.urls import path

from mip_dr_app_api import views as mip_dr_app_api_views


urlpatterns = [
    path("", mip_dr_app_api_views.index.as_view(), name="index"),
    path("notes", mip_dr_app_api_views.notes.as_view(), name="notes"),"""
    )


def _write_url_py_file_footer(python_file):
    python_file.write("\n]\n")


def _get_index(xml):
    """
    Process the xml string, loop through the tables.

    @param xml: the xml

    @return data for the index.html file

    """
    xml_string = _read_url(xml)
    root = ET.fromstring((xml_string))
    index_html = {}
    sidebar_html = {}

    for child in root:
        if child.tag == "{urn:w3id.org:cmip6.dreq.framework:a}table":
            _get_sidebar_html_line(sidebar_html, child)
            _get_index_html_file_line(index_html, child)

    return index_html, sidebar_html


def _process_xml(python_views_file, python_urls_file, xml):
    """
    Process the xml string, loop through the tables.

    @param xml: the xml

    """
    xml_string = _read_url(xml)
    root = ET.fromstring((xml_string))
    table_names = []

    for child in root:
        if child.tag == "{urn:w3id.org:cmip6.dreq.framework:a}table":
            model_name = child.attrib["label"][0].upper() + child.attrib["label"][1:]
            table_names.append(model_name)
            _write_view_py_file(python_views_file, model_name)
            _write_url_py_file(python_urls_file, child.attrib["label"], model_name)
            _write_template_list_file(child)
            _write_template_detail_file(child)

    return table_names


def _write_view_py_file_index(python_file, table_names):
    python_file.write(
        """
\nclass index(View):
    def get(self, request):
        # Look for a 'format=json' GET argument
        if (
            self.request.GET.get("format") == "json"
            or self.request.content_type == "application/json"
        ):
            return self.render_to_json_response()

        # Look for a 'format=xlsx' GET argument
        if (
            self.request.GET.get("format") == "xlsx"
            or self.request.content_type
            == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        ):
            return self.render_to_xlsx_response(self.request.GET.get("pretty"))

        # return html
        return render(request, "mip_dr_app_api/index.html", {})

    def render_to_json_response(self):
        data = {}
        for table, name in ["""
    )
    for model in table_names:
        python_file.write(
            f"""
            (models.{model}, "{model}"),"""
        )
    python_file.write(
        """
        ]:
            data[name] = list(table.objects.all().values())
        return JsonResponse(
            data,
            safe=False,
        )

    def render_to_xlsx_response(self, pretty="false"):
        """
    )
    python_file.write(
        '"""\n        Returns a XLSX response, transforming '
        '"resource" to make the payload.\n\n        """'
    )
    python_file.write(
        """
        sheets = []

        for table, name in ["""
    )
    for model in table_names:
        python_file.write(
            f"""
            (models.{model}, "{model}"),"""
        )
    python_file.write(
        """
        ]:
            if pretty.lower() == "true":
                dataset = resources_pretty.get_resource(name).export(table.objects.all())
            else:
                dataset = resources.get_resource(name).export(table.objects.all())
            dataset.title = name
            sheets.append(dataset)

        dataset = tablib.Databook(sheets)

        response = HttpResponse(
            dataset.xlsx,
            content_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        )
        response["Content-Disposition"] = f'attachment; filename="mip_dr.xlsx"'
        return response


class notes(TemplateView):
    template_name = "mip_dr_app_api/notes.html"
"""
    )


def _write_view_py_file(python_file, model_name):
    python_file.write(
        f"""

class {model_name}DetailView(
    CSVResponseMixin, JSONResponseMixin, XLSXResponseMixin, DetailView
):
    model = models.{model_name}

    def render_to_response(self, context):
        # Look for a 'format=csv' GET argument
        if (
            self.request.GET.get("format") == "csv"
            or self.request.content_type == "text/csv"
        ):
            return self.render_to_csv_response(
                context, resources.{model_name}Resource(), "{model_name}.csv"
            )

        # Look for a 'format=json' GET argument
        if (
            self.request.GET.get("format") == "json"
            or self.request.content_type == "application/json"
        ):
            return self.render_to_json_response(context)

        # Look for a 'format=xlsx' GET argument
        if (
            self.request.GET.get("format") == "xlsx"
            or self.request.content_type
            == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        ):
            return self.render_to_xlsx_response(
                context, resources.{model_name}Resource(), "{model_name}.xlsx"
            )

        # return html
        return super().render_to_response(context)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["models"] = models.{model_name}.objects.all()
"""
    )

    _write_view_py_file_extra_context(python_file, model_name)

    python_file.write(
        f"""
        return context


class {model_name}ListView(
    CSVResponseMixin, JSONResponseMixin, XLSXResponseMixin, ListView
):
    model = models.{model_name}

    def head(self, *args, **kwargs):
        last_modified = self.get_queryset().latest("date_modified")
        response = HttpResponse(
            # RFC 1123 date format."""
    )
    python_file.write(
        """
            headers={
                "Last-Modified": last_modified.date_modified.strftime(
                    "%a, %d %b %Y %H:%M:%S GMT"
                )
            },"""
    )
    python_file.write(
        f"""
        )
        return response

    def render_to_response(self, context):
        # Look for a 'format=csv' GET argument
        if (
            self.request.GET.get("format") == "csv"
            or self.request.content_type == "text/csv"
        ):
            if self.request.GET.get("pretty") == "true":
                return self.render_to_csv_response(
                    context, resources_pretty.{model_name}Resource(), "{model_name}.csv"
                )
            else:
                return self.render_to_csv_response(
                    context, resources.{model_name}Resource(), "{model_name}.csv"
                )

        # Look for a 'format=json' GET argument
        if (
            self.request.GET.get("format") == "json"
            or self.request.content_type == "application/json"
        ):
            return self.render_to_json_response(context)

        # Look for a 'format=xlsx' GET argument
        if (
            self.request.GET.get("format") == "xlsx"
            or self.request.content_type
            == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        ):

            if self.request.GET.get("pretty") == "true":
                return self.render_to_xlsx_response(
                    context, resources_pretty.{model_name}Resource(), "{model_name}.xlsx"
                )
            else:
                return self.render_to_xlsx_response(
                    context, resources.{model_name}Resource(), "{model_name}.xlsx"
                )

        # return html
        return super().render_to_response(context)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["table_name"] = models.{model_name}._meta.verbose_name
        context["table_description"] = models.{model_name}.table_description
        context["table_id"] = models.{model_name}.table_id
        return context
"""
    )


def _write_view_py_file_extra_context(python_file, model_name):

    if model_name == "CMORvar":
        _write_view_py_file_extra_context_line(python_file, "places", "Places", "vid")
        _write_view_py_file_extra_context_line(
            python_file, "qcranges", "Qcranges", "vid"
        )
        _write_view_py_file_extra_context_line(
            python_file, "requestVar", "RequestVar", "vid"
        )
        _write_view_py_file_extra_context_line(
            python_file, "transfers", "Transfers", "vid"
        )
        _write_view_py_file_extra_context_line(
            python_file, "varChoiceLinkC", "VarChoiceLinkC", "vid"
        )
        _write_view_py_file_extra_context_line(
            python_file, "varChoiceLinkR", "VarChoiceLinkR", "vid"
        )

    if model_name == "CellMethods":
        _write_view_py_file_extra_context_line(
            python_file, "structure", "Structure", "cmid"
        )

    if model_name == "Exptgroup":
        _write_view_py_file_extra_context_line(
            python_file, "experiment", "Experiment", "egid"
        )

    if model_name == "Grids":
        _write_view_py_file_extra_context_line(python_file, "remarks", "Remarks", "tid")
        _write_view_py_file_extra_context_line(
            python_file, "spatialShape", "SpatialShape", "dimids"
        )
        _write_view_py_file_extra_context_line(
            python_file, "structure_d", "Structure", "dids"
        )
        _write_view_py_file_extra_context_line(
            python_file, "structure_c", "Structure", "cids"
        )
        _write_view_py_file_extra_context_line(
            python_file, "temporalShape", "TemporalShape", "dimid"
        )

    if model_name == "Mip":
        _write_view_py_file_extra_context_line(
            python_file, "experiment", "Experiment", "mip"
        )
        _write_view_py_file_extra_context_line(
            python_file, "objective", "Objective", "mip"
        )
        _write_view_py_file_extra_context_line(python_file, "places", "Places", "mip")
        _write_view_py_file_extra_context_line(
            python_file, "requestItem", "RequestItem", "mip"
        )
        _write_view_py_file_extra_context_line(
            python_file, "requestLink", "RequestLink", "mip"
        )
        _write_view_py_file_extra_context_line(
            python_file, "requestVar", "RequestVar", "mip"
        )
        _write_view_py_file_extra_context_line(
            python_file, "requestVarGroup", "RequestVarGroup", "mip"
        )
        _write_view_py_file_extra_context_line(
            python_file, "tableSection", "TableSection", "mip"
        )
        _write_view_py_file_extra_context_line(
            python_file, "transfers", "Transfers", "mip"
        )
        _write_view_py_file_extra_context_line(python_file, "var", "Var", "provmip")

    if model_name == "Miptable":
        _write_view_py_file_extra_context_line(
            python_file, "CMORvar", "CMORvar", "mtid"
        )
        _write_view_py_file_extra_context_line(
            python_file, "tableSection", "TableSection", "gpid"
        )

    if model_name == "ModelConfig":
        _write_view_py_file_extra_context_line(
            python_file, "varChoiceLinkC", "VarChoiceLinkC", "cfgid"
        )

    if model_name == "Objective":
        _write_view_py_file_extra_context_line(
            python_file, "objectiveLink", "ObjectiveLink", "oid"
        )

    if model_name == "Places":
        _write_view_py_file_extra_context_line(
            python_file, "transfers_f", "Transfers", "frid"
        )
        _write_view_py_file_extra_context_line(
            python_file, "transfers_t", "Transfers", "toid"
        )

    if model_name == "RequestLink":
        _write_view_py_file_extra_context_line(
            python_file, "objectiveLink", "ObjectiveLink", "rlid"
        )
        _write_view_py_file_extra_context_line(
            python_file, "requestItem", "RequestItem", "rid"
        )

    if model_name == "RequestVarGroup":
        _write_view_py_file_extra_context_line(
            python_file, "requestLink", "RequestLink", "refid"
        )
        _write_view_py_file_extra_context_line(
            python_file, "requestVar", "RequestVar", "vgid"
        )

    if model_name == "SpatialShape":
        _write_view_py_file_extra_context_line(
            python_file, "structure", "Structure", "spid"
        )

    if model_name == "Standardname":
        _write_view_py_file_extra_context_line(python_file, "var", "Var", "sn")

    if model_name == "Structure":
        _write_view_py_file_extra_context_line(
            python_file, "CMORvar", "CMORvar", "stid"
        )

    if model_name == "TemporalShape":
        _write_view_py_file_extra_context_line(
            python_file, "structure", "Structure", "tmid"
        )

    if model_name == "Units":
        _write_view_py_file_extra_context_line(python_file, "var", "Var", "unid")

    if model_name == "Var":
        _write_view_py_file_extra_context_line(python_file, "CMORvar", "CMORvar", "vid")

    if model_name == "VarChoice":
        _write_view_py_file_extra_context_line(
            python_file, "varChoiceLinkC", "VarChoiceLinkC", "cid"
        )
        _write_view_py_file_extra_context_line(
            python_file, "varChoiceLinkR", "VarChoiceLinkR", "cid"
        )


def _write_view_py_file_extra_context_line(python_file, name, model_name, attrib):

    python_file.write(
        f'        context["{name}"] = models.{model_name}.objects.filter({attrib}=context["object"])\n'
    )


def _write_url_py_file(python_file, table_name, model_name):
    python_file.write(
        f"""
    path(
        "{table_name}/",
        mip_dr_app_api_views.{model_name}ListView.as_view(),
        name="{table_name}-list",
    ),
    path("""
    )

    if table_name == "standardname":
        python_file.write(f'\n        "{table_name}/<pk>",')
    else:
        python_file.write(f'\n        "{table_name}/<uuid:pk>",')

    python_file.write(
        f"""
        mip_dr_app_api_views.{model_name}DetailView.as_view(),
        name="{table_name}-detail",
    ),"""
    )


def _write_template_list_file(table_xml):
    table_attrib = table_xml.attrib
    table_name = table_attrib["label"]
    with open(
        f"../templates/mip_dr_app_api/{table_name.lower()}_list.html", "w"
    ) as python_file:
        python_file.write(
            """{% extends "mip_dr_app_api/sidebar.html" %}

{% block title %}{{ table_id }}{% endblock %}

{% block nav %}
{% load mip_dr_app_api_tags %}
<nav class="navbar navbar-expand-lg bg-light">
    <div class="container-fluid">
        <button class="navbar-toggler" type="button"
            data-bs-toggle="collapse"
            data-bs-target="#navbarSupportedContent"
            aria-controls="navbarSupportedContent" aria-expanded="false"
            aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse"
            id="navbarSupportedContent">
            <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                <li class="nav-item">
                    <a class="nav-link" aria-current="home page" href="/">Home</a>
                </li>
                <li class="navbar-text"><i class="bi bi-arrow-right" aria-hidden="true"></i></li>
                <li class="nav-item">
                    <p class="nav-link active">{{ table_name }}</p>
                </li>
            </ul>

            <div class="dropdown clearfix">
                <a class="btn btn-primary dropdown-toggle float-end m-1" href="#" role="button" id="download_data" data-bs-toggle="dropdown" aria-expanded="false">
        Download """
        )
        python_file.write(table_name)
        python_file.write(
            """</a>
                <ul class="dropdown-menu" role="menu" aria-labelledby="download_data">
                    <li role="presentation"><a class="dropdown-item" role="menuitem" href={% url '"""
        )
        python_file.write(table_name)
        python_file.write("-list' %}?format=csv>CSV</a></li>")

        python_file.write(
            """
                    <li role="presentation"><a class="dropdown-item" role="menuitem" href={% url '"""
        )
        python_file.write(table_name)
        python_file.write("-list' %}?format=csv&pretty=true>CSV - pretty</a></li>")

        python_file.write(
            """
                    <li role="presentation"><a class="dropdown-item" role="menuitem" href={% url '"""
        )
        python_file.write(table_name)
        python_file.write("-list' %}?format=json>JSON</a></li>")

        python_file.write(
            """
                    <li role="presentation"><a class="dropdown-item" role="menuitem" href={% url '"""
        )
        python_file.write(table_name)
        python_file.write("-list' %}?format=xlsx>XLSX</a></li>")

        python_file.write(
            """
                    <li role="presentation"><a class="dropdown-item" role="menuitem" href={% url '"""
        )
        python_file.write(table_name)
        python_file.write("-list' %}?format=xlsx&pretty=true>XLSX - pretty</a></li>")

        python_file.write(
            """                </ul>
            </div>

        </div>
    </div>
</nav>
{% endblock %}

{% block right_block %}
    <h1>Data Request Section: {{ table_name }} ("""
        )
        python_file.write(table_name)
        python_file.write(
            """)</h1>

    <h2>{{ table_description }}</h2>

    <ul>
{% for object in object_list %}
        <li><a href={% url '"""
        )
        python_file.write(table_name)
        python_file.write(
            "-detail' object.pk %}>{{ object.label }}</a>: {{ object.title }}"
        )

        # add the link for mip records to the project site
        if table_name == "mip":
            python_file.write(" [<a href='{{ object.url }}'>project site</a>]")

        python_file.write(
            """{% if object.units %} [{{ object.units }}]{% endif %}</li>
{% empty %}
        <li>No articles yet.</li>
{% endfor %}
    </ul>
{% endblock %}"""
        )


def _write_template_detail_file(table_xml):
    table_attrib = table_xml.attrib
    table_name = table_attrib["label"]
    with open(
        f"../templates/mip_dr_app_api/{table_name.lower()}_detail.html", "w"
    ) as python_file:

        python_file.write(
            """{% extends "mip_dr_app_api/base.html" %}

{% block title %}{{ object.label }}{% endblock %}

{% block nav %}
{% load mip_dr_app_api_tags %}
<nav class="navbar navbar-expand-lg bg-light">
    <div class="container-fluid">
        <button class="navbar-toggler" type="button"
            data-bs-toggle="collapse"
            data-bs-target="#navbarSupportedContent"
            aria-controls="navbarSupportedContent" aria-expanded="false"
            aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse"
            id="navbarSupportedContent">
            <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                <li class="nav-item">
                    <a class="nav-link" aria-current="home page" href="/">Home</a>
                </li>
                <li class="navbar-text"><i class="bi bi-arrow-right" aria-hidden="true"></i></li>
                <li class="nav-item">
                    <a class="nav-link" aria-current='"""
        )
        python_file.write(table_name)
        python_file.write(""" list' href={%url '""")
        python_file.write(table_name)
        python_file.write(
            """-list' %}>{{object|verbose_name }}</a>
                </li>
                <li class="navbar-text"><i class="bi bi-arrow-right" aria-hidden="true"></i></li>
                <li class="nav-item">
                    <p class="nav-link active">{{ object.title }}</p>
                </li>
            </ul>
        </div>
    </div>
</nav>
{% endblock %}

{% block content %}
<div class="row row-height">
<div class="col-2 left">
    <div id="sidebar">
    <table class="table table-striped ">
        <thead>
            <tr>
                <th scope="col" class="sidebar_table">{{ object|verbose_name }}</th>
            </tr>
        </thead>
        <tbody>
{% for model in models %}
            <tr>
                <td class="sidebar_table"><a href={% url '"""
        )
        python_file.write(table_name)
        python_file.write(
            """-detail' model.pk %}>{{ model.label }}</a></td>
            </tr>
{% endfor %}
        </tbody>
    </table>
</div>
</div>
"""
        )

        python_file.write(
            """<div class="col-10 right">

<h1>{{ object|verbose_name }}: {{ object.title }} ({{ object.label }})</h1>
"""
        )

        # there are 2 entries for label and title for each table
        # ignore the second one
        label_found = False
        title_found = False
        for table_row in table_xml:
            if table_row.attrib["label"] == "label":
                if label_found:
                    continue
                label_found = True
            if table_row.attrib["label"] == "title":
                if title_found:
                    continue
                title_found = True
            _write_template_detail_file_line(python_file, table_name, table_row)

        _write_template_detail_file_extra_links(python_file, table_name)

        python_file.write("\n</div>\n</div>\n{% endblock %}\n")


def _write_template_detail_file_extra_links(python_file, table_name):

    if table_name == "CMORvar":
        _write_template_detail_file_extra_link(
            python_file, "Places, States or Reservoirs", "places"
        )
        _write_template_detail_file_extra_link(
            python_file, "Quality Control Ranges", "qcranges"
        )
        _write_template_detail_file_extra_link(
            python_file,
            "Request variable (carrying priority and link to group)",
            "requestVar",
        )
        _write_template_detail_file_extra_link(
            python_file, "Transfers of Material", "transfers"
        )
        _write_template_detail_file_extra_link(
            python_file, "Links a variable to a choice element", "varChoiceLinkC"
        )
        _write_template_detail_file_extra_link(
            python_file, "Links a variable to a choice element", "varChoiceLinkR"
        )

    if table_name == "cellMethods":
        _write_template_detail_file_extra_link(
            python_file, "Dimensions and related information", "structure"
        )

    if table_name == "exptgroup":
        _write_template_detail_file_extra_link(python_file, "Experiments", "experiment")

    if table_name == "grids":
        _write_template_detail_file_extra_link(
            python_file,
            "Remarks about other items",
            "remarks",
        )
        _write_template_detail_file_extra_link(
            python_file, "Spatial dimensions", "spatialShape"
        )
        _write_template_detail_file_extra_link(
            python_file,
            "Dimensions and related information",
            "structure_d",
            "structure",
        )
        _write_template_detail_file_extra_link(
            python_file,
            "Dimensions and related information",
            "structure_c",
            "structure",
        )
        _write_template_detail_file_extra_link(
            python_file, "Temporal dimension", "temporalShape"
        )

    if table_name == "mip":
        _write_template_detail_file_extra_link(python_file, "Experiments", "experiment")
        _write_template_detail_file_extra_link(
            python_file, "Scientific objectives", "objective"
        )
        _write_template_detail_file_extra_link(
            python_file, "Places, States or Reservoirs", "places"
        )
        _write_template_detail_file_extra_link(
            python_file,
            "Request Item: specifying the number of years for an experiment",
            "requestItem",
        )
        _write_template_detail_file_extra_link(
            python_file,
            "Request link: linking a set of variables and a set of experiments",
            "requestLink",
        )
        _write_template_detail_file_extra_link(
            python_file,
            "Request variable (carrying priority and link to group)",
            "requestVar",
        )
        _write_template_detail_file_extra_link(
            python_file,
            "Request variable group: a collection of request variables",
            "requestVarGroup",
        )
        _write_template_detail_file_extra_link(
            python_file, "CMOR Table Sections", "tableSection"
        )
        _write_template_detail_file_extra_link(
            python_file, "Transfers of Material", "transfers"
        )
        _write_template_detail_file_extra_link(python_file, "MIP Variable", "var")

    if table_name == "miptable":
        _write_template_detail_file_extra_link(python_file, "CMOR Variable", "CMORvar")
        _write_template_detail_file_extra_link(
            python_file, "CMOR Table Sections", "tableSection"
        )

    if table_name == "modelConfig":
        _write_template_detail_file_extra_link(
            python_file, "Links a variable to a choice element", "varChoiceLinkC"
        )

    if table_name == "objective":
        _write_template_detail_file_extra_link(
            python_file,
            "Link between scientific objectives and requests",
            "objectiveLink",
        )

    if table_name == "places":
        _write_template_detail_file_extra_link(
            python_file, "Source Identifier", "transfers_f", "transfers"
        )
        _write_template_detail_file_extra_link(
            python_file, "Target Identifier", "transfers_t", "transfers"
        )

    if table_name == "requestLink":
        _write_template_detail_file_extra_link(
            python_file,
            "Link between scientific objectives and requests",
            "objectiveLink",
        )
        _write_template_detail_file_extra_link(
            python_file,
            "3.2 Request Item: specifying the number of years for an experiment",
            "requestItem",
        )

    if table_name == "requestVarGroup":
        _write_template_detail_file_extra_link(
            python_file,
            "Request variable (carrying priority and link to group)",
            "requestVar",
        )
        _write_template_detail_file_extra_link(
            python_file,
            "Request link: linking a set of variables and a set of experiments",
            "requestLink",
        )

    if table_name == "spatialShape":
        _write_template_detail_file_extra_link(
            python_file, "Dimensions and related information", "structure"
        )

    if table_name == "standardname":
        _write_template_detail_file_extra_link(python_file, "MIP Variable", "var")

    if table_name == "structure":
        _write_template_detail_file_extra_link(python_file, "CMOR Variable", "CMORvar")

    if table_name == "temporalShape":
        _write_template_detail_file_extra_link(
            python_file, "Dimensions and related information", "structure"
        )

    if table_name == "units":
        _write_template_detail_file_extra_link(python_file, "MIP Variable", "var")

    if table_name == "var":
        _write_template_detail_file_extra_link(python_file, "CMOR Variable", "CMORvar")

    if table_name == "varChoice":
        _write_template_detail_file_extra_link(
            python_file, "Links a variable to a choice element", "varChoiceLinkC"
        )
        _write_template_detail_file_extra_link(
            python_file, "Links a variable to a choice element", "varChoiceLinkR"
        )


def _write_template_detail_file_extra_link(python_file, title, data_name, link=None):
    if link is None:
        link = data_name
    python_file.write("\n{% if " + data_name + " %}\n")

    python_file.write("{% if " + data_name + ".count == 1 %}\n")
    python_file.write(
        "        <p>\n            <b>"
        + title
        + " :</b> <a href={% url '"
        + link
        + "-detail' "
        + data_name
        + ".first.pk %}>{{ "
        + data_name
        + ".first.title }}</a>\n        </p>\n"
    )
    python_file.write("{% endif %}\n")

    python_file.write(
        "{% if " + data_name + ".count > 1  and " + data_name + ".count < 6 %}\n"
    )
    python_file.write(
        f"        <p>\n            <b>{title} :</b>\n        </p>\n        <ul>\n"
    )
    python_file.write("{% for item in " + data_name + " %}\n")
    python_file.write(
        "            <li><a href={% url '"
        + link
        + "-detail' item.pk %}>{{ item.title }}</a></li>\n"
    )
    python_file.write(
        """{% endfor %}
        </ul>
{% endif %}\n"""
    )
    python_file.write("{% if " + data_name + ".count > 5 %}\n")
    python_file.write(
        f"""        <p>
            <b>{title} : </b>
                <a class="list-heading collapsed" data-bs-toggle="collapse" href="#{data_name}">
                    <i class="fa fa-fw fa-chevron-right"></i><i class="fa fa-fw fa-chevron-down"></i>
                </a>
        </p>
        <div id="{data_name}" class="collapse">\n"""
    )
    python_file.write("            <ul>\n{% for item in " + data_name + " %}\n")
    python_file.write(
        "            <li><a href={% url '"
        + data_name
        + "-detail' item.pk %}>{{ item.title }}</a></li>\n"
    )
    python_file.write(
        """{% endfor %}
            </ul>
        </div>
{% endif %}
{% endif %}\n"""
    )


def _write_template_detail_file_line(python_file, table_name, table_row):
    row_attrib = table_row.attrib
    row_name = row_attrib["label"]
    if row_name == "class":
        # cannot use reserved word "class" as the name of a row
        row_name = "class_name"

    if row_attrib["required"].lower() == "true":
        required = True
    else:
        required = False
        python_file.write("{% if object.")
        python_file.write(row_name)
        if row_name in MANY_TO_MANY:
            python_file.write(".all")
        python_file.write(" %}\n")
    if row_name == "cmid":
        linked_model = "cellMethods"
    elif row_name == "egid":
        linked_model = "exptgroup"
    elif row_name == "gid":
        linked_model = "grids"
    elif row_name == "gpid":
        linked_model = "CMORvar"
    elif row_name == "mip":
        linked_model = "mip"
    elif row_name == "mtid":
        linked_model = "miptable"
    elif row_name == "oid":
        linked_model = "objective"
    elif row_name == "provmip":
        linked_model = "mip"
    elif row_name == "refid" or row_name == "vgid":
        linked_model = "requestVarGroup"
    elif row_name == "rid" or row_name == "rlid":
        linked_model = "requestLink"
    elif row_name == "sn":
        linked_model = "standardname"
    elif row_name == "spid":
        linked_model = "spatialShape"
    elif row_name == "stid":
        linked_model = "structure"
    elif row_name == "tmid":
        linked_model = "temporalShape"
    elif row_name == "unid":
        linked_model = "units"
    elif row_name == "vid" and table_name == "CMORvar":
        linked_model = "var"
    elif row_name == "vid":
        linked_model = "CMORvar"
    else:
        linked_model = None

    python_file.write('<p><b>{% field_verbose_name object "')
    python_file.write(row_name)
    python_file.write('" %}{% field_help_text object "')
    python_file.write(row_name)
    python_file.write(
        """" as help_text %}
    {% if help_text %}
        <i class="bi bi-info-circle"
            aria-label="Information about {% field_verbose_name object '"""
    )
    python_file.write(row_name)
    python_file.write(
        """' %}"
            data-bs-toggle="tooltip"
            data-bs-placement="top"
            data-bs-container="body"
            data-bs-delay='{"show":"200"}'
            title="{{ help_text }}">
        </i>
    {% endif %}</b>: """
    )

    if row_name in MANY_TO_MANY:
        python_file.write("{% for one in object.")
        python_file.write(row_name)
        python_file.write(
            """.all %}
        <a href={% url 'grids-detail' one.uid %}>{{ one.label }}</a>
{% endfor %}"""
        )

    elif linked_model is not None:
        python_file.write("<a href={% url '")
        python_file.write(linked_model)
        python_file.write("-detail' object.")
        python_file.write(row_name)
        python_file.write(".uid %}>{{ object.")
        python_file.write(row_name)
        python_file.write(".label }}</a></p>\n")

    # an external link
    elif row_name == "url":
        python_file.write("<a href={{ object.")
        python_file.write(row_name)
        python_file.write(" }}>{{ object.")
        python_file.write(row_name)
        python_file.write(" }}</a></p>\n")

    else:
        python_file.write("{{ object.")
        python_file.write(row_name)
        python_file.write(" }}</p>\n")

    if not required:
        python_file.write("{% endif %}\n")


def _write_sidebar(python_file, sidebar_html):

    python_file.write(
        """
{% extends "mip_dr_app_api/base.html" %}

{% block content %}
<div class="row row-height">

<div class="col-2 left">
    <div id="sidebar">
    <table class="table table-striped ">
        <thead>
            <tr>
                <th scope="col" class="sidebar_table">Data Request</th>
            </tr>
        </thead>
        <tbody>
"""
    )
    for key in sorted(sidebar_html.keys(), key=_natural_keys):
        python_file.write(
            f'        <tr><td class="sidebar_table">{sidebar_html[key]}</td></tr>\n'
        )
    python_file.write(
        """
        </tbody>
    </table>
</div>
</div>

<div class="col-10 right">

{% block right_block %}
{% endblock %}
</div>

</div>
{% endblock %}
"""
    )


def _get_index_html_file_line(index_html, table_xml):
    table_attrib = table_xml.attrib
    table_name = table_attrib["label"]

    line = (
        "<li><a href={% url '"
        + table_name
        + "-list' %}>"
        + table_attrib["title"].strip()
        + " ["
        + table_name
        + "]</a> "
        + table_attrib["description"].strip()
        + "</li>\n"
    )
    index_html[table_attrib["title"]] = line


def _get_sidebar_html_line(sidebar_html, table_xml):
    table_attrib = table_xml.attrib
    table_name = table_attrib["label"]

    line = (
        """<a href={% url '"""
        + table_name
        + "-list' %}>"
        + table_attrib["title"].strip()
        + " ["
        + table_name
        + "]</a>"
    )
    sidebar_html[table_attrib["title"]] = line


def _write_index_file(index_html):
    with open(INDEX_FILE, "w") as python_index_file:
        python_index_file.write(
            """{% extends "mip_dr_app_api/base.html" %}

{% block title %}Data Request{% endblock %}

{% block nav %}
{% load mip_dr_app_api_tags %}
<nav class="navbar navbar-expand-lg bg-light">
    <div class="container-fluid">
        <button class="navbar-toggler" type="button"
            data-bs-toggle="collapse"
            data-bs-target="#navbarSupportedContent"
            aria-controls="navbarSupportedContent" aria-expanded="false"
            aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse"
            id="navbarSupportedContent">
            <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                <li class="nav-item">
                    <p class="nav-link active">Home</p>
                </li>
            </ul>

            <div class="dropdown clearfix">
                <a class="btn btn-primary dropdown-toggle float-end m-1" href="#" role="button" id="download_data" data-bs-toggle="dropdown" aria-expanded="false">
                    Download Data Request</a>
                <ul class="dropdown-menu" role="menu" aria-labelledby="download_data">
                    <li role="presentation"><a class="dropdown-item" role="menuitem" href={% url 'index' %}?format=json>JSON</a></li>
                    <li role="presentation"><a class="dropdown-item" role="menuitem" href={% url 'index' %}?format=xlsx>XLSX</a></li>
                    <li role="presentation"><a class="dropdown-item" role="menuitem" href={% url 'index' %}?format=xlsx&pretty=true>XLSX - pretty</a></li>
                </ul>
            </div>

        </div>
    </div>
</nav>
{% endblock %}

{% block content %}
<div class="row row-height">
    <div class="col-2"></div>
    <div class="col-10">
        <h1>Data Request</h1>
        <h2>Sections of the data request</h2>
        <ul>
"""
        )

        for key in sorted(index_html.keys(), key=_natural_keys):
            python_index_file.write(f"            {index_html[key]}")
        python_index_file.write(
            """
        </ul>
    </div>
</div>
{% endblock %}\n"""
        )


def main():
    python_views_file = open(VIEWS_FILE, "w")
    _write_views_py_file_header(python_views_file)

    python_urls_file = open(URLS_FILE, "w")
    _write_url_py_file_header(python_urls_file)

    index_html, sidebar_html = _get_index(DREQ_DEF_XML)
    html_1, html_2 = _get_index(DREQ_SUPP_DEF_XML)

    index_html.update(html_1)
    sidebar_html.update(html_2)

    index_html.update(html_1)
    sidebar_html.update(html_2)

    _write_index_file(index_html)

    with open(SIDE_BAR_FILE, "w") as sidebar_file:
        _write_sidebar(sidebar_file, sidebar_html)

    table_names = _process_xml(python_views_file, python_urls_file, DREQ_DEF_XML)
    table_names.extend(
        _process_xml(python_views_file, python_urls_file, DREQ_SUPP_DEF_XML)
    )

    _write_view_py_file_index(python_views_file, table_names)
    _write_url_py_file_footer(python_urls_file)

    python_views_file.close()
    python_urls_file.close()


if __name__ == "__main__":
    main()
