"""""
This script generates veiws.py, urls.py and the template files

"""
import re
import socket
from urllib import error, request
import xml.etree.ElementTree as ET

HTTP_TIME_OUT = 300
DREQ_DEF_XML = (
    "https://raw.githubusercontent.com/cmip6dr/data_request_snapshots/"
    "main/Release/dreqPy/docs/dreq2Defn.xml"
)
DREQ_SUPP_DEF_XML = (
    "https://raw.githubusercontent.com/cmip6dr/data_request_snapshots/"
    "main/Release/dreqPy/docs/dreqSuppDefn.xml"
)
VIEWS_FILE = "../mip_dr_app_api/views.py"
URLS_FILE = "../mip_dr_app_api/urls.py"
INDEX_FILE = "../templates/mip_dr_app_api/index.html"


def _atoi(text):
    return int(text) if text.isdigit() else text


def _natural_keys(text):
    """
    alist.sort(key=natural_keys) sorts in human order
    """
    return [_atoi(c) for c in re.split(r"(\d+)", text)]


def _read_url(url_):
    """
    Pull info from a URL.

    @param url_ (str): the URL to call to get data.

    @return a str containing the data

    """
    socket.setdefaulttimeout(HTTP_TIME_OUT)
    opener = request.build_opener()

    req = request.Request(url_)

    response = None
    try:
        response = opener.open(req)
    except (error.HTTPError, socket.timeout) as ex:
        print(f"ERROR retrieved data from {url_}")
        print(f"{ex}")
        return None
    finally:
        try:
            opener.close()
        # pylint: disable=bare-except
        except:
            pass

    return response.read()


def _write_views_py_file_header(python_file):
    python_file.write(
        '"""\nThis file was generated by the script generate_views_and_templates.py\n\n"""'
    )
    python_file.write(
        """
from django.shortcuts import render
from django.views.generic.detail import DetailView
from django.views.generic.list import ListView

from mip_dr_app_api import models


def index(request):
    return render(request, 'mip_dr_app_api/index.html', {})
"""
    )


def _write_url_py_file_header(python_file):
    python_file.write(
        '"""\nThis file was generated by the script generate_views_and_templates.py\n\n"""'
    )
    python_file.write(
        """
from django.urls import path

from mip_dr_app_api import views as mip_dr_app_api_views


urlpatterns = [
    path('', mip_dr_app_api_views.index, name='index'),"""
    )


def _write_url_py_file_footer(python_file):
    python_file.write("\n    ]\n")


def _get_index(xml):
    """
    Process the xml string, loop through the tables.

    @param xml: the xml

    @return data for the index.html file

    """
    xml_string = _read_url(xml)
    root = ET.fromstring((xml_string))
    index_html = {}
    sidebar_html = {}

    for child in root:
        if child.tag == "{urn:w3id.org:cmip6.dreq.framework:a}table":
            _get_sidebar_html_line(sidebar_html, child)
            _get_index_html_file_line(index_html, child)

    return index_html, sidebar_html


def _process_xml(python_views_file, python_urls_file, xml, sidebar_html):
    """
    Process the xml string, loop through the tables.

    @param xml: the xml

    """
    xml_string = _read_url(xml)
    root = ET.fromstring((xml_string))

    for child in root:
        if child.tag == "{urn:w3id.org:cmip6.dreq.framework:a}table":
            _write_view_py_file(python_views_file, child)
            _write_url_py_file(python_urls_file, child)
            _write_template_list_file(child, sidebar_html)
            _write_template_detail_file(child)


def _write_view_py_file(python_file, table_xml):
    table_attrib = table_xml.attrib
    model_name = table_attrib["label"][0].upper() + table_attrib["label"][1:]

    python_file.write(
        f"""

class {model_name}DetailView(DetailView):
    model = models.{model_name}

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["models"] = models.{model_name}.objects.all()
        return context

class {model_name}ListView(ListView):
    model = models.{model_name}
    # paginate_by = 100

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["table_name"] = models.{model_name}._meta.verbose_name
        context["table_description"] = models.{model_name}.table_description
        context["table_id"] = models.{model_name}.table_id
        return context
"""
    )


def _write_url_py_file(python_file, table_xml):
    table_attrib = table_xml.attrib
    table_name = table_attrib["label"]
    model_name = table_attrib["label"][0].upper() + table_attrib["label"][1:]

    python_file.write(
        f"""
    path('{table_name}/', mip_dr_app_api_views.{model_name}ListView.as_view(), name='{table_name}-list'),
    path('{table_name}/<uuid:pk>', mip_dr_app_api_views.{model_name}DetailView.as_view(), name='{table_name}-detail'),"""
    )


def _write_template_list_file(table_xml, sidebar_html):
    table_attrib = table_xml.attrib
    table_name = table_attrib["label"]
    with open(
        f"../templates/mip_dr_app_api/{table_name}_list.html", "w"
    ) as python_file:
        python_file.write(
            """{% extends "mip_dr_app_api/base.html" %}

{% block title %}{{ table_id }}{% endblock %}

{% block nav %}
{% load mip_dr_app_api_tags %}
<nav class="navbar navbar-expand-lg bg-light">
    <div class="container-fluid">
        <button class="navbar-toggler" type="button"
            data-bs-toggle="collapse"
            data-bs-target="#navbarSupportedContent"
            aria-controls="navbarSupportedContent" aria-expanded="false"
            aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse"
            id="navbarSupportedContent">
            <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                <li class="nav-item">
                    <a class="nav-link" aria-current="home page" href="/">Home</a>
                </li>
                <li class="navbar-text"><i class="bi bi-arrow-right" aria-hidden="true"></i></li>
                <li class="nav-item">
                    <p class="nav-link active">{{ table_name }}</p>
                </li>
            </ul>
        </div>
    </div>
</nav>
{% endblock %}

{% block content %}
<div class="row row-height">
"""
        )

        _write_sidebar(python_file, sidebar_html)

        python_file.write(
            """
<div class="col-10 right">
    <h1>Data Request Section: {{ table_name }} ("""
        )
        python_file.write(table_name)
        python_file.write(
            """)</h1>

    <h2>{{ table_description }}</h2>

    <ul>
{% for object in object_list %}
        <li><a href={% url '"""
        )
        python_file.write(table_name)
        python_file.write(
            "-detail' object.pk %}>{{ object.label }}</a>: {{ object.title }}"
        )

        # add the link for mip records to the project site
        if table_name == "mip":
            python_file.write(" [<a href='{{ object.url }}'>project site</a>]")

        python_file.write(
            """{% if object.units %} [{{ object.units }}]{% endif %}</li>
{% empty %}
        <li>No articles yet.</li>
{% endfor %}
    </ul>
</div>
</div>
{% endblock %}"""
        )


def _write_template_detail_file(table_xml):
    table_attrib = table_xml.attrib
    table_name = table_attrib["label"]
    with open(
        f"../templates/mip_dr_app_api/{table_name}_detail.html", "w"
    ) as python_file:

        python_file.write(
            """{% extends "mip_dr_app_api/base.html" %}

{% block title %}{{ object.label }}{% endblock %}

{% block nav %}
{% load mip_dr_app_api_tags %}
<nav class="navbar navbar-expand-lg bg-light">
    <div class="container-fluid">
        <button class="navbar-toggler" type="button"
            data-bs-toggle="collapse"
            data-bs-target="#navbarSupportedContent"
            aria-controls="navbarSupportedContent" aria-expanded="false"
            aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse"
            id="navbarSupportedContent">
            <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                <li class="nav-item">
                    <a class="nav-link" aria-current="home page" href="/">Home</a>
                </li>
                <li class="navbar-text"><i class="bi bi-arrow-right" aria-hidden="true"></i></li>
                <li class="nav-item">
                    <a class="nav-link" aria-current='"""
        )
        python_file.write(table_name)
        python_file.write(""" list' href={%url '""")
        python_file.write(table_name)
        python_file.write(
            """-list' %}>{{object|verbose_name }}</a>
                </li>
                <li class="navbar-text"><i class="bi bi-arrow-right" aria-hidden="true"></i></li>
                <li class="nav-item">
                    <p class="nav-link active">{{ object.title }}</p>
                </li>
            </ul>
        </div>
    </div>
</nav>
{% endblock %}

{% block content %}
<div class="row row-height">
<div class="col-2 left">
    <div id="sidebar">
    <table class="table table-striped ">
        <thead>
            <tr>
                <th scope="col" class="sidebar_table">{{ object|verbose_name }}</th>
            </tr>
        </thead>
        <tbody>
{% for model in models %}
            <tr>
                <td class="sidebar_table"><a href={% url '"""
        )
        python_file.write(table_name)
        python_file.write(
            """-detail' model.pk %}>{{ model.label }}</a></td>
            </tr>
{% endfor %}
        </tbody>
    </table>
</div>
</div>
"""
        )

        python_file.write(
            """<div class="col-10 right">

<h1>{{ object|verbose_name }}: {{ object.title }} ({{ object.label }})</h1>
"""
        )

        # there are 2 entries for label and title for each table
        # ignore the second one
        label_found = False
        title_found = False
        for table_row in table_xml:
            if table_row.attrib["label"] == "label":
                if label_found:
                    continue
                label_found = True
            if table_row.attrib["label"] == "title":
                if title_found:
                    continue
                title_found = True
            _write_template_detail_file_line(python_file, table_name, table_row)

        python_file.write("\n</div>\n</div>\n{% endblock %}\n")


def _write_template_detail_file_line(python_file, table_name, table_row):
    row_attrib = table_row.attrib
    row_name = row_attrib["label"]
    if row_name == "class":
        # cannot use reserved word "class" as the name of a row
        row_name = "class_name"

    if row_attrib["required"].lower() == "true":
        required = True
    else:
        required = False
        python_file.write("{% if object.description %}\n")
    if row_name == "cmid":
        linked_model = "cellMethods"
    elif row_name == "egid":
        linked_model = "exptgroup"
    elif row_name == "gpid":
        linked_model = "CMORvar"
    elif row_name == "mip":
        linked_model = "mip"
    elif row_name == "mtid":
        linked_model = "miptable"
    elif row_name == "oid":
        linked_model = "objective"
    elif row_name == "provmip":
        linked_model = "mip"
    elif row_name == "refid" or row_name == "vgid":
        linked_model = "requestVarGroup"
    elif row_name == "rid" or row_name == "rlid":
        linked_model = "requestLink"
    elif row_name == "sn":
        linked_model = "standardname"
    elif row_name == "spid":
        linked_model = "spatialShape"
    elif row_name == "stid":
        linked_model = "structure"
    elif row_name == "tmid":
        linked_model = "temporalShape"
    elif row_name == "unid":
        linked_model = "units"
    elif row_name == "vid" and table_name == "CMORvar":
        linked_model = "var"
    elif row_name == "vid":
        linked_model = "CMORvar"
    else:
        linked_model = None

    python_file.write('<p><b>{% field_verbose_name object "')
    python_file.write(row_name)
    python_file.write('" %}{% field_help_text object "')
    python_file.write(row_name)
    python_file.write(
        """" as help_text %}
    {% if help_text %}
        <i class="bi bi-info-circle"
            aria-label="Information about {% field_verbose_name object '"""
    )
    python_file.write(row_name)
    python_file.write(
        """' %}"
            data-bs-toggle="tooltip"
            data-bs-placement="top"
            data-bs-container="body"
            data-bs-delay='{"show":"200"}'
            title="{{ help_text }}">
        </i>
    {% endif %}</b>: """
    )

    if linked_model is not None:
        python_file.write("<a href={% url '")
        python_file.write(linked_model)
        python_file.write("-detail' object.")
        python_file.write(row_name)
        python_file.write(".uid %}>{{ object.")
        python_file.write(row_name)
        python_file.write(".label }}</a></p>\n")

    # an external link
    elif row_name == "url":
        python_file.write("<a href={{ object.")
        python_file.write(row_name)
        python_file.write(" }}>{{ object.")
        python_file.write(row_name)
        python_file.write(" }}</a></p>\n")

    else:
        python_file.write("{{ object.")
        python_file.write(row_name)
        python_file.write(" }}</p>\n")

    if not required:
        python_file.write("{% endif %}\n")


def _write_sidebar(python_file, sidebar_html):

    python_file.write(
        """
<div class="col-2 left">
    <div id="sidebar">
    <table class="table table-striped ">
        <thead>
            <tr>
                <th scope="col" class="sidebar_table">Data Request</th>
            </tr>
        </thead>
        <tbody>
"""
    )
    for key in sorted(sidebar_html.keys(), key=_natural_keys):
        python_file.write(
            f'        <tr><td class="sidebar_table">{sidebar_html[key]}</td></tr>\n'
        )
    python_file.write(
        """
        </tbody>
    </table>
</div>
</div>
"""
    )


def _get_index_html_file_line(index_html, table_xml):
    table_attrib = table_xml.attrib
    table_name = table_attrib["label"]

    line = (
        "<li><a href={% url '"
        + table_name
        + "-list' %}>"
        + table_attrib["title"].strip()
        + " ["
        + table_name
        + "]</a> "
        + table_attrib["description"].strip()
        + "</li>\n"
    )
    index_html[table_attrib["title"].split(" ")[0]] = line


def _get_sidebar_html_line(sidebar_html, table_xml):
    table_attrib = table_xml.attrib
    table_name = table_attrib["label"]

    line = (
        """<a href={% url '"""
        + table_name
        + "-list' %}>"
        + table_attrib["title"].strip()
        + " ["
        + table_name
        + "]</a>"
    )
    sidebar_html[table_attrib["title"].split(" ")[0]] = line


def _write_index_file(index_html):
    with open(INDEX_FILE, "w") as python_index_file:
        python_index_file.write(
            """{% extends "mip_dr_app_api/base.html" %}

{% block title %}Data Request{% endblock %}

{% block nav %}
{% load mip_dr_app_api_tags %}
<nav class="navbar navbar-expand-lg bg-light">
    <div class="container-fluid">
        <button class="navbar-toggler" type="button"
            data-bs-toggle="collapse"
            data-bs-target="#navbarSupportedContent"
            aria-controls="navbarSupportedContent" aria-expanded="false"
            aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse"
            id="navbarSupportedContent">
            <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                <li class="nav-item">
                    <p class="nav-link active">Home</p>
                </li>
            </ul>
        </div>
    </div>
</nav>
{% endblock %}

{% block content %}
<div class="row row-height">
    <div class="col-2"></div>
    <div class="col-10">
        <h1>Data Request</h1>
        <h2>Sections of the data request</h2>
        <ul>
"""
        )

        for key in sorted(index_html.keys(), key=_natural_keys):
            python_index_file.write(f"            {index_html[key]}")
        python_index_file.write(
            """
        </ul>
    </div>
</div>
{% endblock %}\n"""
        )


def main():
    python_views_file = open(VIEWS_FILE, "w")
    _write_views_py_file_header(python_views_file)

    python_urls_file = open(URLS_FILE, "w")
    _write_url_py_file_header(python_urls_file)

    index_html, sidebar_html = _get_index(DREQ_DEF_XML)
    html_1, html_2 = _get_index(DREQ_SUPP_DEF_XML)
    index_html.update(html_1)
    sidebar_html.update(html_2)

    _write_index_file(index_html)

    _process_xml(python_views_file, python_urls_file, DREQ_DEF_XML, sidebar_html)
    _process_xml(python_views_file, python_urls_file, DREQ_SUPP_DEF_XML, sidebar_html)

    _write_url_py_file_footer(python_urls_file)

    python_views_file.close()
    python_urls_file.close()


if __name__ == "__main__":
    main()
