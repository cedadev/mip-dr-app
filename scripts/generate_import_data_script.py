"""""
This script generates import_data.py

"""
import socket
from urllib import error, request
import xml.etree.ElementTree as ET

HTTP_TIME_OUT = 300
DREQ_DEF_XML = (
    "https://raw.githubusercontent.com/cmip6dr/data_request_snapshots/"
    "main/Release/dreqPy/docs/dreq2Defn.xml"
)
DREQ_SUPP_DEF_XML = (
    "https://raw.githubusercontent.com/cmip6dr/data_request_snapshots/"
    "main/Release/dreqPy/docs/dreqSuppDefn.xml"
)


def _read_url(url_):
    """
    Pull info from a URL.

    @param url_ (str): the URL to call to get data.

    @return a str containing the data

    """
    socket.setdefaulttimeout(HTTP_TIME_OUT)
    opener = request.build_opener()

    req = request.Request(url_)

    response = None
    try:
        response = opener.open(req)
    except (error.HTTPError, socket.timeout) as ex:
        print(f"ERROR retrieved data from {url_}")
        print(f"{ex}")
        return None
    finally:
        try:
            opener.close()
        # pylint: disable=bare-except
        except:
            pass

    return response.read()


def _write_header(python_file):
    python_file.write(
        '"""\nThis file was generated by generate_import_data_script.py\n\n"""\n'
    )
    python_file.write(
        """import os
import socket
from urllib import error, request
import xml.etree.ElementTree as ET
import uuid


HTTP_TIME_OUT = 300
DREQ_XML = (
    "https://raw.githubusercontent.com/cmip6dr/data_request_snapshots/main/"
    "Release/dreqPy/docs/dreq.xml"
)
DREQ_SUP_XML = (
    "https://raw.githubusercontent.com/cmip6dr/data_request_snapshots/main/"
    "Release/dreqPy/docs/dreqSupp.xml"
)
UUID_MAPPING = {}


def _read_url(url_):
    socket.setdefaulttimeout(HTTP_TIME_OUT)
    opener = request.build_opener()

    req = request.Request(url_)

    response = None
    try:
        response = opener.open(req)
    except (error.HTTPError, socket.timeout) as ex:
        print(f"ERROR retrieved data from {url_}")
        print(f"{ex}")
        return None
    finally:
        try:
            opener.close()
        # pylint: disable=bare-except
        except:
            pass

    return response.read()


def _get_bool(value):
    if value.lower == "true":
        return True
    return False"""
    )


def _process_xml(python_file, xml_string):
    """
    Extract a list of file names from the xml string.

    @param xml_string(str): a string representation of the xml

    @return a list of file names

    """
    tables = []
    root = ET.fromstring((xml_string))

    for child in root:
        if child.tag == "{urn:w3id.org:cmip6.dreq.framework:a}table":
            _process_table(python_file, child)
            tables.append(child.attrib["label"])

    return tables


def _write_body(python_file, tables):
    python_file.write(
        """\n\n\ndef _process_xml(xml_string, filter_, ignore):
    root = ET.fromstring((xml_string))

    for child in root:
        if child.tag == "{urn:w3id.org:cmip6.dreq.dreq:a}main":
            for table in child:
                if filter_ is not None and table.attrib["label"] not in filter_:
                    continue
                if ignore is not None and table.attrib["label"] in ignore:
                    continue"""
    )

    for table in tables:
        python_file.write(
            f"""
                elif table.attrib["label"] == "{table}":
                    _process_{table}(table)"""
        )


def _write_main(python_file):
    python_file.write(
        """\n\n\ndef main():
    _delete_data()

    xml_sup_string = _read_url(DREQ_SUP_XML)
    xml_string = _read_url(DREQ_XML)

    _process_xml(xml_sup_string, "units", None)
    _process_xml(xml_string, ["mip", "miptable"], None)
    _process_xml(xml_string, ["requestVarGroup"], None)
    _process_xml(xml_string, ["exptgroup"], None)
    _process_xml(xml_string, ["requestLink", "experiment"], None)
    _process_xml(
        xml_string,
        None,
        [
            "mip",
            "miptable",
            "requestVarGroup",
            "exptgroup",
            "requestLink",
            "experiment",
            "varChoiceLinkC",
            "requestVar",
            "varChoiceLinkR",
            "structure",
            "CMORvar",
            "tableSection",
        ],
    )
    _process_xml(xml_string, ["structure"], None)
    _process_xml(xml_string, ["CMORvar"], None)
    _process_xml(xml_string, ["varChoiceLinkC", "requestVar", "varChoiceLinkR"], None)
    _process_xml(xml_string, ["tableSection"], None)
    _process_xml(xml_sup_string, None, "units")
    print("import_data finished")"""
    )

    python_file.write(
        """\n\n\nif __name__ == "__main__":
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "settings.py")

    import django

    django.setup()
    from mip_dr_app_api import models as mip_dr_models

    main()\n"""
    )


def _process_table(python_file, table_xml):
    table_attrib = table_xml.attrib
    table_name = table_attrib["label"]
    model_name = table_attrib["label"][0].upper() + table_attrib["label"][1:]
    python_file.write(
        f"""\n\n\ndef _process_{table_name}(table):
    print("Importing data into table: {table_name}")
    for row in table:
        try:
            attribs = row.attrib
            new_record = mip_dr_models.{model_name}()\n"""
    )

    # there are 2 entries for label and title for each table
    # ignore the second one
    label_found = False
    title_found = False
    for table_row in table_xml:
        if table_row.attrib["label"] == "label":
            if label_found:
                continue
            label_found = True
        if table_row.attrib["label"] == "title":
            if title_found:
                continue
            title_found = True
        _process_row(python_file, model_name, table_row)

    python_file.write(
        """            new_record.save()
        except KeyError as ex:
            print(
                "ERROR - Record not added, table: """
        + table_name
        + """, record label:"
                f"{attribs['label']}, record uid: {attribs['uid']}, KeyError: {ex}"
            )
        except IndexError as ex:
            print(
                "ERROR - Record not added, table: """
        + table_name
        + """, record label:"
                f"{attribs['label']}, record uid: {attribs['uid']}, IndexError: {ex}"
            )"""
    )


def _process_row(python_file, model_name, table_row):
    row_attrib = table_row.attrib
    row_name = row_attrib["label"]

    if row_name == "class":
        # cannot use reserved word "class" as the name of a row
        row_name = "class_name"

    try:
        required = _get_required(row_attrib["required"])
    except KeyError:
        required = False

    if row_name == "uid":
        python_file.write(
            """            if UUID_MAPPING.get(attribs["uid"].lower()) is None:
                try:
                    uid = uuid.UUID("{" + attribs["uid"] + "}")
                except ValueError:
                    uid = uuid.uuid4()
                UUID_MAPPING[attribs["uid"].lower()] = uid
            new_record.uid = UUID_MAPPING[attribs["uid"].lower()]\n"""
        )
    elif required:
        _get_details(
            python_file,
            model_name,
            row_name,
            row_attrib["type"],
        )

    else:
        python_file.write(
            f"""            try:
                new_record.{row_name} = row.attrib["{row_name}"]
            except KeyError:
                pass\n"""
        )


def _get_details(python_file, model_name, row_name, xml_type):
    fk_template = (
        "            new_record.{row_name} = mip_dr_models.{linked_table}"
        '.objects.filter(\n                uid=UUID_MAPPING[attribs["{row_name}"].'
        "lower()]\n            )[0]\n"
    )
    if row_name == "cmid":
        python_file.write(
            fk_template.format(row_name=row_name, linked_table="CellMethods")
        )
    elif row_name == "egid":
        python_file.write(
            fk_template.format(row_name=row_name, linked_table="Exptgroup")
        )
    # elif row_name == "esid":
    # python_file.write(fk_template.format(row_name=row_name, linked_table="Experiment")
    elif row_name == "gpid":
        python_file.write(
            fk_template.format(row_name=row_name, linked_table="Miptable")
        )
    elif row_name == "mip":
        python_file.write(fk_template.format(row_name=row_name, linked_table="Mip"))
    elif row_name == "mtid":
        python_file.write(
            fk_template.format(row_name=row_name, linked_table="Miptable")
        )
    elif row_name == "oid":
        python_file.write(
            fk_template.format(row_name=row_name, linked_table="Objective")
        )
    elif row_name == "provmip":
        python_file.write(fk_template.format(row_name=row_name, linked_table="Mip"))
    elif row_name == "refid":
        python_file.write(
            fk_template.format(row_name=row_name, linked_table="RequestVarGroup")
        )
    elif row_name == "rlid":
        python_file.write(
            fk_template.format(row_name=row_name, linked_table="RequestLink")
        )
    elif row_name == "rid":
        python_file.write(
            fk_template.format(row_name=row_name, linked_table="RequestLink")
        )
    elif row_name == "sn":
        python_file.write(
            fk_template.format(row_name=row_name, linked_table="Standardname")
        )
    elif row_name == "spid":
        python_file.write(
            fk_template.format(row_name=row_name, linked_table="SpatialShape")
        )
    elif row_name == "stid":
        python_file.write(
            fk_template.format(row_name=row_name, linked_table="Structure")
        )
    elif row_name == "tmid":
        python_file.write(
            fk_template.format(row_name=row_name, linked_table="TemporalShape")
        )
    elif row_name == "unid":
        python_file.write(fk_template.format(row_name=row_name, linked_table="Units"))
    elif row_name == "vid" and model_name == "CMORvar":
        python_file.write(fk_template.format(row_name=row_name, linked_table="Var"))
    elif row_name == "vid":
        python_file.write(fk_template.format(row_name=row_name, linked_table="CMORvar"))
    elif row_name == "vgid":
        python_file.write(
            fk_template.format(row_name=row_name, linked_table="RequestVarGroup")
        )

    elif row_name == "class_name":
        python_file.write(
            f'            new_record.{row_name} = _get_bool(attribs["class"])\n'
        )

    elif xml_type == "xs:boolean":
        python_file.write(
            f'            new_record.{row_name} = _get_bool(attribs["{row_name}"])\n'
        )

    else:
        python_file.write(
            f'            new_record.{row_name} = attribs["{row_name}"]\n'
        )


def _get_required(required):
    if required.lower() == "true":
        return True
    return False


def main():
    with open("import_data.py", "w") as python_file:
        _write_header(python_file)

        xml_string = _read_url(DREQ_SUPP_DEF_XML)
        tables = _process_xml(python_file, xml_string)

        xml_string = _read_url(DREQ_DEF_XML)
        tables.extend(_process_xml(python_file, xml_string))

        python_file.write("\n\n\ndef _delete_data():")

        for table in tables:
            model_name = table[0].upper() + table[1:]
            python_file.write(
                f"\n    mip_dr_models.{model_name}.objects.all().delete()"
            )

        _write_body(python_file, tables)
        _write_main(python_file)


if __name__ == "__main__":
    main()
