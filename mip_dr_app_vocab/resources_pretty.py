"""
This resource.py file was generated by the script generate_models_from_xml.py

"""
from import_export import resources
from import_export.fields import Field
from import_export.widgets import ForeignKeyWidget, ManyToManyWidget

from mip_dr_app_vocab import models


class VerboseExportMixin:
    """Export with verbose name"""
    def get_export_headers(self):
        vnames = {i.name: i.verbose_name for i in self.Meta.model._meta.fields}
        return [vnames.get(i.split("__")[0], i) for i in super().get_export_headers()]


class UnitsResource(VerboseExportMixin, resources.ModelResource):

    class Meta:
        model = models.Units
        import_id_fields = ('uid',)
        skip_unchanged = True
        report_skipped = True


class MiptableResource(VerboseExportMixin, resources.ModelResource):

    class Meta:
        model = models.Miptable
        import_id_fields = ('uid',)
        skip_unchanged = True
        report_skipped = True


class MipResource(VerboseExportMixin, resources.ModelResource):

    class Meta:
        model = models.Mip
        import_id_fields = ('uid',)
        skip_unchanged = True
        report_skipped = True


class RequestVarGroupResource(VerboseExportMixin, resources.ModelResource):
    mip = Field(
        column_name='mip',
        attribute='mip',
        widget=ForeignKeyWidget(model=models.Mip, field='label'))

    class Meta:
        model = models.RequestVarGroup
        import_id_fields = ('uid',)
        skip_unchanged = True
        report_skipped = True


class ExptgroupResource(VerboseExportMixin, resources.ModelResource):

    class Meta:
        model = models.Exptgroup
        import_id_fields = ('uid',)
        skip_unchanged = True
        report_skipped = True


class RequestLinkResource(VerboseExportMixin, resources.ModelResource):
    mip = Field(
        column_name='mip',
        attribute='mip',
        widget=ForeignKeyWidget(model=models.Mip, field='label'))
    refid = Field(
        column_name='refid',
        attribute='refid',
        widget=ForeignKeyWidget(model=models.RequestVarGroup, field='label'))

    class Meta:
        model = models.RequestLink
        import_id_fields = ('uid',)
        skip_unchanged = True
        report_skipped = True


class ExperimentResource(VerboseExportMixin, resources.ModelResource):
    egid = Field(
        column_name='egid',
        attribute='egid',
        widget=ForeignKeyWidget(model=models.Exptgroup, field='label'))
    mip = Field(
        column_name='mip',
        attribute='mip',
        widget=ForeignKeyWidget(model=models.Mip, field='label'))

    class Meta:
        model = models.Experiment
        import_id_fields = ('uid',)
        skip_unchanged = True
        report_skipped = True


class GridsResource(VerboseExportMixin, resources.ModelResource):

    class Meta:
        model = models.Grids
        import_id_fields = ('uid',)
        skip_unchanged = True
        report_skipped = True


class RequestItemResource(VerboseExportMixin, resources.ModelResource):
    mip = Field(
        column_name='mip',
        attribute='mip',
        widget=ForeignKeyWidget(model=models.Mip, field='label'))
    rlid = Field(
        column_name='rlid',
        attribute='rlid',
        widget=ForeignKeyWidget(model=models.RequestLink, field='label'))

    class Meta:
        model = models.RequestItem
        import_id_fields = ('uid',)
        skip_unchanged = True
        report_skipped = True


class ObjectiveResource(VerboseExportMixin, resources.ModelResource):
    mip = Field(
        column_name='mip',
        attribute='mip',
        widget=ForeignKeyWidget(model=models.Mip, field='label'))

    class Meta:
        model = models.Objective
        import_id_fields = ('uid',)
        skip_unchanged = True
        report_skipped = True


class SpatialShapeResource(VerboseExportMixin, resources.ModelResource):
    dimids = Field(
        column_name='Grids',
        attribute='dimids',
        widget=ManyToManyWidget(model=models.Grids, separator='|', field='label'))

    class Meta:
        model = models.SpatialShape
        import_id_fields = ('uid',)
        skip_unchanged = True
        report_skipped = True


class ModelConfigResource(VerboseExportMixin, resources.ModelResource):

    class Meta:
        model = models.ModelConfig
        import_id_fields = ('uid',)
        skip_unchanged = True
        report_skipped = True


class ObjectiveLinkResource(VerboseExportMixin, resources.ModelResource):
    oid = Field(
        column_name='oid',
        attribute='oid',
        widget=ForeignKeyWidget(model=models.Objective, field='label'))
    rid = Field(
        column_name='rid',
        attribute='rid',
        widget=ForeignKeyWidget(model=models.RequestLink, field='label'))

    class Meta:
        model = models.ObjectiveLink
        import_id_fields = ('uid',)
        skip_unchanged = True
        report_skipped = True


class RemarksResource(VerboseExportMixin, resources.ModelResource):
    tid = Field(
        column_name='tid',
        attribute='tid',
        widget=ForeignKeyWidget(model=models.Grids, field='label'))

    class Meta:
        model = models.Remarks
        import_id_fields = ('uid',)
        skip_unchanged = True
        report_skipped = True


class StandardnameResource(VerboseExportMixin, resources.ModelResource):

    class Meta:
        model = models.Standardname
        import_id_fields = ('uid',)
        skip_unchanged = True
        report_skipped = True


class VarResource(VerboseExportMixin, resources.ModelResource):
    provmip = Field(
        column_name='provmip',
        attribute='provmip',
        widget=ForeignKeyWidget(model=models.Mip, field='label'))
    unid = Field(
        column_name='unid',
        attribute='unid',
        widget=ForeignKeyWidget(model=models.Units, field='text'))
    sn = Field(
        column_name='sn',
        attribute='sn',
        widget=ForeignKeyWidget(model=models.Units, field='title'))

    class Meta:
        model = models.Var
        import_id_fields = ('uid',)
        skip_unchanged = True
        report_skipped = True


class VarChoiceResource(VerboseExportMixin, resources.ModelResource):

    class Meta:
        model = models.VarChoice
        import_id_fields = ('uid',)
        skip_unchanged = True
        report_skipped = True


class TemporalShapeResource(VerboseExportMixin, resources.ModelResource):
    dimid = Field(
        column_name='dimid',
        attribute='dimid',
        widget=ForeignKeyWidget(model=models.Grids, field='label'))

    class Meta:
        model = models.TemporalShape
        import_id_fields = ('uid',)
        skip_unchanged = True
        report_skipped = True


class TimeSliceResource(VerboseExportMixin, resources.ModelResource):

    class Meta:
        model = models.TimeSlice
        import_id_fields = ('uid',)
        skip_unchanged = True
        report_skipped = True


class CellMethodsResource(VerboseExportMixin, resources.ModelResource):

    class Meta:
        model = models.CellMethods
        import_id_fields = ('uid',)
        skip_unchanged = True
        report_skipped = True


class StructureResource(VerboseExportMixin, resources.ModelResource):
    spid = Field(
        column_name='spid',
        attribute='spid',
        widget=ForeignKeyWidget(model=models.SpatialShape, field='label'))
    tmid = Field(
        column_name='tmid',
        attribute='tmid',
        widget=ForeignKeyWidget(model=models.TemporalShape, field='label'))
    dids = Field(
        column_name='Grids Dimensions',
        attribute='dids',
        widget=ManyToManyWidget(model=models.Grids, separator='|', field='label'))
    cids = Field(
        column_name='Grid Coordinates',
        attribute='cids',
        widget=ManyToManyWidget(model=models.Grids, separator='|', field='label'))
    cmid = Field(
        column_name='cmid',
        attribute='cmid',
        widget=ForeignKeyWidget(model=models.CellMethods, field='label'))

    class Meta:
        model = models.Structure
        import_id_fields = ('uid',)
        skip_unchanged = True
        report_skipped = True


class CMORvarResource(VerboseExportMixin, resources.ModelResource):
    stid = Field(
        column_name='stid',
        attribute='stid',
        widget=ForeignKeyWidget(model=models.Structure, field='label'))
    vid = Field(
        column_name='vid',
        attribute='vid',
        widget=ForeignKeyWidget(model=models.Var, field='label'))
    mtid = Field(
        column_name='mtid',
        attribute='mtid',
        widget=ForeignKeyWidget(model=models.Miptable, field='label'))

    class Meta:
        model = models.CMORvar
        import_id_fields = ('uid',)
        skip_unchanged = True
        report_skipped = True


class VarChoiceLinkCResource(VerboseExportMixin, resources.ModelResource):
    vid = Field(
        column_name='vid',
        attribute='vid',
        widget=ForeignKeyWidget(model=models.CMORvar, field='label'))
    cfgid = Field(
        column_name='cfgid',
        attribute='cfgid',
        widget=ForeignKeyWidget(model=models.ModelConfig, field='label'))
    cid = Field(
        column_name='cid',
        attribute='cid',
        widget=ForeignKeyWidget(model=models.VarChoice, field='label'))

    class Meta:
        model = models.VarChoiceLinkC
        import_id_fields = ('uid',)
        skip_unchanged = True
        report_skipped = True


class RequestVarResource(VerboseExportMixin, resources.ModelResource):
    vid = Field(
        column_name='vid',
        attribute='vid',
        widget=ForeignKeyWidget(model=models.CMORvar, field='label'))
    vgid = Field(
        column_name='vgid',
        attribute='vgid',
        widget=ForeignKeyWidget(model=models.RequestVarGroup, field='label'))
    mip = Field(
        column_name='mip',
        attribute='mip',
        widget=ForeignKeyWidget(model=models.Mip, field='label'))

    class Meta:
        model = models.RequestVar
        import_id_fields = ('uid',)
        skip_unchanged = True
        report_skipped = True


class VarChoiceLinkRResource(VerboseExportMixin, resources.ModelResource):
    vid = Field(
        column_name='vid',
        attribute='vid',
        widget=ForeignKeyWidget(model=models.CMORvar, field='label'))
    cid = Field(
        column_name='cid',
        attribute='cid',
        widget=ForeignKeyWidget(model=models.VarChoice, field='label'))

    class Meta:
        model = models.VarChoiceLinkR
        import_id_fields = ('uid',)
        skip_unchanged = True
        report_skipped = True


class TableSectionResource(VerboseExportMixin, resources.ModelResource):
    gpid = Field(
        column_name='gpid',
        attribute='gpid',
        widget=ForeignKeyWidget(model=models.Miptable, field='label'))
    mip = Field(
        column_name='mip',
        attribute='mip',
        widget=ForeignKeyWidget(model=models.Mip, field='label'))

    class Meta:
        model = models.TableSection
        import_id_fields = ('uid',)
        skip_unchanged = True
        report_skipped = True


class QcrangesResource(VerboseExportMixin, resources.ModelResource):
    vid = Field(
        column_name='vid',
        attribute='vid',
        widget=ForeignKeyWidget(model=models.CMORvar, field='label'))

    class Meta:
        model = models.Qcranges
        import_id_fields = ('uid',)
        skip_unchanged = True
        report_skipped = True


class PlacesResource(VerboseExportMixin, resources.ModelResource):
    mip = Field(
        column_name='mip',
        attribute='mip',
        widget=ForeignKeyWidget(model=models.Mip, field='label'))
    vid = Field(
        column_name='vid',
        attribute='vid',
        widget=ForeignKeyWidget(model=models.CMORvar, field='label'))

    class Meta:
        model = models.Places
        import_id_fields = ('uid',)
        skip_unchanged = True
        report_skipped = True


class TransfersResource(VerboseExportMixin, resources.ModelResource):
    frid = Field(
        column_name='frid',
        attribute='frid',
        widget=ForeignKeyWidget(model=models.Places, field='label'))
    toid = Field(
        column_name='toid',
        attribute='toid',
        widget=ForeignKeyWidget(model=models.Places, field='label'))
    mip = Field(
        column_name='mip',
        attribute='mip',
        widget=ForeignKeyWidget(model=models.Mip, field='label'))
    vid = Field(
        column_name='vid',
        attribute='vid',
        widget=ForeignKeyWidget(model=models.CMORvar, field='label'))

    class Meta:
        model = models.Transfers
        import_id_fields = ('uid',)
        skip_unchanged = True
        report_skipped = True


def get_resource(name):
    if name == "Units":
        return UnitsResource()
    if name == "Miptable":
        return MiptableResource()
    if name == "Mip":
        return MipResource()
    if name == "RequestVarGroup":
        return RequestVarGroupResource()
    if name == "Exptgroup":
        return ExptgroupResource()
    if name == "RequestLink":
        return RequestLinkResource()
    if name == "Experiment":
        return ExperimentResource()
    if name == "Grids":
        return GridsResource()
    if name == "RequestItem":
        return RequestItemResource()
    if name == "Objective":
        return ObjectiveResource()
    if name == "SpatialShape":
        return SpatialShapeResource()
    if name == "ModelConfig":
        return ModelConfigResource()
    if name == "ObjectiveLink":
        return ObjectiveLinkResource()
    if name == "Remarks":
        return RemarksResource()
    if name == "Standardname":
        return StandardnameResource()
    if name == "Var":
        return VarResource()
    if name == "VarChoice":
        return VarChoiceResource()
    if name == "TemporalShape":
        return TemporalShapeResource()
    if name == "TimeSlice":
        return TimeSliceResource()
    if name == "CellMethods":
        return CellMethodsResource()
    if name == "Structure":
        return StructureResource()
    if name == "CMORvar":
        return CMORvarResource()
    if name == "VarChoiceLinkC":
        return VarChoiceLinkCResource()
    if name == "RequestVar":
        return RequestVarResource()
    if name == "VarChoiceLinkR":
        return VarChoiceLinkRResource()
    if name == "TableSection":
        return TableSectionResource()
    if name == "Qcranges":
        return QcrangesResource()
    if name == "Places":
        return PlacesResource()
    if name == "Transfers":
        return TransfersResource()
