# Generated by Django 4.1.2 on 2023-05-23 07:53

from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='CellMethods',
            fields=[
                ('label', models.CharField(help_text='Mnemonic label for record', max_length=50, verbose_name='Record Label')),
                ('title', models.CharField(help_text='Title of record', max_length=50, verbose_name='Record Title')),
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record Identifier')),
                ('cell_methods', models.CharField(help_text='The string to be used in the NetCDF cell_methods attribute', max_length=50, verbose_name='Cell Methods String')),
                ('description', models.CharField(blank=True, max_length=50, null=True, verbose_name='Record Description')),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('date_published', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': '7.1 Cell Methods',
                'verbose_name_plural': '7.1 Cell Methods',
            },
        ),
        migrations.CreateModel(
            name='CMORvar',
            fields=[
                ('label', models.CharField(help_text='Mnemonic label for record', max_length=50, verbose_name='Record Label')),
                ('title', models.CharField(help_text='Title of record', max_length=50, verbose_name='Record Title')),
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record Identifier')),
                ('deflate', models.CharField(help_text='Obsolete, not used in CMIP6.', max_length=50, verbose_name='Deflate: NetCDF compression parameter')),
                ('deflate_level', models.CharField(help_text='Obsolete, not used in CMIP6.', max_length=50, verbose_name='Deflate Level: NetCDF compression parameter')),
                ('shuffle', models.CharField(help_text='Obsolete, not used in CMIP6.', max_length=50, verbose_name='Shuffle: NetCDF compression parameter')),
                ('defaultPriority', models.IntegerField(help_text='For the priority of requested data, the priority attribute of the requestVar section should be used.', verbose_name='Indicative priority for this parameter, which is over-ruled by the requestVar priority setting, but provides a reference for organisation of the CMORvariables')),
                ('type', models.CharField(help_text='Data type is specified using Fortran code words: character, double, integer, real', max_length=50, verbose_name='Data value type, e.g. float or double')),
                ('modeling_realm', models.CharField(help_text='A string that  indicates the high level modeling component  which is particularly relevant.  Note  that  sometimes  a  variable  will  be  equally  (or  almost  equally  relevant)  to  two  or  more  realms,  in  which  case  a  primary  realm  is  assigned as the first listed and other relevant realms follow in a space separated list.', max_length=50, verbose_name='Modeling Realm')),
                ('positive', models.CharField(help_text="For any variable where the DREQ has specified a value for 'positive', CMOR requires users to say whether the data they're giving CMOR assumes 'positive is up' or 'positive is down'. If the user's direction is opposite what is requested by DREQ, CMOR multiplies the data by -1 before storing it, so that it will conform with the specifications.", max_length=50, verbose_name='CMOR Directive Positive')),
                ('mipTableSection', models.CharField(blank=True, help_text='Some MIP tables are divided into subsections containing different categories of variables.', max_length=50, null=True, verbose_name='Section of a table')),
                ('mipTable', models.CharField(help_text='Each table identifies a collection of variables with a common frequency.', max_length=50, verbose_name='The MIP table')),
                ('prov', models.CharField(help_text='Provides some indication of the origins of the parameter definition (e.g. the MIP responsible for first defining the variable). Once defined, a variable may be requested by multiple MIPs.', max_length=50, verbose_name='Provenance')),
                ('processing', models.CharField(blank=True, help_text='Processing notes (questions and issues)', max_length=50, null=True, verbose_name='Processing Notes')),
                ('provNote', models.CharField(help_text='Additional information on provenance, intended to be machine interpretable.', max_length=50, verbose_name='Provenance Note')),
                ('frequency', models.CharField(help_text='See https://earthsystemcog.org/projects/wip/time_of_day for details of time of day for sub-hourly frequencies.', max_length=50, verbose_name='Frequency of Time Steps to be Archived')),
                ('rowIndex', models.IntegerField(help_text='Information about source of information.', verbose_name='Row index of entry in source sheet')),
                ('description', models.CharField(max_length=50, verbose_name='Description')),
                ('subGroup', models.CharField(blank=True, help_text='Identify a sub-group, for ease of processing. A sub-group can be copied to a request variable group.', max_length=50, null=True, verbose_name='Sub-group of variables in a table')),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('date_published', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': '1.3 CMOR Variable',
                'verbose_name_plural': '1.3 CMOR Variable',
            },
        ),
        migrations.CreateModel(
            name='Exptgroup',
            fields=[
                ('label', models.CharField(help_text='Mnemonic label for record', max_length=50, verbose_name='Record Label')),
                ('title', models.CharField(help_text='Title of record', max_length=50, verbose_name='Record Title')),
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record identifier')),
                ('tierMin', models.IntegerField(help_text='Minimum tier of experiments associated with this group.', verbose_name='Minimum tier of experiments in group')),
                ('ntot', models.IntegerField(help_text='Total number of simulation years associated with experiments in this group.', verbose_name='Total number of years')),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('date_published', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': '1.9 Experiment Group',
                'verbose_name_plural': '1.9 Experiment Group',
            },
        ),
        migrations.CreateModel(
            name='Grids',
            fields=[
                ('label', models.CharField(help_text='Mnemonic label for record', max_length=50, verbose_name='Record Label')),
                ('title', models.CharField(help_text='Title of record', max_length=50, verbose_name='Record Title')),
                ('tables', models.CharField(help_text='List of tables which make use of this dimension', max_length=50, verbose_name='CMOR table(s)')),
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Identifier')),
                ('altLabel', models.CharField(help_text='Name used for the dimension in NetCDF files', max_length=50, verbose_name='output dimension name')),
                ('description', models.CharField(max_length=50, verbose_name='description')),
                ('standardName', models.CharField(blank=True, help_text='Standard Name from the CF Conventions, used for the standard_name attribute of the axis variable.', max_length=50, null=True, verbose_name='standard name')),
                ('axis', models.CharField(help_text='For spatial or temporal dimensions, set to X, Y, Z or T.', max_length=50, verbose_name='axis')),
                ('units', models.CharField(help_text='Units of measure used for the axis data variable.', max_length=50, verbose_name='units')),
                ('isIndex', models.CharField(help_text="Set to 'OK' if the axis is an index axis with no coordinate values. Used, for example, for the generic vertical coordinates in the atmosphere, 'alev'.", max_length=50, verbose_name='index axis?')),
                ('coords', models.CharField(max_length=50, verbose_name='coords_attrib')),
                ('bounds', models.CharField(max_length=50, verbose_name='bounds?')),
                ('direction', models.CharField(help_text='decreasing, increasing or empty', max_length=50, verbose_name='stored direction')),
                ('valid_min', models.FloatField(blank=True, null=True, verbose_name='valid_min')),
                ('valid_max', models.FloatField(blank=True, null=True, verbose_name='valid_max')),
                ('type', models.CharField(help_text='Data type is specified using Fortran code words: character, double, integer, real', max_length=50, verbose_name='type')),
                ('positive', models.CharField(max_length=50, verbose_name='positive')),
                ('value', models.CharField(help_text='This attribute is only for scalar coordinates. Otherwise use *requested*', max_length=50, verbose_name='value of a scalar coordinate')),
                ('boundsValues', models.CharField(max_length=50, verbose_name='bounds _values')),
                ('requested', models.CharField(max_length=50, verbose_name='requested')),
                ('boundsRequested', models.CharField(blank=True, max_length=50, null=True, verbose_name='bounds_ requested')),
                ('tolRequested', models.CharField(max_length=50, verbose_name='tol_on_requests: variance from requested values that is tolerated')),
                ('isGrid', models.CharField(max_length=50, verbose_name='grid?')),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('date_published', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': '1.7 Specification of dimensions',
                'verbose_name_plural': '1.7 Specification of dimensions',
            },
        ),
        migrations.CreateModel(
            name='Mip',
            fields=[
                ('label', models.CharField(help_text='Mnemonic label for record', max_length=50, verbose_name='Record Label')),
                ('title', models.CharField(help_text='Title of record', max_length=50, verbose_name='Record Title')),
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record identifier')),
                ('description', models.CharField(blank=True, max_length=50, null=True, verbose_name='Description of the Model Intercomparison Project')),
                ('url', models.URLField(help_text='Link to external site', verbose_name='Project Home Page')),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('date_published', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': '1.1 Model Intercomparison Project',
                'verbose_name_plural': '1.1 Model Intercomparison Project',
            },
        ),
        migrations.CreateModel(
            name='Miptable',
            fields=[
                ('label', models.CharField(help_text='Mnemonic label for record', max_length=50, verbose_name='Record Label')),
                ('title', models.CharField(help_text='Title of record', max_length=50, verbose_name='Record Title')),
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record identifier')),
                ('description', models.CharField(max_length=50, verbose_name='Description')),
                ('frequency', models.CharField(help_text='Frequency of data variables defined in this table. Note that this has not been updated to reflect changes in the definition of the CMIP frequency controlled attribute. There are now multiple frequency values in each table.', max_length=50, verbose_name='Frequency')),
                ('altLabel', models.CharField(help_text='Depricated: holds old form of the table label. Used for tracking changes.', max_length=50, verbose_name='Alternative Label')),
                ('comment', models.CharField(help_text='Comment about the table.', max_length=50, verbose_name='Comment')),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('date_published', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': '2.4 MIP tables',
                'verbose_name_plural': '2.4 MIP tables',
            },
        ),
        migrations.CreateModel(
            name='ModelConfig',
            fields=[
                ('label', models.CharField(help_text='Mnemonic label for record', max_length=50, verbose_name='Record Label')),
                ('title', models.CharField(help_text='Title of record', max_length=50, verbose_name='Record Title')),
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record identifier')),
                ('MIPs', models.CharField(help_text='List of MIPs using this option.', max_length=50, verbose_name='MIPs which make use of this feature')),
                ('usage', models.CharField(help_text='Usage notes.', max_length=50, verbose_name='How the feature is relevant to the data request')),
                ('type', models.CharField(help_text='A categorisation of model configuration options: capability (indicating whether a model has a specific capability); size (indicating a size, such as number of grid points); category (inidcating a type of model);  ioOption (indicating a choice taken regarding IO).', max_length=50, verbose_name='Type of model')),
                ('range', models.CharField(help_text="Specification of the value type, e.g. 'xs:boolean'.", max_length=50, verbose_name='Range of valid values, e.g. xs:boolean')),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('date_published', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': '3.5 Model configuration options',
                'verbose_name_plural': '3.5 Model configuration options',
            },
        ),
        migrations.CreateModel(
            name='Objective',
            fields=[
                ('label', models.CharField(help_text='Mnemonic label for record', max_length=50, verbose_name='Record Label')),
                ('title', models.CharField(help_text='Title of record', max_length=50, verbose_name='Record Title')),
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record identifier')),
                ('description', models.CharField(max_length=50, verbose_name='Description')),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('date_published', models.DateTimeField(auto_now_add=True)),
                ('mip', models.ForeignKey(help_text='Link to Model Intercomparison Project with this objective.', on_delete=django.db.models.deletion.CASCADE, to='mip_dr_app_vocab.mip', verbose_name='Endorsed MIP')),
            ],
            options={
                'verbose_name': '1.6 Scientific objectives',
                'verbose_name_plural': '1.6 Scientific objectives',
            },
        ),
        migrations.CreateModel(
            name='Places',
            fields=[
                ('label', models.CharField(help_text='Mnemonic label for record', max_length=50, verbose_name='Record Label')),
                ('title', models.CharField(help_text='Title of record', max_length=50, verbose_name='Record Title')),
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Identifier')),
                ('matter', models.CharField(max_length=50, verbose_name='Substance')),
                ('pid', models.CharField(blank=True, help_text='A place, state or reservoir containing this one.', max_length=50, null=True, verbose_name='Parent Entity')),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('date_published', models.DateTimeField(auto_now_add=True)),
                ('mip', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mip_dr_app_vocab.mip', verbose_name='Model Intercomparison Project (MIP)')),
                ('vid', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='mip_dr_app_vocab.cmorvar', verbose_name='Variable Identifier')),
            ],
            options={
                'verbose_name': 'Places, States or Reservoirs',
                'verbose_name_plural': 'Places, States or Reservoirs',
            },
        ),
        migrations.CreateModel(
            name='SpatialShape',
            fields=[
                ('label', models.CharField(help_text='Mnemonic label for record', max_length=50, verbose_name='Record Label')),
                ('title', models.CharField(help_text='Title of record', max_length=50, verbose_name='Record Title')),
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record Identifier')),
                ('dimensions', models.CharField(help_text='List of the labels of dimension attributes (redundant with dimids).', max_length=50, verbose_name='List of spatial dimensions')),
                ('levels', models.IntegerField(help_text='The number of vertical levels, if fixed.', verbose_name='Number of vertical levels (ignored if levelFlag=false)')),
                ('levelFlag', models.BooleanField(help_text="True is there is a fixed number of levels specified by the 'levels' attribute.", verbose_name='Flag set to *false* if number of levels is optional (e.g. determined by the model)')),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('date_published', models.DateTimeField(auto_now_add=True)),
                ('dimids', models.ManyToManyField(help_text='List of links to dimensions specified by records in the grids section.', related_name='grids', to='mip_dr_app_vocab.grids')),
            ],
            options={
                'verbose_name': '2.1 Spatial dimensions',
                'verbose_name_plural': '2.1 Spatial dimensions',
            },
        ),
        migrations.CreateModel(
            name='Standardname',
            fields=[
                ('label', models.CharField(help_text='Mnemonic label for record', max_length=50, verbose_name='Record Label')),
                ('title', models.CharField(help_text='Title of record', max_length=50, verbose_name='Record Title')),
                ('uid', models.CharField(editable=False, max_length=100, primary_key=True, serialize=False, verbose_name='CF Standard Name')),
                ('description', models.CharField(max_length=50, verbose_name='Record Description')),
                ('units', models.CharField(help_text="The canonical units provide reference unit of measure. Any variable using the standard name should us units which conform with the canonical units. For example, if the canonical units are 'm' (metres) then 'km' (kilometres) would be valid variable units.", max_length=50, verbose_name='Canonical Units')),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('date_published', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': '1.8 CF Standard Names',
                'verbose_name_plural': '1.8 CF Standard Names',
            },
        ),
        migrations.CreateModel(
            name='TimeSlice',
            fields=[
                ('label', models.CharField(help_text='Mnemonic label for record', max_length=50, verbose_name='Record Label')),
                ('title', models.CharField(help_text='Title of record', max_length=50, verbose_name='Record Title')),
                ('type', models.CharField(help_text="This is a string indicating how the year selection is described: 'simpleRange' is a single span of years indicated by a start and duration; 'yearList' is a collection of single years indicated by a start, number of years and a step; 'sliceList' is a list of multi-year time slices, indicated by a start year, a slice length, a total number of years (which must be an integer multiple of the slice length) and a step between slice starts; 'dayList' specifies a list of days as y/m/d triples; 'monthlyClimatology' implies 12 monthly values averaged over a specified range of years; 'relativeRange' specifies a range of years relative to the start of the simulation; 'branchedYears' specifies a list of years relative to a time in a branched experiment (can also be used for a climatology); 'siblingBranchClimatology' refers to a slice tied to years in another experiment branched from the same parent .. usually historical; 'monthlyClimatologyFinal' refers to a climatology over a final range of years (start and end should be blank).", max_length=50, verbose_name='Type of time slice')),
                ('start', models.IntegerField(blank=True, help_text='First year of the time slice. Blank if a startList is given.', null=True, verbose_name='Start year')),
                ('end', models.IntegerField(blank=True, help_text='Last year of the time slice. Blank if a startList is given.', null=True, verbose_name='End year')),
                ('step', models.FloatField(blank=True, help_text="The step, in years, between different years in a 'yearList' or different start years in a 'sliceList' or 'sliceListExt'.", null=True, verbose_name='Step (years)')),
                ('sliceLen', models.IntegerField(blank=True, help_text="Length of slice if less than the full range from start to end. Units specified by 'sliceLenUnit' if present, otherwise in years.", null=True, verbose_name='Length of slice')),
                ('nyears', models.FloatField(blank=True, help_text='Total number of years. Leave blank for dayList. For sliceList, the number of discrete slices is given by nyears divided by sliceLen. Otherwise, nyears should be equal to start minus end plus one.', null=True, verbose_name='Total number of years')),
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Unique identifier')),
                ('startList', models.CharField(blank=True, help_text="If type is 'dayList', then a list of (year,month,day) triples can be specified. E.g. '1850 1 1 1850 4 1' for first January and April 1850. If this value is given, start and end attributes should be empty.", max_length=50, null=True, verbose_name='Optional list of start times.')),
                ('sliceLenUnit', models.CharField(blank=True, help_text='The units used to specify the slice length. Set to years if left blank.', max_length=50, null=True, verbose_name='Units of slice length')),
                ('description', models.CharField(blank=True, max_length=50, null=True, verbose_name='Description')),
                ('child', models.CharField(blank=True, help_text='For type branchOffsetRange, the child attribute carries the name of the experiment which is branched. The time range is then specified in terms of the years in the child experiment.', max_length=50, null=True, verbose_name='Child experiment')),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('date_published', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': '3.11 Time Slices for Output Requests',
                'verbose_name_plural': '3.11 Time Slices for Output Requests',
            },
        ),
        migrations.CreateModel(
            name='Units',
            fields=[
                ('label', models.CharField(help_text='Mnemonic label for record', max_length=50, verbose_name='Record Label')),
                ('title', models.CharField(help_text='Title of record', max_length=50, verbose_name='Record Title')),
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Identifier')),
                ('group', models.CharField(blank=True, help_text='A group, designated by a string value, expresses a relationship between units.', max_length=50, null=True, verbose_name='Group')),
                ('text', models.CharField(help_text='Plain text representation with no special characters', max_length=50, verbose_name='Text representation of units')),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('date_published', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Units',
                'verbose_name_plural': 'Units',
            },
        ),
        migrations.CreateModel(
            name='VarChoice',
            fields=[
                ('label', models.CharField(help_text='Mnemonic label for record', max_length=50, verbose_name='Record Label')),
                ('title', models.CharField(help_text='Title of record', max_length=50, verbose_name='Record Title')),
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record identifier')),
                ('choiceClass', models.CharField(help_text="Specifies which class of choice this is. 'ConfigurationOptionSet' (a set of variables for which the choice depends on some aspect of model configuration) or 'RedundancySet' (a set of variables which have some mutual redundancy, such as having overlapping sets of pressure levels).", max_length=50, verbose_name='Class of choice: heirarchy|cfg')),
                ('description', models.CharField(max_length=50, verbose_name='Record description')),
                ('varList', models.CharField(help_text='A list of the labels of the variables associated with this choice.', max_length=50, verbose_name='A colon separated list of variable names')),
                ('optionList', models.CharField(help_text='Redundant attribute: instructions are taken from rank attribute of varChoiceLinkR records.', max_length=50, verbose_name='A list of options, one for each variable')),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('date_published', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': '3.10 Indicates variables for which a there is a range of potential CMOR Variables',
                'verbose_name_plural': '3.10 Indicates variables for which a there is a range of potential CMOR Variables',
            },
        ),
        migrations.CreateModel(
            name='VarChoiceLinkR',
            fields=[
                ('label', models.CharField(help_text='Mnemonic label for record', max_length=50, verbose_name='Record Label')),
                ('title', models.CharField(help_text='Title of record', max_length=50, verbose_name='Record Title')),
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record identifier')),
                ('rank', models.IntegerField(help_text='Integer specifying the rank of the variable identified by vid. If multiple variables in the the choice group are requested, only the highest ranking variable needs to be provided.', verbose_name='For ranked choices, the rank of this variable (higher rank makes lower ranks redundant)')),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('date_published', models.DateTimeField(auto_now_add=True)),
                ('cid', models.ForeignKey(help_text='Link to a record identifying a choice group.', on_delete=django.db.models.deletion.CASCADE, to='mip_dr_app_vocab.varchoice', verbose_name='Choice')),
                ('vid', models.ForeignKey(help_text='Link to a record defining a variable.', on_delete=django.db.models.deletion.CASCADE, to='mip_dr_app_vocab.cmorvar', verbose_name='Variable')),
            ],
            options={
                'verbose_name': '3.9 Links a variable to a choice element',
                'verbose_name_plural': '3.9 Links a variable to a choice element',
            },
        ),
        migrations.CreateModel(
            name='VarChoiceLinkC',
            fields=[
                ('label', models.CharField(help_text='Mnemonic label for record', max_length=50, verbose_name='Record Label')),
                ('title', models.CharField(help_text='Title of record', max_length=50, verbose_name='Record Title')),
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record identifier')),
                ('cfg', models.BooleanField(help_text='Gives the configuration option value for which the variable linked from thos record should be used.', verbose_name='Configuration Value')),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('date_published', models.DateTimeField(auto_now_add=True)),
                ('cfgid', models.ForeignKey(help_text='A link to a record defining a model configuration options. Configuration options should be defined so that they are either True of False when a model is configured for execution. E.g. does the model have a Boussinesq ocean?', on_delete=django.db.models.deletion.CASCADE, to='mip_dr_app_vocab.modelconfig', verbose_name='Configuration Option')),
                ('cid', models.ForeignKey(help_text='Link to a record which  identifies the collection of related variables associated with this configuration option.', on_delete=django.db.models.deletion.CASCADE, to='mip_dr_app_vocab.varchoice', verbose_name='Choice -- can provide a link to related variables')),
                ('vid', models.ForeignKey(help_text='Link to a variable which should be treated as requested if the configuration option is appropriately set.', on_delete=django.db.models.deletion.CASCADE, to='mip_dr_app_vocab.cmorvar', verbose_name='Variable')),
            ],
            options={
                'verbose_name': '3.6 Links a variable to a choice element',
                'verbose_name_plural': '3.6 Links a variable to a choice element',
            },
        ),
        migrations.CreateModel(
            name='Var',
            fields=[
                ('label', models.CharField(help_text='Mnemonic label for record', max_length=50, verbose_name='Record Label')),
                ('title', models.CharField(help_text='Title of record', max_length=50, verbose_name='Record Title')),
                ('units', models.CharField(help_text='The units in which the variable is to be measured, as a short text string. They must conform with the canonical units of the CF Standard Name. A link to a record describing the units in more detail is given be the unid attribute.', max_length=50, verbose_name='Units of Measure')),
                ('description', models.CharField(max_length=50, verbose_name='Record Description')),
                ('procnote', models.CharField(help_text='Space separated list of keywords.', max_length=50, verbose_name='Processing Notes')),
                ('procComment', models.CharField(help_text='Free text comment about processing of the variable.', max_length=50, verbose_name='Processing Comments')),
                ('prov', models.CharField(help_text='Information on the provenance of the specification of this variables.', max_length=50, verbose_name='Notes on Provenance of Variable Specifications')),
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record Identifier')),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('date_published', models.DateTimeField(auto_now_add=True)),
                ('provmip', models.ForeignKey(help_text='The MIP responsible for the original definition of this quantity', on_delete=django.db.models.deletion.CASCADE, to='mip_dr_app_vocab.mip', verbose_name='MIP Defining this Variable')),
                ('sn', models.ForeignKey(help_text='The CF Standard Name is part of an extensive vocabulary maintained within the CF Convention.', on_delete=django.db.models.deletion.CASCADE, to='mip_dr_app_vocab.standardname', verbose_name='CF Standard Name')),
                ('unid', models.ForeignKey(help_text='Link to a unit description record.', on_delete=django.db.models.deletion.CASCADE, to='mip_dr_app_vocab.units', verbose_name='Link to Units section')),
            ],
            options={
                'verbose_name': '1.2 MIP Variable',
                'verbose_name_plural': '1.2 MIP Variable',
            },
        ),
        migrations.CreateModel(
            name='Transfers',
            fields=[
                ('label', models.CharField(help_text='Mnemonic label for record', max_length=50, verbose_name='Record Label')),
                ('title', models.CharField(help_text='Title of record', max_length=50, verbose_name='Record Title')),
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Identifier')),
                ('isOneWay', models.BooleanField(help_text='Set true if the flux is associated with a physical process which only transfers mass in one direction. E.g.', verbose_name='Unidirectional Flag')),
                ('signInverted', models.BooleanField(help_text='Sign Inverted should be set True for one way fluxes if the variable is defined to be negative definite. The competing constraints of CF Standard Name protocols and domain usage can cuase problems with the sign convention.', verbose_name='Sign Inversion')),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('date_published', models.DateTimeField(auto_now_add=True)),
                ('frid', models.ForeignKey(help_text="Identifier of the 'place' that the flux is from.", on_delete=django.db.models.deletion.CASCADE, related_name='source_identifier', to='mip_dr_app_vocab.places', verbose_name='Source Identifier')),
                ('mip', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mip_dr_app_vocab.mip', verbose_name='Model Intercomparison Project (MIP)')),
                ('toid', models.ForeignKey(help_text="Identifier of the 'place' that the flux is to.", on_delete=django.db.models.deletion.CASCADE, related_name='target_identifier', to='mip_dr_app_vocab.places', verbose_name='Target Identifier')),
                ('vid', models.ForeignKey(help_text="Identifier of the 'CMORvar' associated with the flux.", on_delete=django.db.models.deletion.CASCADE, to='mip_dr_app_vocab.cmorvar', verbose_name='Variable Identifier')),
            ],
            options={
                'verbose_name': 'Transfers of Material',
                'verbose_name_plural': 'Transfers of Material',
            },
        ),
        migrations.CreateModel(
            name='TemporalShape',
            fields=[
                ('label', models.CharField(help_text='Mnemonic label for record', max_length=50, verbose_name='Record Label')),
                ('title', models.CharField(help_text='Title of record', max_length=50, verbose_name='Record Title')),
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record Identifier')),
                ('dimensions', models.CharField(help_text='List of the labels of dimension attributes (redundant with dimids).', max_length=50, verbose_name='Dimensions')),
                ('description', models.CharField(blank=True, max_length=50, null=True, verbose_name='Description')),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('date_published', models.DateTimeField(auto_now_add=True)),
                ('dimid', models.ForeignKey(blank=True, help_text='List of links to dimensions specified by records in the grids section.', null=True, on_delete=django.db.models.deletion.CASCADE, to='mip_dr_app_vocab.grids', verbose_name='Identifiers for record in grids section')),
            ],
            options={
                'verbose_name': '2.2 Temporal dimension',
                'verbose_name_plural': '2.2 Temporal dimension',
            },
        ),
        migrations.CreateModel(
            name='TableSection',
            fields=[
                ('label', models.CharField(help_text='Mnemonic label for record', max_length=50, verbose_name='Record Label')),
                ('title', models.CharField(help_text='Title of record', max_length=50, verbose_name='Record Title')),
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record Identifier')),
                ('ref', models.CharField(blank=True, help_text='Comment on provenance.', max_length=50, null=True, verbose_name='Reference')),
                ('refNote', models.CharField(blank=True, help_text='Further information on provenance.', max_length=50, null=True, verbose_name='Note on reference')),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('date_published', models.DateTimeField(auto_now_add=True)),
                ('gpid', models.ForeignKey(help_text='Link to a record defining a CMOR table.', on_delete=django.db.models.deletion.CASCADE, to='mip_dr_app_vocab.miptable', verbose_name='Identifier for CMOR Tables')),
                ('mip', models.ForeignKey(help_text='Redundant. Specification of a MIP.', on_delete=django.db.models.deletion.CASCADE, to='mip_dr_app_vocab.mip', verbose_name='Project')),
            ],
            options={
                'verbose_name': '3.4 CMOR Table Sections',
                'verbose_name_plural': '3.4 CMOR Table Sections',
            },
        ),
        migrations.CreateModel(
            name='Structure',
            fields=[
                ('label', models.CharField(help_text='Mnemonic label for record', max_length=50, verbose_name='Record Label')),
                ('title', models.CharField(help_text='Title of record', max_length=50, verbose_name='Record Title')),
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record Identifier')),
                ('odims', models.CharField(blank=True, help_text='Dimensions other than temporal and spatial dimensions (redundant with dids).', max_length=50, null=True, verbose_name='Other Dimensions')),
                ('coords', models.CharField(blank=True, help_text='List of labels of coordinates. Redundant with cids.', max_length=50, null=True, verbose_name='Coordinates')),
                ('cell_methods', models.CharField(help_text='Text for the NetCDF cell_methods attribute: describes processing used to generate the data values (redundant with cmid).', max_length=50, verbose_name='Cell Methods')),
                ('cell_measures', models.CharField(help_text='This can be either a string value for inclusion in the NetCDF variable attribute cell_measures, or a directive. In the latter case it will be a single word, --OPT or --MODEL. The first of these indicates that the data may be provided either on the cell centres or on the cell boundaries. --MODEL indicates that the data should be provided at the cell locations used for that variable in the model code (e.g. cell vertices).', max_length=50, verbose_name='Cell Measures')),
                ('flag_values', models.CharField(help_text="If present, specifies values to be inlcuded in the 'flag_values' attribute.", max_length=50, verbose_name='Flag Values')),
                ('flag_meanings', models.CharField(help_text="If present, specifies values to be inlcuded in the 'flag_meanings' attribute.", max_length=50, verbose_name='FLag Meanings')),
                ('description', models.CharField(max_length=50, verbose_name='Description')),
                ('procNote', models.CharField(help_text='This is used to specify the category of structure. One of: areaType, areaTypeP, glsl, glslp, glslo, gm, h2mcm, misc, oneLevel, xyz, icesheet, xyzplus, zonaletc.', max_length=50, verbose_name='Processing Note')),
                ('prov', models.CharField(help_text='Information about the origins of this record.', max_length=50, verbose_name='Provenance')),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('date_published', models.DateTimeField(auto_now_add=True)),
                ('cids', models.ManyToManyField(help_text='List of links to the records defining coordinates (dimensions referenced from the variable coordinates attribute).', related_name='grid_coordinates', to='mip_dr_app_vocab.grids')),
                ('cmid', models.ForeignKey(help_text='Link to a cell methods record.', on_delete=django.db.models.deletion.CASCADE, to='mip_dr_app_vocab.cellmethods', verbose_name='Link to Cell Methods Record')),
                ('dids', models.ManyToManyField(help_text='List of links to the records defining dimensions other than spatial and temporal dimensions.', related_name='grids_dimensions', to='mip_dr_app_vocab.grids')),
                ('spid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mip_dr_app_vocab.spatialshape', verbose_name='Spatial Shape')),
                ('tmid', models.ForeignKey(help_text='Link to a temporalShape record, defining the temporal dimensions.', on_delete=django.db.models.deletion.CASCADE, to='mip_dr_app_vocab.temporalshape', verbose_name='Temporal Shape')),
            ],
            options={
                'verbose_name': '2.3 Dimensions and related information',
                'verbose_name_plural': '2.3 Dimensions and related information',
            },
        ),
        migrations.CreateModel(
            name='RequestVarGroup',
            fields=[
                ('label', models.CharField(help_text='Mnemonic label for record', max_length=50, verbose_name='Record Label')),
                ('title', models.CharField(help_text='Title of record', max_length=50, verbose_name='Record Title')),
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record Identifier')),
                ('ref', models.CharField(help_text='Information about the origins of this group', max_length=50, verbose_name='Reference')),
                ('refNote', models.CharField(help_text='Further information about the origins of this group.', max_length=50, verbose_name='Reference Note')),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('date_published', models.DateTimeField(auto_now_add=True)),
                ('mip', models.ForeignKey(help_text='Link to the MIP which specified this collection of variables. The collection may be re-used by other MIPs through the requestLink records.', on_delete=django.db.models.deletion.CASCADE, to='mip_dr_app_vocab.mip', verbose_name='Endorsed MIP defining the variable group')),
            ],
            options={
                'verbose_name': '3.1 Request variable group: a collection of request variables',
                'verbose_name_plural': '3.1 Request variable group: a collection of request variables',
            },
        ),
        migrations.CreateModel(
            name='RequestVar',
            fields=[
                ('label', models.CharField(help_text='Mnemonic label for record', max_length=50, verbose_name='Record Label')),
                ('title', models.CharField(help_text='Title of record', max_length=50, verbose_name='Record Title')),
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record identifier')),
                ('priority', models.IntegerField(help_text='The priority of the variable (1: high, 2: medium or 3: low). An indication of the importance of the variable for the science team requesting it.', verbose_name='Variable priority')),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('date_published', models.DateTimeField(auto_now_add=True)),
                ('mip', models.ForeignKey(help_text='Name of the Model Intercomparison Project requesting this variable.', on_delete=django.db.models.deletion.CASCADE, to='mip_dr_app_vocab.mip', verbose_name='Endorsed MIP')),
                ('vgid', models.ForeignKey(help_text='Link to a requestVarGroup record.', on_delete=django.db.models.deletion.CASCADE, to='mip_dr_app_vocab.requestvargroup', verbose_name='Identifier for Variable Group')),
                ('vid', models.ForeignKey(help_text='Link to a CMORvar record.', on_delete=django.db.models.deletion.CASCADE, to='mip_dr_app_vocab.cmorvar', verbose_name='Identifier for MIP Output Variable')),
            ],
            options={
                'verbose_name': '1.4 Request variable (carrying priority and link to group)',
                'verbose_name_plural': '1.4 Request variable (carrying priority and link to group)',
            },
        ),
        migrations.CreateModel(
            name='RequestLink',
            fields=[
                ('label', models.CharField(help_text='Mnemonic label for record', max_length=50, verbose_name='Record Label')),
                ('title', models.CharField(help_text='Title of record', max_length=50, verbose_name='Record Title')),
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record Identifier')),
                ('tab', models.CharField(blank=True, help_text='A redundant attribute.', max_length=50, null=True, verbose_name='Redundant')),
                ('objective', models.CharField(help_text='Every request for model ouput is linked to one or more objectives. The XML link is made via objectiveLink records, each of which associates one requestLink with one objective record.', max_length=50, verbose_name='Science objectives associated with this request')),
                ('grid', models.CharField(help_text='Specified required or preferred (depending on the value of gridreq) horizontal grid. Options: native (for model grid), 1deg, 2deg, 8 to 25km (8km preferred, less than 25km required), 5 to 25km (5km preferred, less than 25km required), blank (no prerefence).', max_length=50, verbose_name='Grid options')),
                ('gridreq', models.CharField(help_text='Is the grid specified by the grid attribute optional (yes) or (no), conditionally (no*1 -- used for ocean data, when native is required only from models using a regular grid)', max_length=50, verbose_name='Grid option constraints')),
                ('comment', models.CharField(help_text='Comment on the requestLink record.', max_length=50, verbose_name='Comment')),
                ('ref', models.CharField(blank=True, help_text='Not used.', max_length=50, null=True, verbose_name='Reference')),
                ('refNote', models.CharField(blank=True, help_text='A comment on the provenance of the record.', max_length=50, null=True, verbose_name='Note on reference')),
                ('opt', models.CharField(help_text="Option for specifying that only a subset of the variables specified in the requestVarGroup should be used. This option is designed to enable the re-use of groups when an easily identified subset of an existing group is wanted. Forreen completed at the request compilation stage. If 'prioirty' is specified, then only variables with priority less than the value specified by 'opar' should be used.", max_length=50, verbose_name='Option for selecting a subset of variables')),
                ('opar', models.CharField(help_text="Parameter associated with 'opar'. If 'opar' is 'priority' it should be set to '1', '2', or '3'.", max_length=50, verbose_name='parameter associated with *opt*')),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('date_published', models.DateTimeField(auto_now_add=True)),
                ('mip', models.ForeignKey(help_text='Link to record defining the MIP using this record.', on_delete=django.db.models.deletion.CASCADE, to='mip_dr_app_vocab.mip', verbose_name='Endorsed MIP requesting the data')),
                ('refid', models.ForeignKey(help_text='Link to the requestVarGroup record defining the variables associated with this requestLink.', on_delete=django.db.models.deletion.CASCADE, to='mip_dr_app_vocab.requestvargroup', verbose_name='Reference to a request Variable Group')),
            ],
            options={
                'verbose_name': '3.3 Request link: linking a set of variables and a set of experiments',
                'verbose_name_plural': '3.3 Request link: linking a set of variables and a set of experiments',
            },
        ),
        migrations.CreateModel(
            name='RequestItem',
            fields=[
                ('label', models.CharField(help_text='Mnemonic label for record', max_length=50, verbose_name='Record Label')),
                ('title', models.CharField(help_text='Title of record', max_length=50, verbose_name='Record Title')),
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record Identifier')),
                ('tab', models.CharField(blank=True, help_text='Redundant attribute ...', max_length=50, null=True, verbose_name='Redundant?')),
                ('expt', models.CharField(help_text='This is redundant: the information is provided through the esid link.', max_length=50, verbose_name='Name of experiment or group of experiments')),
                ('esid', models.CharField(help_text='This links to an individual experiment, to an experimentGroup, specifying a collection of experiments, or to a MIP. If it links to a MIP it means that the request applies to all experiments defined by that MIP.', max_length=50, verbose_name='A link to an experiment, an experiment group or a MIP')),
                ('esidComment', models.CharField(blank=True, help_text='An explanatory commemt for the esid attribute.', max_length=50, null=True, verbose_name='Comment on experiment(s) linked to.')),
                ('preset', models.IntegerField(help_text='If, for example, preset is set to 2, all priority one variables in the variable group associated with this request are treated as priority 2 variables.', verbose_name='Option to override priority set in each variable group')),
                ('treset', models.IntegerField(blank=True, help_text='If, for example, treset is set to 1, all tier 2 and 3 experiments associated with this request are treated as tier 1 variables.', null=True, verbose_name='Option to override tier set for experiment(s)')),
                ('ny', models.IntegerField(help_text='Default number of years, only used if experiment specifications are incomplete: will be redundant in final request.', verbose_name='Default number of years.')),
                ('nexmax', models.IntegerField(blank=True, help_text='Used to provide volume estimate before the links to experiment groups was fully functional.', null=True, verbose_name='Maximum number of experiments requested.')),
                ('nenmax', models.IntegerField(help_text='If set to -1 then the request applies to to all the ensemble members specified in the ensz attribute of the experiment or experiments associated with the request. Note that ensz is a default ensemble size, and nenmax may be greater if one MIP wants more than the default number of ensembles.', verbose_name='Number of ensemble members requested.')),
                ('nymax', models.FloatField(help_text='Number of years specified by the requesting MIP (will be redundant when links to temporal slices are fully implemented).', verbose_name='Number of years requested.')),
                ('tslice', models.CharField(blank=True, help_text='Optional link to a time slice specifier which will define subset of the years from an experiment.', max_length=50, null=True, verbose_name='Selection of years from experiment')),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('date_published', models.DateTimeField(auto_now_add=True)),
                ('mip', models.ForeignKey(help_text='Model Intecomparison Project associated with the requestItem. Redundant because this is specified through the requestLink.', on_delete=django.db.models.deletion.CASCADE, to='mip_dr_app_vocab.mip', verbose_name='The MIP making the request.')),
                ('rlid', models.ForeignKey(help_text='Link to a requestLink record, which makes the connection to a variableGroup and a set of objectives.', on_delete=django.db.models.deletion.CASCADE, to='mip_dr_app_vocab.requestlink', verbose_name='Identifier of Corresponding Request Link')),
            ],
            options={
                'verbose_name': '3.2 Request Item: specifying the number of years for an experiment',
                'verbose_name_plural': '3.2 Request Item: specifying the number of years for an experiment',
            },
        ),
        migrations.CreateModel(
            name='Remarks',
            fields=[
                ('label', models.CharField(help_text='Mnemonic label for record', max_length=50, verbose_name='Record Label')),
                ('title', models.CharField(help_text='Title of record', max_length=50, verbose_name='Record Title')),
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record identifier')),
                ('tattr', models.CharField(help_text='This attribute may be used to identify a specific attribute on the record identified by tid.', max_length=50, verbose_name="Target attribute: an attribute of the target item, or 'ALL'")),
                ('description', models.CharField(max_length=50, verbose_name='Free text remarks -- unless there are specific restrictions associated with the class attribute of this remark')),
                ('class_name', models.CharField(help_text="Different classes of remark support a range of specialised usages: free (a free text comment), modelTypeReq (a model type requirement), modelTypeExcl (a model type exclusion), varAlt (an alternative variable that my be used instead of this one), varSup (an alternative variable which, if selected makes this one redundant), attChange (a change in the value of an attribute -- old value provided in 'techNote').", max_length=50, verbose_name='Class categorisation of remarks')),
                ('qid', models.CharField(blank=True, help_text='Identifier required for classes modelTypeReq, modelTypeExcl, varAlt, varSup. For the first two classes, the identifier points to a model type specification, for the last two it points to an output variable specification.', max_length=50, null=True, verbose_name='Identifier linking to a related record.')),
                ('techNote', models.CharField(blank=True, help_text='Intended for machine readable content.', max_length=50, null=True, verbose_name='Optional additional machine readable content (though not restricted by the schema)')),
                ('prov', models.CharField(help_text='Information about the provenance of this record.', max_length=50, verbose_name='Provenance')),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('date_published', models.DateTimeField(auto_now_add=True)),
                ('tid', models.ForeignKey(blank=True, help_text='Link to a record which this remark relates to.', null=True, on_delete=django.db.models.deletion.CASCADE, to='mip_dr_app_vocab.grids', verbose_name='Target identifier: the record ID of the item this refers to.')),
            ],
            options={
                'verbose_name': '3.8 Remarks about other items',
                'verbose_name_plural': '3.8 Remarks about other items',
            },
        ),
        migrations.CreateModel(
            name='Qcranges',
            fields=[
                ('label', models.CharField(help_text='Mnemonic label for record', max_length=50, verbose_name='Record Label')),
                ('title', models.CharField(help_text='Title of record', max_length=50, verbose_name='Record Title')),
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record identifier')),
                ('url', models.URLField(blank=True, help_text='Link to a web page providing background information.', null=True, verbose_name='Link to review page')),
                ('comment', models.CharField(blank=True, max_length=50, null=True, verbose_name='Comment')),
                ('prov', models.CharField(max_length=50, verbose_name='Provenance')),
                ('valid_min', models.FloatField(blank=True, help_text='The minimum expected value will be used, if set, in quality control tests, and files containing data values below this value will be marked as containing errors.', null=True, verbose_name='Minimum expected value for this variable.')),
                ('valid_max', models.FloatField(blank=True, help_text='The maximum expected value will be used, if set, in quality control tests, and files containing data values above this value will be marked as containing errors.', null=True, verbose_name='Maximum expected value for this variable.')),
                ('ok_min_mean_abs', models.FloatField(blank=True, help_text='This value, if set, will be used  in quality control tests, and files containing data values above this value will be marked as containing errors.', null=True, verbose_name='Minimum expected value of the global mean absolute value at each point in time')),
                ('ok_max_mean_abs', models.FloatField(blank=True, help_text='This value, if set, will be used  in quality control tests, and files containing data values above this value will be marked as containing errors.', null=True, verbose_name='Maximum expected value of the global mean absolute value at each point in time')),
                ('valid_min_status', models.CharField(help_text='Indicates the degree of confidence in the valid_min value provided. Valid values are robust, suggested or tentative. Robust values are based on previous results from a broad range of models with consistent output or on clear physical constraints.', max_length=50, verbose_name='Status of valid_min')),
                ('valid_max_status', models.CharField(help_text='Indicates the degree of confidence in the valid_max value provided. Valid values are robust, suggested or tentative. Robust values are based on previous results from a broad range of models with consistent output or on clear physical constraints.', max_length=50, verbose_name='Status of valid_max')),
                ('ok_min_mean_abs_status', models.CharField(help_text='Indicates the degree of confidence in the value ok_min_mean_abs provided. Valid values are robust, suggested or tentative. Robust values are based on previous results from a broad range of models with consistent output or on clear physical constraints.', max_length=50, verbose_name='Status of ok_min_mean_abs')),
                ('ok_max_mean_abs_status', models.CharField(help_text='Indicates the degree of confidence in the value ok_max_mean_abs provided. Valid values are robust, suggested or tentative. Robust values are based on previous results from a broad range of models with consistent output or on clear physical constraints.', max_length=50, verbose_name='Status of ok_mx_mean_abs')),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('date_published', models.DateTimeField(auto_now_add=True)),
                ('vid', models.ForeignKey(help_text='Link to variable record', on_delete=django.db.models.deletion.CASCADE, to='mip_dr_app_vocab.cmorvar', verbose_name='Variable')),
            ],
            options={
                'verbose_name': 'Quality Control Ranges',
                'verbose_name_plural': 'Quality Control Ranges',
            },
        ),
        migrations.CreateModel(
            name='ObjectiveLink',
            fields=[
                ('label', models.CharField(help_text='Mnemonic label for record', max_length=50, verbose_name='Record Label')),
                ('title', models.CharField(help_text='Title of record', max_length=50, verbose_name='Record Title')),
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record identifier')),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('date_published', models.DateTimeField(auto_now_add=True)),
                ('oid', models.ForeignKey(help_text='Link to record defining an objective.', on_delete=django.db.models.deletion.CASCADE, to='mip_dr_app_vocab.objective', verbose_name='Identifier for a scientific objective')),
                ('rid', models.ForeignKey(help_text='Link to a record defining a requestLink.', on_delete=django.db.models.deletion.CASCADE, to='mip_dr_app_vocab.requestlink', verbose_name='Identifier for a request link')),
            ],
            options={
                'verbose_name': '3.7 Link between scientific objectives and requests',
                'verbose_name_plural': '3.7 Link between scientific objectives and requests',
            },
        ),
        migrations.CreateModel(
            name='Experiment',
            fields=[
                ('label', models.CharField(help_text='Mnemonic label for record', max_length=50, verbose_name='Record Label')),
                ('title', models.CharField(help_text='Title of record', max_length=50, verbose_name='Record Title')),
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Record identifier')),
                ('description', models.CharField(max_length=50, verbose_name='Description')),
                ('mcfg', models.CharField(help_text='Specifies the model source types which are required/allowed for this experiment (see https://github.com/WCRP-CMIP/CMIP6_Cvs/blob/master/CMIP6_source_type.json). Syntax is a space separated list of required source types, follwed by a | and a space separated list of additional allowed source types.', max_length=50, verbose_name='Model Source Types')),
                ('tier', models.CharField(help_text='Experiments are assigned a tier by the MIP specifying the tier, tier 1 experiments being the most important.', max_length=50, verbose_name='Tier of Experiment')),
                ('nstart', models.IntegerField(help_text="For experiments with multiple start times, this gives the number of start times requested. Set to '1' otherwise.", verbose_name='Number of Start Dates')),
                ('starty', models.CharField(help_text="Start year specified for the experiment. This is a string. Fit may contain a year or an explanation which makes reference to another experiment, e.g. 'Year 111 of abrupt4xCO2'.", max_length=50, verbose_name='Start year')),
                ('endy', models.CharField(help_text="End year specified for the experiment. This is a string. Fit may contain a year or an explanation which makes reference to another experiment, e.g. 'Year 140 of abrupt4xCO2'.", max_length=50, verbose_name='End year')),
                ('yps', models.IntegerField(help_text='The number of years per simulation, including all start years. Equal to ES-DOC min_number_yrs_per_sim times nstart.', verbose_name='Years per Simulation Including all Start Years')),
                ('ensz', models.CharField(help_text='Default ensemble size, excluding multiple start times. Total number of model executions will be nstart time ensz. Note that some MIPs may request data from more than the default ensemble size.', max_length=50, verbose_name='Ensemble size')),
                ('ntot', models.IntegerField(help_text='Depricated. Initially used as an estimate of number of years.', verbose_name='Total number of years')),
                ('comment', models.CharField(help_text='Additional information about this experiment group.', max_length=50, verbose_name='Comment')),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('date_published', models.DateTimeField(auto_now_add=True)),
                ('egid', models.ForeignKey(help_text='Link to the exptgroup record associated with this experiment. Each experiment belongs to one experiment group.', on_delete=django.db.models.deletion.CASCADE, to='mip_dr_app_vocab.exptgroup', verbose_name='Identifier for experiment group')),
                ('mip', models.ForeignKey(help_text='Link to a record defining the primary Model Intercomparison Project responsible for the definition of this experiment.', on_delete=django.db.models.deletion.CASCADE, to='mip_dr_app_vocab.mip', verbose_name='MIP defining experiment')),
            ],
            options={
                'verbose_name': '1.5 Experiments',
                'verbose_name_plural': '1.5 Experiments',
            },
        ),
        migrations.AddField(
            model_name='cmorvar',
            name='mtid',
            field=models.ForeignKey(help_text='A link to the record for the MIP table identified by the mipTable attribute.', on_delete=django.db.models.deletion.CASCADE, to='mip_dr_app_vocab.miptable', verbose_name='Link to MIP table record'),
        ),
        migrations.AddField(
            model_name='cmorvar',
            name='stid',
            field=models.ForeignKey(help_text='Link to a record describing the structure of the variable (e.g. spatial and temporal dimensions).', on_delete=django.db.models.deletion.CASCADE, to='mip_dr_app_vocab.structure', verbose_name='Link to a record specifying the structure of the variable'),
        ),
        migrations.AddField(
            model_name='cmorvar',
            name='vid',
            field=models.ForeignKey(help_text='The MIP Variable specifies the physical quantity.', on_delete=django.db.models.deletion.CASCADE, to='mip_dr_app_vocab.var', verbose_name='MIP Variable'),
        ),
    ]
